<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>设计模式-02-创建型模式-单例模式</title>
      <link href="/2024/01/21/design-pattern-graphic/"/>
      <url>/2024/01/21/design-pattern-graphic/</url>
      
        <content type="html"><![CDATA[<h1>创建型模式</h1><p>创建型模式的主要关注点是“怎样创建对象？”，它的主要特点是“将对象的创建与使用分离”。</p><p>这样可以降低系统的耦合度，使用者不需要关注对象的创建细节。</p><p>创建型模式分为：</p><ul><li>单例模式</li><li>工厂方法模式</li><li>抽象工厂模式</li><li>原型模式</li><li>建造者模式</li></ul><h1>单例设计模式</h1><p>单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p><h2 id="1-单例模式的结构">1-单例模式的结构</h2><p>单例模式的主要有以下角色：</p><ul><li>单例类。只能创建一个实例的类</li><li>访问类。使用单例类</li></ul><h2 id="2-单例模式的实现">2-单例模式的实现</h2><blockquote><p>单例设计模式分类两种：</p><ul><li>饿汉式：类加载就会导致该单实例对象被创建</li><li>懒汉式：类加载不会导致该单实例对象被创建，而是首次使用该对象时才会创建</li></ul></blockquote><h3 id="①-静态变量-饿汉式">① 静态变量(饿汉式)</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//饿汉式： 静态成员变量</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//1，私有构造方法</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//2，在本类中创建本类对象</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//3，提供一个公共的访问方式，让外界获取该对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color='red'>说明：</font></p><p>​该方式在成员位置声明 Singleton 类型的静态变量，并创建 Singleton 类的对象 instance。instance 对象是随着类的加载而创建的。如果该对象足够大的话，而一直没有使用就会造成内存的浪费。</p><h3 id="②-静态代码块-饿汉式">② 静态代码块(饿汉式)</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//饿汉式 ： 静态代码块</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//私有构造方法</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//声明Singleton类型的变量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span> <span class="token comment">//null</span>    <span class="token comment">//在静态代码块中进行赋值</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//对外提供获取该类对象的方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color='red'>说明：</font></p><p>​该方式在成员位置声明 Singleton 类型的静态变量，而对象的创建是在静态代码块中，也是对着类的加载而创建。所以和饿汉式的方式1基本上一样，当然该方式也存在内存浪费问题。</p><h3 id="③-synchronized-懒汉式">③ synchronized(懒汉式)</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//私有构造方法</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//声明Singleton类型的变量instance</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span> <span class="token comment">//只是声明一个该类型的变量，并没有进行赋值</span>    <span class="token comment">//对外提供访问方式(加锁)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//判断instance是否为null，如果为null，说明还没有创建Singleton类的对象</span>        <span class="token comment">//如果没有，创建一个并返回，如果有，直接返回</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//线程1等待，线程2获取到cpu的执行权，也会进入到该判断里面</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color='red'>说明：</font></p><p>​该方式也实现了懒加载效果，同时又解决了线程安全问题。但是在 getInstance() 方法上添加了 synchronized 关键字，导致该方法的执行效果特别低。从上面代码我们可以看出，其实就是在初始化 instance 的时候才会出现线程安全问题，一旦初始化完成就不存在了。</p><h3 id="④-双重检查锁-懒汉式-👍">④ 双重检查锁(懒汉式)👍</h3><p>再来讨论一下懒汉模式中加锁的问题，对于 getInstance() 方法来说，<strong>绝大部分的操作都是读操作，读操作是线程安全的，所以我们没必让每个线程必须持有锁才能调用该方法</strong>，我们需要调整加锁的时机。由此也产生了一种新的实现模式：<strong>双重检查锁模式</strong></p><h6 id="code-double-checked">code-double-checked</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//私有构造方法</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//声明Singleton类型的变量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span>    <span class="token comment">//对外提供公共的访问方式</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//第一次判断，如果instance的值不为null，不需要抢占锁，直接返回对象</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//也许有其它线程已经创建实例，所以再判断一次</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>双重检查锁模式是一种非常好的单例实现模式，解决了单例、性能、线程安全问题，上面的双重检测锁模式看上去完美无缺，其实是存在问题，在多线程的情况下，可能会出现空指针问题，出现问题的原因是 JVM 在实例化对象的时候会进行优化和指令重排序操作。</p><p>要解决双重检查锁模式带来空指针异常的问题，只需要使用 <code>volatile</code> 关键字, <code>volatile</code> 关键字可以保证可见性和有序性。</p><p><font color="red">小结：</font></p><p>添加 <code>volatile</code> 关键字之后的双重检查锁模式是一种比较好的单例实现模式，能够保证在多线程的情况下线程安全也不会有性能问题。</p><h3 id="④-补充-指令重排-👍">④ 补充(指令重排)👍</h3><p><img src="./../design-pattern-graphic/image-20240121184520210.png" alt="双重检查-字节码指令"></p><p><font color="red">其中:</font></p><ul><li>17 new 表示创建对象，将对象引用入栈  // new Singleton</li><li>20 dup 表示复制一份对象引用  // 引用地址</li><li>21 invokespecial 表示利用一个对象引用，调用构造方法</li><li>24 putstatic 表示利用一个对象引用，赋值给 static INSTANCE</li></ul><p>也许 JVM 会优化为：先执行 24，再执行 21。如果两个线程 t1，t2 按如下时间序列执行：</p><pre class="mermaid">sequenceDiagramparticipant t1 as t1participant I as INSTANCEparticipant t2 as t2t1 ->> t1: 17: newt1 ->> t1: 20: dupt1 ->> I: 24: putstatic(给 INSTANCE 赋值)t2 ->> I: 0: getstatic(获取 INSTANCE 引用)t2 ->> t2: 3: ifnonull 37(判断不为空, 跳转 37 行)t2 ->> I: 37: getstatic(获取 INSTANCE 引用)t2 ->> t2: 40: return(返回)t2 ->> t2: 使用对象t1 ->> t1: 21: invokespecial(调用构造方法)</pre><p>关键在于 <code>0: getstatic</code> 这行代码在 monitor 控制之外，它就像之前举例中不守规则的人，可以越过 monitor 读取 INSTANCE 变量的值</p><p>这时 t1 还未完全将构造方法执行完毕，如果在构造方法中要执行很多初始化操作，那么 t2 拿到的是将是一个未初始化完毕的单例<br>对 INSTANCE 使用 volatile 修饰即可，可以禁用指令重排，但要注意在 JDK5 以上的版本的 volatile 才会真正有效</p><p><strong>加入 volatile 后效果</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#------------------->加入对 INSTANCE 变量的读屏障</span> <span class="token number">0</span> getstatic <span class="token comment">#2 </span> <span class="token number">3</span> ifnonnull <span class="token number">37</span> <span class="token punctuation">(</span>+34<span class="token punctuation">)</span> <span class="token number">6</span> ldc <span class="token comment">#3 </span> <span class="token number">8</span> dup <span class="token number">9</span> astore_0<span class="token number">10</span> monitorenter<span class="token number">11</span> getstatic <span class="token comment">#2 </span><span class="token number">14</span> ifnonnull <span class="token number">27</span> <span class="token punctuation">(</span>+13<span class="token punctuation">)</span><span class="token number">17</span> new <span class="token comment">#3 </span><span class="token number">20</span> dup<span class="token number">21</span> invokespecial <span class="token comment">#4 </span><span class="token number">24</span> putstatic <span class="token comment">#2 </span><span class="token comment">#------------------>加入对 INSTANCE 变量的写屏障</span><span class="token number">27</span> aload_0<span class="token number">28</span> monitorexit <span class="token comment">#--->保证原子性、可见性</span><span class="token number">29</span> goto <span class="token number">37</span> <span class="token punctuation">(</span>+8<span class="token punctuation">)</span><span class="token number">32</span> astore_1<span class="token number">33</span> aload_0<span class="token number">34</span> monitorexit<span class="token number">35</span> aload_1<span class="token number">36</span> athrow<span class="token number">37</span> getstatic <span class="token comment">#2 </span><span class="token number">40</span> areturn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上面的注释内容所示，读写 volatile 变量时会加入内存屏障（Memory Barrier（Memory Fence）），保证下面两点：</p><ul><li>可见性<ul><li>写屏障（sfence）保证在该屏障之前的 t1 对共享变量的改动，都同步到主存当中</li><li>而读屏障（lfence）保证在该屏障之后 t2 对共享变量的读取，加载的是主存中最新数据</li></ul></li><li>有序性<ul><li>写屏障会确保指令重排序时，不会将写屏障之前的代码排在写屏障之后(我写我后写)</li><li>读屏障会确保指令重排序时，不会将读屏障之后的代码排在读屏障之前(我读我先读)</li></ul></li><li>更底层是读写变量时使用 lock 指令来多核 CPU 之间的可见性与有序性</li></ul><pre class="mermaid">sequenceDiagramparticipant t1 as t1participant I as INSTANCEparticipant t2 as t2t1 ->> t1: 17: newt1 ->> t1: 20: dupt1 ->> t1: 21: invokespecial(调用构造方法)t2 --x I: 0: getstatic(获取 INSTANCE 引用, 带读屏障)t1 --x I: 24: putstatic(给 INSTANCE 赋值, 带写屏障)t2 ->> t2: 3: ifnonull 37(判断不为空, 跳转 37 行)t2 --x I: 37: getstatic(获取 INSTANCE 引用)t2 ->> t2: 40: return(返回)t2 ->> t2: 使用对象</pre><h3 id="⑤-静态内部类-懒汉式-👍">⑤ 静态内部类(懒汉式)👍</h3><p>静态内部类单例模式中实例由内部类创建，由于 JVM 在加载外部类的过程中, 是不会加载静态内部类的, 只有内部类的属性/方法被调用时才会被加载, 并初始化其静态属性。静态属性由于被 <code>static</code> 修饰，保证只被实例化一次，并且严格保证实例化顺序。</p><h6 id="code-static-inner-class">code-static-inner-class</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//私有构造方法</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//定义一个静态内部类</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHolder</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//在内部类中声明并初始化外部类的对象</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Singleton</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//提供公共的访问方式</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">SingletonHolder</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color='red'>说明：</font></p><p>​第一次加载 Singleton 类时不会去初始化 INSTANCE，只有第一次调用 getInstance()，虚拟机加载 SingletonHolder</p><p>并初始化 INSTANCE，这样不仅能确保线程安全，也能保证 Singleton 类的唯一性。</p><p><font color="red">小结：</font></p><p>​静态内部类单例模式是一种优秀的单例模式，是开源项目中比较常用的一种单例模式。在没有加任何锁的情况下，保证了多线程下的安全，并且没有任何性能影响和空间的浪费。</p><h3 id="⑥-枚举-饿汉式">⑥ 枚举(饿汉式)</h3><p>枚举类实现单例模式是极力推荐的单例实现模式，因为枚举类型是线程安全的，并且只会装载一次，设计者充分的利用了枚举的这个特性来实现单例模式，枚举的写法非常简单，而且枚举类型是所用单例实现中唯一一种不会被破坏的单例实现模式。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 枚举方式 */</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>    <span class="token constant">INSTANCE</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color='red'>说明：</font></p><p>​枚举方式属于恶汉式方式。</p><h2 id="3-存在的问题">3-存在的问题</h2><h3 id="破坏单例模式">破坏单例模式</h3><p>使上面定义的单例类（Singleton）可以创建多个对象，枚举方式除外。有两种方式，分别是序列化和反射。</p><h4 id="Ⅰ-序列化反序列化">Ⅰ 序列化反序列化</h4><p><strong>Singleton类：</strong></p><p><a href="#code-double-checked">双重检查锁 Code</a> 或者 <a href="#code-static-inner-class">静态内部类 Code</a></p><p><strong>Test类</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DestroySingletonTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token comment">//        writeObject2File(); //1.先写数据</span>        <span class="token function">readObjectFromFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2.多次读数据</span>        <span class="token function">readObjectFromFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2.多次读数据</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//从文件读取数据（对象）</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">readObjectFromFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1,创建对象输入流对象</span>        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\Think\\Desktop\\a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2,读取对象</span>        <span class="token class-name">Singleton</span> instance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//释放资源</span>        ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//向文件中写数据（对象）</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writeObject2File</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1,获取Singleton对象</span>        <span class="token class-name">Singleton</span> instance <span class="token operator">=</span> <span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2,创建对象输出流对象</span>        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"./a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3,写对象</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4,释放资源</span>        oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Ⅱ-反射">Ⅱ 反射</h4><p><strong>Singleton类：</strong></p><p><a href="#code-double-checked">双重检查锁 Code</a> 或者 <a href="#code-static-inner-class">静态内部类 Code</a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DestroySingletionTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1,获取Singleton的字节码对象</span>        <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token comment">//2,获取无参构造方法对象</span>        <span class="token class-name">Constructor</span> cons <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3,取消访问检查</span>        cons<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4,创建Singleton对象</span>        <span class="token class-name">Singleton</span> s1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">)</span> cons<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Singleton</span> s2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">)</span> cons<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//如果返回的是true，说明并没有破坏单例模式，如果是false，说明破坏了单例模式</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="防止破解办法">防止破解办法</h3><h4 id="Ⅰ-序列化、反序列破解">Ⅰ 序列化、反序列破解</h4><p>在 Singleton 类中添加 <code>readResolve()</code> 方法，在反序列化时被反射调用，如果定义了这个方法，就返回这个方法的值，如果没有定义，则返回新 new 出来的对象。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//私有构造方法</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//定义一个静态内部类</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHolder</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//在内部类中声明并初始化外部类的对象</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Singleton</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//提供公共的访问方式</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">SingletonHolder</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//当进行反序列化时，会自动调用该方法，将该方法的返回值直接返回👍</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">readResolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">SingletonHolder</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>源码解析</strong></p><p>ObjectInputStream 类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">readObject0</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">readOrdinaryObject</span><span class="token punctuation">(</span>unshared<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">//判断是否有 readResolve() 方法</span><span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>    handles<span class="token punctuation">.</span><span class="token function">lookupException</span><span class="token punctuation">(</span>passHandle<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>    desc<span class="token punctuation">.</span><span class="token function">hasReadResolveMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Object</span> rep <span class="token operator">=</span> desc<span class="token punctuation">.</span><span class="token function">invokeReadResolve</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Ⅱ-反射破解">Ⅱ 反射破解</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">//私有构造方法</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//判断flag的值是否是true，如果是true，说明非第一次访问，直接抛一个异常，如果是false的话，说明第一次访问</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"不能创建多个对象"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//将flag的值设置为true</span>            flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//定义一个静态内部类</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHolder</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//在内部类中声明并初始化外部类的对象</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Singleton</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//提供公共的访问方式</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">SingletonHolder</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font color="red">说明:</font></p><p>​这种方式比较好理解。当通过反射方式调用构造方法进行创建创建时，直接抛异常。不运行此中操作。</p><h2 id="4-JDK-单例模式案例-Runtime">4-JDK 单例模式案例(Runtime)</h2><p>Runtime类就是使用的单例设计模式。</p><h3 id="源码">源码</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Runtime</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Runtime</span> currentRuntime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Runtime</span> <span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> currentRuntime<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">Runtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面源代码中可以看出 Runtime 类使用的是恶汉式（静态属性）方式来实现单例模式的。</p><h3 id="使用-Runtime-类中的方法">使用 Runtime 类中的方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RuntimeDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//获取Runtime类的对象</span>        <span class="token class-name">Runtime</span> runtime <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//调用runtime的方法exec, 参数要的是一个命令</span>        <span class="token class-name">Process</span> process <span class="token operator">=</span> runtime<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"ipconfig"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//调用process对象的获取输入流的方法</span>        <span class="token class-name">InputStream</span> is <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//100M</span>        <span class="token comment">//读取数据</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回读到的字节的个数</span>        <span class="token comment">//将字节数组转换为字符串输出到控制台</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">,</span><span class="token string">"GBK"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> DesignPattern </tag>
            
            <tag> Mermaid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM-Tuning-04-JVM监控及诊断-分析GC日志</title>
      <link href="/2024/01/20/jvm-tuning4/"/>
      <url>/2024/01/20/jvm-tuning4/</url>
      
        <content type="html"><![CDATA[<h1>JVM监控及诊断-分析GC日志</h1><h2 id="01-GC日志参数">01-GC日志参数</h2><p>见上一篇</p><h2 id="02-GC日志格式">02-GC日志格式</h2><p>针对 HotSpot VM 的实现，它里面的 GC 按照回收区域又分为两大种类型：一种是部分收集(Partial GC), 一种是整堆收集(Full GC)</p><ul><li>部分收集：不是完整收集整个Java 堆的垃圾收集。其中又分为：<ul><li>新生代收集(Minor GC / Young GC): 只是新生代(Eden \ S0, S1)的垃圾收集</li><li>老年代收集(Major GC / Old GC): 只是老年代的垃圾收集。<ul><li>目前，只有 CMS GC 会有单独收集老年代的行为。</li><li>注意，很多时候 Major GC 会和 Full GC 混淆使用，需要具体分辨是老年代回收还是整堆回收。</li></ul></li><li>混合收集(Mixed GC): 收集整个新生代以及部分老年代的垃圾收集。<ul><li>目前，只有G1 GC会有这种行为</li></ul></li></ul></li><li>整堆收集(Full GC):收集整个 Java 堆和方法区的垃圾收集。</li></ul><blockquote><ul><li>新生代收集：当Eden区满的时候就会进行新生代收集，所以新生代收集和S0区域和S1区域无关</li><li>老年代收集和新生代收集的关系：进行老年代收集之前会先进行一次年轻代的垃圾收集，原因如下：一个比较大的对象无法放入新生代，那它自然会往老年代去放，如果老年代也放不下，那会先进行一次新生代的垃圾收集，之后尝试往新生代放，如果还是放不下，才会进行老年代的垃圾收集，之后在往老年代去放，这是一个过程，我来说明一下为什么需要往老年代放，但是放不下，而进行新生代垃圾收集的原因，这是因为新生代垃圾收集比老年代垃圾收集更加简单，这样做可以节省性能</li><li>进行垃圾收集的时候，堆包含新生代、老年代、元空间/永久代：可以看出Heap后面包含着新生代、老年代、元空间，但是我们设置堆空间大小的时候设置的只是新生代、老年代而已，元空间是分开设置的</li><li>哪些情况会触发 Full GC?<ul><li>老年代空间不足</li><li>方法区空间不足</li><li>显示调用 System.gc()</li><li>Minor GC 进入老年代的数据的平均大小 &gt; 老年代的可用内存</li><li>大对象直接进入老年代, 而老年代空间不足</li></ul></li></ul></blockquote><h3 id="GC日志分类">GC日志分类</h3><h4 id="MinorGC">MinorGC</h4><p>MinorGC(或 Young GC YGC)日志</p><p><img src="./../jvm-tuning4/image-20240120215254320.png" alt=""></p><p><img src="./../jvm-tuning4/image-20240120215425954.png" alt=""></p><h4 id="Full-GC日志介绍">Full GC日志介绍</h4><p><img src="./../jvm-tuning4/image-20240120215455431.png" alt=""></p><p><img src="./../jvm-tuning4/image-20240120215522224.png" alt=""></p><h3 id="GC日志结构剖析">GC日志结构剖析</h3><h4 id="垃圾收集器">垃圾收集器</h4><ul><li>使用 Serial 收集器在新生代的名字是 Default New Generation, 因此显示的是 “[DefNew”</li><li>使用 ParNew 收集器在新生代的名字会变成 “[ParNew”,意思是 “Parallel New Generation”</li><li>使用 Parallel Scavengel 收集器在新生代的名字是 “[PSYoungGen”, 这里的 JDK1.7 使用的就是 PSYoungGen</li><li>使用 Parallel Old Generation 收集器在老年代的名字是 “[Par0ldGen”</li><li>使用 G1 收集器的话，会显示为 “garbage-first heap”</li></ul><p><strong>Allocation Failure</strong></p><p>表明本次引起 GC 的原因是因为在年轻代中没有足够的空间能够存储新的数据了。</p><h4 id="GC前后情况">GC前后情况</h4><p>通过图示，我们可以发现GC日志格式的规律一般都是：GC前内存占用 -&gt; GC 后内存占用（该区域内存总大小)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>PSYoungGen:5986K-<span class="token operator">></span>696K<span class="token punctuation">(</span>8704K<span class="token punctuation">)</span><span class="token punctuation">]</span>5986K-<span class="token operator">></span>704K<span class="token punctuation">(</span>9216K<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>中括号内：GC 回收前年轻代堆大小，回收后大小，（年轻代堆总大小）</p><p>括号外：GC 回收前年轻代和老年代大小，回收后大小，（年轻代和老年代总大小）</p><h4 id="GC时间">GC时间</h4><p>GC 日志中有三个时间：user, sys 和 real</p><ul><li>user - 进程执行用户态代码（核心之外）所使用的时间。<strong>这是执行此进程所使用的实际 CPU 时间</strong>，其他进程和此进程阻塞的时间并不包括在内。在垃圾收集的情况下，表示 GC 线程执行所使用的 CPU 总时间。</li><li>sys - 进程在内核态消耗的 CPU 时间，即<strong>在内核执行系统调用或等待系统事件所使用的 CPU 时间</strong></li><li>real - 程序从开始到结束所用的时钟时间。这个时间包括其他进程使用的时间片和进程阻塞的时间（比如等待 I/O 完成）。对于并行 gc , 这个数字应该接近（用户时间 + 系统时间）除以垃圾收集器使用的线程数。</li></ul><p>由于多核的原因，一般的 GC 事件中，real time 是小于 sys + user time 的，因为一般是多个线程并发的去做 GC ,所以 real time 是要小于 sys + user time 的。如果 real &gt; sys + user 的话，则你的应用可能存在下列问题：IO 负载非常重或者是 CPU 不够用。</p><h3 id="Minor-GC-日志解析">Minor GC 日志解析</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">2020</span>-11-20T17:19:43.265-0800:0.822:<span class="token punctuation">[</span>GC<span class="token punctuation">(</span>ALL0CATI0 N FAILURE<span class="token punctuation">)</span> <span class="token punctuation">[</span>PSYOUNGGEN:76800K-<span class="token operator">></span>8433K<span class="token punctuation">(</span>89600K<span class="token punctuation">)</span><span class="token punctuation">]</span>76800K-<span class="token operator">></span>8449K<span class="token punctuation">(</span>294400K<span class="token punctuation">)</span>,0.0088371SECS<span class="token punctuation">]</span><span class="token punctuation">[</span>TIMES:<span class="token environment constant">USER</span><span class="token operator">=</span><span class="token number">0.02</span> <span class="token assign-left variable">SYS</span><span class="token operator">=</span><span class="token number">0.01</span>,REAL<span class="token operator">=</span><span class="token number">0.01</span> SECS<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>详解</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">2020</span>-11-20T17:19:43.265-0800<span class="token comment">#日志打印时间 日期格式 如2013-05-04T21:53:59.234+0800 (添加-XX:+PrintGCDateStamps参数)</span><span class="token number">0.822</span>:<span class="token comment">#gc发生时，Java虚拟机启动以来经过的秒数</span><span class="token punctuation">[</span>GC<span class="token punctuation">(</span>Allocation Failure<span class="token punctuation">)</span><span class="token comment">#发生了一次垃圾回收，这是一次Minior GC。它不区分新生代还是老年代GC，括号里的内容是gc发生的原因，这里的Allocation Failure的原因是新生代中没有足够区域能够存放需要分配的数据而失败</span><span class="token punctuation">[</span>PSYoungGen:76800K-<span class="token operator">></span>8433K<span class="token punctuation">(</span>89600K<span class="token punctuation">)</span>PSYoungGen：<span class="token comment">#表示GC发生的区域，区域名称与使用的GC收集器是密切相关的</span><span class="token comment">#Serial收集器：Default New Generation 显示Defnew</span><span class="token comment">#ParNew收集器：ParNew</span><span class="token comment">#Parallel Scanvenge收集器：PSYoung</span><span class="token comment">#老年代和新生代同理，也是和收集器名称相关</span>76800K-<span class="token operator">></span>8433K<span class="token punctuation">(</span>89600K<span class="token punctuation">)</span>：<span class="token comment">#GC前该内存区域已使用容量->GC后盖区域容量(该区域总容量)</span><span class="token comment">#如果是新生代，总容量则会显示整个新生代内存的9/10，即eden+from/to区</span><span class="token comment">#如果是老年代，总容量则是全身内存大小，无变化</span>76800K-<span class="token operator">></span>8449K<span class="token punctuation">(</span>294400K<span class="token punctuation">)</span><span class="token comment">#在显示完区域容量GC的情况之后，会接着显示整个堆内存区域的GC情况：GC前堆内存已使用容量->GC后堆内存容量（堆内存总容量），并且堆内存总容量 = 9/10 新生代 + 老年代，然后堆内存总容量肯定小于初始化的内存大小</span>,0.0088371 <span class="token comment">#整个GC所花费的时间，单位是秒</span><span class="token punctuation">[</span>Times：user<span class="token operator">=</span><span class="token number">0.02</span> <span class="token assign-left variable">sys</span><span class="token operator">=</span><span class="token number">0.01</span>,real<span class="token operator">=</span><span class="token number">0.01</span> secs<span class="token punctuation">]</span>user：<span class="token comment">#指CPU工作在用户态所花费的时间</span>sys：<span class="token comment">#指CPU工作在内核态所花费的时间</span>real：<span class="token comment">#指在此次事件中所花费的总时间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Full-GC-日志解析">Full GC 日志解析</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">2020</span>-11-20T17:19:43.794-0800:1.351:<span class="token punctuation">[</span>FULL GC<span class="token punctuation">(</span>METADATA GC THRESH0LD<span class="token punctuation">)</span> <span class="token punctuation">[</span>PSYOUNGGEN:10082K-<span class="token operator">></span>0K<span class="token punctuation">(</span>89600K<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>PAR0 LDGEN:32K-<span class="token operator">></span>9638K<span class="token punctuation">(</span>204800K<span class="token punctuation">)</span><span class="token punctuation">]</span> 10114K-<span class="token operator">></span>9638K<span class="token punctuation">(</span>294400K<span class="token punctuation">)</span>, <span class="token punctuation">[</span>METASPACE:20158K-<span class="token operator">></span>20156K<span class="token punctuation">(</span>1067008K<span class="token punctuation">)</span><span class="token punctuation">]</span>,0.0285388SECS<span class="token punctuation">]</span><span class="token punctuation">[</span>TIMES:<span class="token environment constant">USER</span><span class="token operator">=</span><span class="token number">0.11</span>,SYS<span class="token operator">=</span><span class="token number">0.00</span>,REAL<span class="token operator">=</span><span class="token number">0.03</span> SECS<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>详解</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">2020</span>-11-20T17:19:43.794-0800<span class="token comment">#日志打印时间 日期格式 如:2013-05-04T21:53:59.234+0800 (添加-XX:+PrintGCDateStamps参数)</span><span class="token number">1.351</span><span class="token comment">#gc发生时，Java虚拟机启动以来经过的秒数</span>Full GC<span class="token punctuation">(</span>Metadata GCThreshold<span class="token punctuation">)</span><span class="token comment">#发生了一次垃圾回收, 这一次 Full GC. 它不区分新生代 GC 还是老年代 GC</span><span class="token comment">#括号中是 gc 发生的原因，原因：Metaspace区不够用了。</span><span class="token comment">#除此之外，还有另外两种情况会引起Full GC，如下：</span><span class="token comment">#1、Full GC(FErgonomics)</span><span class="token comment">#原因：JVM自适应调整导致的GC</span><span class="token comment">#2、Full GC（System）</span><span class="token comment">#原因：调用了System.gc()方法</span><span class="token punctuation">[</span>PSYoungGen: 100082K-<span class="token operator">></span>0K<span class="token punctuation">(</span>89600K<span class="token punctuation">)</span><span class="token punctuation">]</span>PSYoungGen：<span class="token comment">#表示GC发生的区域，区域名称与使用的GC收集器是密切相关的</span><span class="token comment">#Serial收集器：Default New Generation 显示Defnew</span><span class="token comment">#ParNew收集器：ParNew</span><span class="token comment">#Parallel Scanvenge收集器：PSYoungGen</span><span class="token comment">#老年代和新生代同理，也是和收集器名称相关</span>10082K-<span class="token operator">></span>0K<span class="token punctuation">(</span>89600K<span class="token punctuation">)</span>：<span class="token comment">#GC前该内存区域已使用容量->GC该区域容量(该区域总容量)</span><span class="token comment">#如果是新生代，总容量会显示整个新生代内存的9/10，即eden+from/to区</span><span class="token comment">#如果是老年代，总容量则是全部内存大小，无变化</span>ParOldGen：32K-<span class="token operator">></span>9638K<span class="token punctuation">(</span>204800K<span class="token punctuation">)</span><span class="token comment">#老年代区域没有发生GC，因此本次GC是metaspace引起的</span>10114K-<span class="token operator">></span>9638K<span class="token punctuation">(</span>294400K<span class="token punctuation">)</span>,<span class="token comment">#在显示完区域容量GC的情况之后，会接着显示整个堆内存区域的GC情况：GC前堆内存已使用容量->GC后堆内存容量（堆内存总容量），并且堆内存总容量 = 9/10 新生代 + 老年代，然后堆内存总容量肯定小于初始化的内存大小</span><span class="token punctuation">[</span>Meatspace:20158K-<span class="token operator">></span>20156K<span class="token punctuation">(</span>1067008K<span class="token punctuation">)</span><span class="token punctuation">]</span>,<span class="token comment">#metaspace GC 回收2K空间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="03-GC日志分析工具">03-GC日志分析工具</h2><h3 id="GCeasy">GCeasy</h3><p>官网地址：<a href="https://gceasy.io/%EF%BC%8C">https://gceasy.io/，</a></p><p>GCeasy 是一款在线的 GC 日志分析器，可以通过 GC 日志分析进行内存泄漏检测、GC 暂停原因分析、JVM 配置建议优化等功能，而且是可以免费使用的（有一些服务是收费的)</p><p><img src="./../jvm-tuning4/image-20240120223205565.png" alt=""></p><p><img src="./../jvm-tuning4/image-20240120223312661.png" alt=""></p><h3 id="GCViewer">GCViewer</h3><ol><li><p>下载GCViewer工具</p><p>源码下载：<a href="https://github.com/chewiebug/GCViewer">https://github.com/chewiebug/GCViewer</a></p><p>运行版本下载：<a href="https://github.com/chewiebug/GCViewer/wiki/Changelog">https://github.com/chewiebug/GCViewer/wiki/Changelog</a></p></li><li><p>只需双击 gcviewer-1.3x.jar 或运行 java-jar gcviewer-1.3x.jar (它需要运行 java1.8vm),即可启动 GCViewer(gui)</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mermaid-流程图</title>
      <link href="/2024/01/20/mermaid-flowchart/"/>
      <url>/2024/01/20/mermaid-flowchart/</url>
      
        <content type="html"><![CDATA[<h1>Mermaid-流程图</h1><blockquote><p>摘录自 <a href="https://mermaid.nodejs.cn/syntax/flowchart.html">流程图语法 | Mermaid 中文网 (nodejs.cn)</a></p></blockquote><p>流程图由 <strong>nodes</strong>（几何形状）和 <strong>edges</strong>（箭头或线条）组成。 Mermaid 代码定义了如何制作节点和边，并适应不同的箭头类型、多方向箭头以及任何与子图的链接。</p><h2 id="一个节点（默认）">一个节点（默认）</h2><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">---title: Node---flowchart LR    id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">---title: Node---flowchart LR    id</pre><h2 id="带有文本的节点">带有文本的节点</h2><p>也可以在框中设置与 id 不同的文本。 如果执行此操作多次，则它将是为要使用的节点找到的最后一个文本。 此外，如果稍后为节点定义边，则可以省略文本定义。 渲染盒子时将使用先前定义的值。</p><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">---title: Node with text---flowchart LR    id1[This is the text in the box]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">---title: Node with text---flowchart LR    id1[This is the text in the box]</pre><h3 id="统一码文本">统一码文本</h3><p>使用 <code>&quot;</code> 将 unicode 文本括起来。</p><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">flowchart LR    id[&quot;This ❤ Unicode&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="mermaid">flowchart LR    id["This ❤ Unicode"]</pre><h3 id="Markdown-格式">Markdown 格式</h3><p>使用双引号和反引号 “<code>text</code>” 将 Markdown 文本括起来。</p><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">%%&#123;init: &#123;&quot;flowchart&quot;: &#123;&quot;htmlLabels&quot;: false&#125;&#125; &#125;%%flowchart LR    markdown[&quot;&#96;This **is** _Markdown_&#96;&quot;]    newLines[&quot;&#96;Line1    Line 2    Line 3&#96;&quot;]    markdown --&gt; newLines<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">%%{init: {"flowchart": {"htmlLabels": false}} }%%flowchart LR    markdown["`This **is** _Markdown_`"]    newLines["`Line1    Line 2    Line 3`"]    markdown --> newLines</pre><h2 id="方向">方向</h2><p>该语句声明了流程图的方向。</p><p>这声明流程图是从上到下（<code>TD</code> 或 <code>TB</code>）的。</p><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">flowchart TD    Start --&gt; Stop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="mermaid">flowchart TD    Start --> Stop</pre><p>这声明流程图是从左到右定向的 (<code>LR</code>)。</p><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">flowchart LR    Start --&gt; Stop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="mermaid">flowchart LR    Start --> Stop</pre><p>可能的流程图方向是：</p><ul><li>TB - 从上到下</li><li>TD - 自上而下/与自上而下相同</li><li>BT - 从下到上</li><li>RL - 从右到左</li><li>LR - 从左到右</li></ul><h2 id="节点形状">节点形状</h2><p>具有圆边的节点</p><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">flowchart LR    id1(This is the text in the box)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="mermaid">flowchart LR    id1(This is the text in the box)</pre><p>体育场形状的节点</p><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">flowchart LR    id1([This is the text in the box])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="mermaid">flowchart LR    id1([This is the text in the box])</pre><p>子程序形状中的节点</p><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">flowchart LR    id1[[This is the text in the box]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="mermaid">flowchart LR    id1[[This is the text in the box]]</pre><p>圆柱形节点</p><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">flowchart LR    id1[(Database)]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="mermaid">flowchart LR    id1[(Database)]</pre><p>一个圆形的节点</p><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">flowchart LR    id1((This is the text in the circle))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="mermaid">flowchart LR    id1((This is the text in the circle))</pre><p>形状不对称的节点</p><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">flowchart LR    id1&gt;This is the text in the box]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="mermaid">flowchart LR    id1>This is the text in the box]</pre><p>目前只有上面的形状是可能的，而不是它的镜像。 这可能会随着未来的版本而改变。</p><p>节点（菱形）</p><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">flowchart LR    id1&#123;This is the text in the box&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="mermaid">flowchart LR    id1{This is the text in the box}</pre><p>六边形节点</p><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">flowchart LR    id1&#123;&#123; This is the text in the box &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>此处渲染会报错</p></blockquote><p>平行四边形</p><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">flowchart TD    id1[&#x2F;This is the text in the box&#x2F;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="mermaid">flowchart TD    id1[/This is the text in the box/]</pre><p>平行四边形 alt</p><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">flowchart TD    id1[\This is the text in the box\]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="mermaid">flowchart TD    id1[\This is the text in the box\]</pre><p>梯形</p><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">flowchart TD    A[&#x2F;Christmas\]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="mermaid">flowchart TD    A[/Christmas\]</pre><p>梯形 alt</p><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">flowchart TD    B[\Go shopping&#x2F;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="mermaid">flowchart TD    B[\Go shopping/]</pre><p>双圈</p><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">flowchart TD    id1(((This is the text in the circle)))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="mermaid">flowchart TD    id1(((This is the text in the circle)))</pre><h2 id="节点之间的链接">节点之间的链接</h2><p>节点可以通过链接/边连接。 可以有不同类型的链接或将文本字符串附加到链接。</p><h3 id="带箭头的链接">带箭头的链接</h3><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">flowchart LR    A--&gt;B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="mermaid">flowchart LR    A-->B</pre><h3 id="一个打开的链接">一个打开的链接</h3><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">flowchart LR    A --- B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="mermaid">flowchart LR    A --- B</pre><h3 id="链接上的文本">链接上的文本</h3><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">flowchart LR    A-- This is the text! ---B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="mermaid">flowchart LR    A-- This is the text! ---B</pre><p>or</p><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">flowchart LR    A---|This is the text|B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="mermaid">flowchart LR    A---|This is the text|B</pre><h3 id="带有箭头和文本的链接">带有箭头和文本的链接</h3><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">flowchart LR    A--&gt;|text|B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="mermaid">flowchart LR    A-->|text|B</pre><p>or</p><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">flowchart LR    A-- text --&gt;B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="mermaid">flowchart LR    A-- text -->B</pre><h3 id="虚线链接">虚线链接</h3><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">flowchart LR   A-.-&gt;B;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="mermaid">flowchart LR   A-.->B;</pre><h3 id="带文本的虚线链接">带文本的虚线链接</h3><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">flowchart LR   A-. text .-&gt; B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="mermaid">flowchart LR   A-. text .-> B</pre><h3 id="粗链接">粗链接</h3><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">flowchart LR   A &#x3D;&#x3D;&gt; B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="mermaid">flowchart LR   A ==> B</pre><h3 id="带文本的粗链接">带文本的粗链接</h3><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">flowchart LR   A &#x3D;&#x3D; text &#x3D;&#x3D;&gt; B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="mermaid">flowchart LR   A == text ==> B</pre><h3 id="看不见的链接">看不见的链接</h3><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">flowchart LR    A ~~~ B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="mermaid">flowchart LR    A ~~~ B</pre><h3 id="链接的链接">链接的链接</h3><p>可以在同一行中声明多个链接，如下所示：</p><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">flowchart LR   A -- text --&gt; B -- text2 --&gt; C<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="mermaid">flowchart LR   A -- text --> B -- text2 --> C</pre><p>还可以在同一行中声明多个节点链接，如下所示：</p><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">flowchart LR   a --&gt; b &amp; c--&gt; d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="mermaid">flowchart LR   a --> b & c--> d</pre><p>然后，你可以以非常富有表现力的方式描述依赖。 就像下面的一行字：</p><pre class="line-numbers language-null" data-language="null"><code class="language-null">flowchart TB    A &amp; B--&gt; C &amp; D<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="mermaid">flowchart TB    A & B--> C & D</pre><p>如果使用基本语法描述同一个图，则需要四行。 警告一句，这样做可能会导致流程图更难以 Markdown 形式阅读。 我想到了瑞典语“<code>lagom</code>”。 意思是，不能太多，也不能太少。 这也适用于表达语法。</p><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">flowchart TB    A --&gt; C    A --&gt; D    B --&gt; C    B --&gt; D<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">flowchart TB    A --> C    A --> D    B --> C    B --> D</pre><h3 id="新的箭头类型">新的箭头类型</h3><p>支持以下新类型的箭头：</p><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">flowchart LR    A --o B    B --x C<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="mermaid">flowchart LR    A --o B    B --x C</pre><h3 id="多方向箭头">多方向箭头</h3><p>可以使用多向箭头。</p><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">flowchart LR    A o--o B    B &lt;--&gt; C    C x--x D<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">flowchart LR    A o--o B    B <--> C    C x--x D</pre><h3 id="链接的最小长度">链接的最小长度</h3><p>流程图中的每个节点最终根据其链接到的节点分配给渲染图中的一个等级，即垂直或水平级别（取决于流程图方向）。 默认情况下，链接可以跨越任意数量的等级，但你可以通过在链接定义中添加额外的破折号来要求任何链接比其他链接更长。</p><p>在以下示例中，在从节点 B 到节点 E 的链接中添加了两个额外的破折号，以便它比常规链接多跨越两个等级：</p><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">flowchart TD    A[Start] --&gt; B&#123;Is it?&#125;    B --&gt;|Yes| C[OK]    C --&gt; D[Rethink]    D --&gt; B    B ----&gt;|No| E[End]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">flowchart TD    A[Start] --> B{Is it?}    B -->|Yes| C[OK]    C --> D[Rethink]    D --> B    B ---->|No| E[End]</pre><blockquote><p><strong>注意</strong> 链接仍可能比渲染引擎所请求的等级数更长，以适应其他请求。</p></blockquote><p>当链接标签写在链接中间时，必须在链接右侧添加额外的破折号。 以下示例与上一个示例等效：</p><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">flowchart TD    A[Start] --&gt; B&#123;Is it?&#125;    B -- Yes --&gt; C[OK]    C --&gt; D[Rethink]    D --&gt; B    B -- No ----&gt; E[End]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">flowchart TD    A[Start] --> B{Is it?}    B -- Yes --> C[OK]    C --> D[Rethink]    D --> B    B -- No ----> E[End]</pre><p>对于点链接或粗链接，要添加的字符是等号或点，如下表所示：</p><table><thead><tr><th style="text-align:left">长度</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th></tr></thead><tbody><tr><td style="text-align:left">普通的</td><td style="text-align:center"><code>---</code></td><td style="text-align:center"><code>----</code></td><td style="text-align:center"><code>-----</code></td></tr><tr><td style="text-align:left">正常带箭头</td><td style="text-align:center"><code>--&gt;</code></td><td style="text-align:center"><code>---&gt;</code></td><td style="text-align:center"><code>----&gt;</code></td></tr><tr><td style="text-align:left">厚的</td><td style="text-align:center"><code>===</code></td><td style="text-align:center"><code>====</code></td><td style="text-align:center"><code>=====</code></td></tr><tr><td style="text-align:left">粗带箭头</td><td style="text-align:center"><code>==&gt;</code></td><td style="text-align:center"><code>===&gt;</code></td><td style="text-align:center"><code>====&gt;</code></td></tr><tr><td style="text-align:left">点状</td><td style="text-align:center"><code>-.-</code></td><td style="text-align:center"><code>-..-</code></td><td style="text-align:center"><code>-...-</code></td></tr><tr><td style="text-align:left">带有箭头的虚线</td><td style="text-align:center"><code>-.-&gt;</code></td><td style="text-align:center"><code>-..-&gt;</code></td><td style="text-align:center"><code>-...-&gt;</code></td></tr></tbody></table><h2 id="破坏语法的特殊字符">破坏语法的特殊字符</h2><p>可以将文本放在引号内以渲染更麻烦的字符。 如下例所示：</p><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">flowchart LR    id1[&quot;This is the (text) in the box&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="mermaid">flowchart LR    id1["This is the (text) in the box"]</pre><h3 id="用于转义字符的实体代码">用于转义字符的实体代码</h3><p>可以使用此处示例的语法对字符进行转义。</p><pre class="line-numbers language-null" data-language="null"><code class="language-null">flowchart LRA[&quot;A double quote:#quot;&quot;] --&gt; B[&quot;A dec char:#9829;&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="mermaid">flowchart LRA["A double quote:#quot;"] --> B["A dec char:#9829;"]</pre><p>给出的数字以 10 为基数，因此 <code>#</code> 可以编码为 <code>#35;</code>。 还支持使用 HTML 字符名称。</p><h2 id="子图">子图</h2><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">flowchart TB    c1--&gt;a2    subgraph one    a1--&gt;a2    end    subgraph two    b1--&gt;b2    end    subgraph three    c1--&gt;c2    end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">flowchart TB    c1-->a2    subgraph one    a1-->a2    end    subgraph two    b1-->b2    end    subgraph three    c1-->c2    end</pre><p>你还可以为子图设置显式 id。</p><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">flowchart TB    c1--&gt;a2    subgraph ide1 [one]    a1--&gt;a2    end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">flowchart TB    c1-->a2    subgraph ide1 [one]    a1-->a2    end</pre><h3 id="流程图">流程图</h3><p>使用图形类型流程图，还可以设置子图的边和子图的边，如下流程图所示。</p><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">flowchart TB    c1--&gt;a2    subgraph one    a1--&gt;a2    end    subgraph two    b1--&gt;b2    end    subgraph three    c1--&gt;c2    end    one --&gt; two    three --&gt; two    two --&gt; c2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">flowchart TB    c1-->a2    subgraph one    a1-->a2    end    subgraph two    b1-->b2    end    subgraph three    c1-->c2    end    one --> two    three --> two    two --> c2</pre><h3 id="子图中的方向">子图中的方向</h3><p>使用 graphtype 流程图，你可以使用方向语句来设置子图渲染的方向，如本例所示。</p><pre class="line-numbers language-null" data-language="null"><code class="language-null">flowchart LR  subgraph TOP    direction TB    subgraph B1        direction RL        i1 --&gt;f1    end    subgraph B2        direction BT        i2 --&gt;f2    end  end  A --&gt; TOP --&gt; B  B1 --&gt; B2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">flowchart LR  subgraph TOP    direction TB    subgraph B1        direction RL        i1 -->f1    end    subgraph B2        direction BT        i2 -->f2    end  end  A --> TOP --> B  B1 --> B2</pre><h4 id="局限性">局限性</h4><p>如果任何子图的节点链接到外部，则子图方向将被忽略。 相反，子图将继承父图的方向：</p><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">flowchart LR    subgraph subgraph1        direction TB        top1[top] --&gt; bottom1[bottom]    end    subgraph subgraph2        direction TB        top2[top] --&gt; bottom2[bottom]    end    %% ^ These subgraphs are identical, except for the links to them:    %% Link *to* subgraph1: subgraph1 direction is maintained    outside --&gt; subgraph1    %% Link *within* subgraph2:    %% subgraph2 inherits the direction of the top-level graph (LR)    outside ---&gt; top2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">flowchart LR    subgraph subgraph1        direction TB        top1[top] --> bottom1[bottom]    end    subgraph subgraph2        direction TB        top2[top] --> bottom2[bottom]    end    %% ^ These subgraphs are identical, except for the links to them:    %% Link *to* subgraph1: subgraph1 direction is maintained    outside --> subgraph1    %% Link *within* subgraph2:    %% subgraph2 inherits the direction of the top-level graph (LR)    outside ---> top2</pre><h2 id="Markdown-字符串">Markdown 字符串</h2><p>“Markdown 字符串” 功能通过提供更通用的字符串类型来增强流程图和思维导图，该字符串类型支持粗体和斜体等文本格式选项，并自动将文本换行在标签内。</p><pre class="line-numbers language-null" data-language="null"><code class="language-null">%%&#123;init: &#123;&quot;flowchart&quot;: &#123;&quot;htmlLabels&quot;: false&#125;&#125; &#125;%%flowchart LRsubgraph &quot;One&quot;  a(&quot;&#96;The **cat**  in the hat&#96;&quot;) -- &quot;edge label&quot; --&gt; b&gt;&quot;&#96;The **dog** in the hog&#96;&quot;]endsubgraph &quot;&#96;**Two**&#96;&quot;  c(&quot;&#96;The **cat**  in the hat&#96;&quot;) -- &quot;&#96;Bold **edge label**&#96;&quot; --&gt; d(&quot;The dog in the hog&quot;)end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">%%{init: {"flowchart": {"htmlLabels": false}} }%%flowchart LRsubgraph "One"  a("`The **cat**  in the hat`") -- "edge label" --> b>"`The **dog** in the hog`"]endsubgraph "`**Two**`"  c("`The **cat**  in the hat`") -- "`Bold **edge label**`" --> d("The dog in the hog")end</pre><p>格式设置：</p><ul><li>对于粗体文本，请在文本前后使用双星号 (<code>**</code>)。</li><li>对于斜体，请在文本前后使用单个星号 (<code>*</code>)。</li><li>对于传统字符串，你需要添加 <code>&lt;br&gt;</code> 标签以使文本换行在节点中。 但是，当文本变得太长时，Markdown 字符串会自动换行，并允许你只需使用换行符而不是 <code>&lt;br&gt;</code> 标记来开始新行。</li></ul><p>此功能适用于节点标签、边标签和子图标签。</p><h2 id="相互作用">相互作用</h2><p>可以将单击事件绑定到节点，单击可以导致 JavaScript 回调(demo略)或将在新浏览器选项卡中打开的链接。</p><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">flowchart LR    A--&gt;B    B--&gt;C    C--&gt;D    D--&gt;E    click A &quot;https:&#x2F;&#x2F;www.github.com&quot; _blank    click B &quot;https:&#x2F;&#x2F;www.github.com&quot; &quot;Open this in a new tab&quot; _blank    click C href &quot;https:&#x2F;&#x2F;www.github.com&quot; _blank    click D href &quot;https:&#x2F;&#x2F;www.github.com&quot; &quot;Open this in a new tab&quot; _blank<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">flowchart LR    A-->B    B-->C    C-->D    D-->E    click A "https://www.github.com" _blank    click B "https://www.github.com" "Open this in a new tab" _blank    click C href "https://www.github.com" _blank    click D href "https://www.github.com" "Open this in a new tab" _blank</pre><h3 id="注释">注释</h3><p>可以在流程图中输入注释，解析器将忽略这些注释。 注释需要独占一行，并且必须以 <code>%%</code>（双百分号）开头。 注释开始后到下一个换行符的任何文本都将被视为注释，包括任何流语法</p><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">flowchart LR%% this is a comment A -- text --&gt; B&#123;node&#125;   A -- text --&gt; B -- text2 --&gt; C<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="mermaid">flowchart LR%% this is a comment A -- text --> B{node}   A -- text --> B -- text2 --> C</pre><h2 id="样式和类别">样式和类别</h2><h3 id="设置链接样式">设置链接样式</h3><p>可以设置链接样式。 例如，你可能想要设计一个在流程中向后移动的链接。 由于链接没有像节点一样的 id，因此需要其他一些方法来决定链接应附加到什么样式。 使用图表中定义链接时的顺序号来代替 ids，或者使用默认值应用于所有链接。 在下面的示例中，linkStyle 语句中定义的样式将属于图中的第四个链接：</p><pre class="line-numbers language-none"><code class="language-none">linkStyle 3 stroke:#ff3,stroke-width:4px,color:red;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还可以通过用逗号分隔链接编号，在单个语句中向多个链接添加样式：</p><pre class="line-numbers language-none"><code class="language-none">linkStyle 1,2,7 color:blue;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="样式线条曲线">样式线条曲线</h3><p>如果默认方法不能满足你的需求，可以设置用于项目之间线条的曲线类型的样式。 可用的曲线样式包括 <code>basis</code>、<code>bumpX</code>、<code>bumpY</code>、<code>cardinal</code>、<code>catmullRom</code>、<code>linear</code>、<code>monotoneX</code>、<code>monotoneY</code>、<code>natural</code>、<code>step</code>、<code>stepAfter</code> 和 <code>stepBefore</code>。</p><p>在此示例中，从左到右的图表使用 <code>stepBefore</code> 曲线样式：</p><pre class="line-numbers language-none"><code class="language-none">%%&#123; init: &#123; &#39;flowchart&#39;: &#123; &#39;curve&#39;: &#39;stepBefore&#39; &#125; &#125; &#125;%%graph LR<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>有关可用曲线的完整列表，包括自定义曲线的说明，请参阅 <a href="https://github.com/d3/d3-shape/">d3-shape</a> 项目中的 <a href="https://github.com/d3/d3-shape/blob/main/README.md#curves">形状</a> 文档。</p><h3 id="设置节点样式">设置节点样式</h3><p>可以对节点应用特定样式，例如较粗的边框或不同的背景颜色。</p><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">flowchart LR    id1(Start)--&gt;id2(Stop)    style id1 fill:#f9f,stroke:#333,stroke-width:4px    style id2 fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">flowchart LR    id1(Start)-->id2(Stop)    style id1 fill:#f9f,stroke:#333,stroke-width:4px    style id2 fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5</pre><h4 id="类">类</h4><p>比每次定义样式更方便的是定义一类样式并将该类附加到应该具有不同外观的节点。</p><p>类定义如下例所示：</p><pre class="line-numbers language-none"><code class="language-none">classDef className fill:#f9f,stroke:#333,stroke-width:4px;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此外，还可以在一条语句中为多个类定义样式：</p><pre class="line-numbers language-none"><code class="language-none">classDef firstClassName,secondClassName font-size:12pt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将类附加到节点的操作如下：</p><pre class="line-numbers language-none"><code class="language-none">class nodeId1 className;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还可以在一条语句中将一个类附加到节点列表：</p><pre class="line-numbers language-none"><code class="language-none">class nodeId1,nodeId2 className;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加类的一种较短形式是使用 <code>:::</code> 运算符将类名附加到节点，如下所示：</p><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">flowchart LR    A:::someclass --&gt; B    classDef someclass fill:#f96<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="mermaid">flowchart LR    A:::someclass --> B    classDef someclass fill:#f96</pre><p>当声明节点之间的多个链接时可以使用这种形式：</p><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">flowchart LR    A:::foo &amp; B:::bar --&gt; C:::foobar    classDef foo stroke:#f00    classDef bar stroke:#0f0    classDef foobar stroke:#00f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">flowchart LR    A:::foo & B:::bar --> C:::foobar    classDef foo stroke:#f00    classDef bar stroke:#0f0    classDef foobar stroke:#00f</pre><h2 id="对-fontawesome-的基本支持">对 fontawesome 的基本支持</h2><p>可以添加来自 fontawesome 的图标。</p><p>通过语法 fa 访问图标：#图标类名#.</p><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">flowchart TD    B[&quot;fa:fa-twitter for peace&quot;]    B--&gt;C[fa:fa-ban forbidden]    B--&gt;D(fa:fa-spinner)    B--&gt;E(A fa:fa-camera-retro perhaps?)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">flowchart TD    B["fa:fa-twitter for peace"]    B-->C[fa:fa-ban forbidden]    B-->D(fa:fa-spinner)    B-->E(A fa:fa-camera-retro perhaps?)</pre><p>Mermaid 与 Font Awesome 版本 5 兼容，仅限免费图标。 检查你使用的图标是否来自 <a href="https://fontawesome.com/v5/search?o=r&amp;m=free">支持的图标集</a>。</p>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mermaid </tag>
            
            <tag> Markdown </tag>
            
            <tag> Flowchart </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nvm管理node.js</title>
      <link href="/2024/01/20/nvm-note/"/>
      <url>/2024/01/20/nvm-note/</url>
      
        <content type="html"><![CDATA[<h1>nvm 管理 node.js</h1><h2 id="Quick-Start">Quick Start</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">##1. 安装nvm(最好避免c盘, nvm和nodejs不要在一个文件夹)</span>nvm node_mirror http://npm.taobao.org/mirrors/node/nvm npm_mirror https://npm.taobao.org/mirrors/npm/nvm list availablenvm <span class="token function">install</span> <span class="token number">20.11</span>.0nvm use <span class="token number">20.11</span>.0nvm list<span class="token comment">##2. 配置nodejs环境变量</span><span class="token function">node</span> <span class="token parameter variable">-v</span><span class="token function">npm</span> get registry  <span class="token punctuation">(</span>检查是不是淘宝<span class="token punctuation">)</span><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org/<span class="token comment">##3. 找个文件夹做前端服务器(类似tomcat)</span><span class="token function">npm</span> <span class="token function">install</span> express <span class="token parameter variable">-D</span>或者 <span class="token function">npm</span> <span class="token function">install</span> express --save-dev<span class="token comment">##4. 更改package.json配置</span><span class="token punctuation">&#123;</span>  <span class="token string">"type"</span><span class="token builtin class-name">:</span> <span class="token string">"module"</span>,  //导包配置  <span class="token string">"devDependencies"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"express"</span><span class="token builtin class-name">:</span> <span class="token string">"^4.18.1"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">##4. 启动类书写 main.js</span><span class="token function">import</span> express from <span class="token string">'express'</span>  const app <span class="token operator">=</span> express<span class="token punctuation">(</span><span class="token punctuation">)</span>  //express服务器  app.use<span class="token punctuation">(</span>express.static<span class="token punctuation">(</span><span class="token string">'public/'</span><span class="token punctuation">))</span>  //静态资源目录  app.listen<span class="token punctuation">(</span><span class="token number">7070</span><span class="token punctuation">)</span>  //监听7070端口<span class="token comment">##5.启动服务</span><span class="token function">node</span> main.js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装-nvm">安装 nvm</h2><p>nvm 即 (node version manager)，好处是方便切换 node.js 版本</p><p>安装注意事项</p><ol><li>要卸载掉现有的 nodejs</li><li>提示选择 nvm 和 nodejs 目录时，一定要避免目录中出现空格</li><li>选用【以管理员身份运行】cmd 程序来执行 nvm 命令</li><li>首次运行前设置好国内镜像地址</li></ol><pre class="line-numbers language-none"><code class="language-none">nvm node_mirror http:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;node&#x2F;nvm npm_mirror https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;npm&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>首先查看有哪些可用版本</p><pre class="line-numbers language-none"><code class="language-none">nvm list available<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出</p><pre class="line-numbers language-none"><code class="language-none">|   CURRENT    |     LTS      |  OLD STABLE  | OLD UNSTABLE ||--------------|--------------|--------------|--------------||    18.7.0    |   16.16.0    |   0.12.18    |   0.11.16    ||    18.6.0    |   16.15.1    |   0.12.17    |   0.11.15    ||    18.5.0    |   16.15.0    |   0.12.16    |   0.11.14    ||    18.4.0    |   16.14.2    |   0.12.15    |   0.11.13    ||    18.3.0    |   16.14.1    |   0.12.14    |   0.11.12    ||    18.2.0    |   16.14.0    |   0.12.13    |   0.11.11    ||    18.1.0    |   16.13.2    |   0.12.12    |   0.11.10    ||    18.0.0    |   16.13.1    |   0.12.11    |    0.11.9    ||    17.9.1    |   16.13.0    |   0.12.10    |    0.11.8    ||    17.9.0    |   14.20.0    |    0.12.9    |    0.11.7    ||    17.8.0    |   14.19.3    |    0.12.8    |    0.11.6    ||    17.7.2    |   14.19.2    |    0.12.7    |    0.11.5    ||    17.7.1    |   14.19.1    |    0.12.6    |    0.11.4    ||    17.7.0    |   14.19.0    |    0.12.5    |    0.11.3    ||    17.6.0    |   14.18.3    |    0.12.4    |    0.11.2    ||    17.5.0    |   14.18.2    |    0.12.3    |    0.11.1    ||    17.4.0    |   14.18.1    |    0.12.2    |    0.11.0    ||    17.3.1    |   14.18.0    |    0.12.1    |    0.9.12    ||    17.3.0    |   14.17.6    |    0.12.0    |    0.9.11    ||    17.2.0    |   14.17.5    |   0.10.48    |    0.9.10    |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>建议安装 LTS（长期支持版）</p><pre class="line-numbers language-none"><code class="language-none">nvm install 16.16.0nvm install 14.20.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>执行 <code>nvm list</code> 会列出已安装版本</p><p>切换到 16.16.0</p><pre class="line-numbers language-none"><code class="language-none">nvm use 16.16.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>切换到 14.20.0</p><pre class="line-numbers language-none"><code class="language-none">nvm use 14.20.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装后 nvm 自己的环境变量会自动添加，但可能需要手工添加 nodejs 的 PATH 环境变量</p><h2 id="检查-npm">检查 npm</h2><p>npm 是 js 的包管理器，就类似于 java 界的 maven，要确保它使用的是国内镜像</p><p>检查镜像</p><pre class="line-numbers language-none"><code class="language-none">npm get registry<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果返回的不是 <code>https://registry.npm.taobao.org/</code>，需要做如下设置</p><pre class="line-numbers language-none"><code class="language-none">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="npm-常用命令">npm 常用命令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token parameter variable">-v</span> <span class="token comment">#查看 npm 的版本</span><span class="token function">npm</span> <span class="token parameter variable">-l</span> <span class="token comment">#查看各个命令的简单用法</span><span class="token function">npm</span> <span class="token builtin class-name">help</span> <span class="token comment">#查看 npm 命令列表</span><span class="token function">npm</span> config list <span class="token parameter variable">-l</span> <span class="token comment">#查看 npm 的配置</span><span class="token function">npm</span> <span class="token function">install</span> <span class="token comment">#安装项目的全部依赖包</span><span class="token function">npm</span> <span class="token function">install</span> <span class="token operator">&lt;</span>package_name<span class="token operator">></span> <span class="token comment">#安装指定的依赖包</span><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--save</span> <span class="token operator">&lt;</span>package_name<span class="token operator">></span> <span class="token comment">#安装指定的依赖包，并将其添加到项目的 dependencies 节点中。</span><span class="token function">npm</span> <span class="token function">install</span> --save-dev <span class="token operator">&lt;</span>package_name<span class="token operator">></span> <span class="token comment">#安装指定的依赖包，并将其添加到项目的 devDependencies 节点中。</span><span class="token function">npm</span> uninstall <span class="token operator">&lt;</span>package_name<span class="token operator">></span> <span class="token comment">#卸载指定的依赖包。</span><span class="token function">npm</span> update <span class="token comment">#更新项目的全部依赖包。</span><span class="token function">npm</span> outdated <span class="token comment">#检查项目的依赖包是否有更新版本。</span><span class="token function">npm</span> init <span class="token comment">#初始化项目，生成package.json文件。</span><span class="token function">npm</span> publish <span class="token comment">#发布自己的包。</span><span class="token function">npm</span> search <span class="token operator">&lt;</span>package_name<span class="token operator">></span> <span class="token comment">#搜索指定的依赖包。</span><span class="token function">npm</span> info <span class="token operator">&lt;</span>package_name<span class="token operator">></span> <span class="token comment">#查看指定依赖包的详细信息。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="npm-search-搜索模块">npm search 搜索模块</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> search <span class="token operator">&lt;</span>搜索词<span class="token operator">></span> <span class="token punctuation">[</span>-g<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>npm search</code> 命令用于搜索 npm 仓库，它后面可以跟字符串，也可以跟正则表达式。</p><h3 id="npm-list-查看模块">npm list 查看模块</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#当前项目安装的所有模块</span><span class="token function">npm</span> list<span class="token comment">#列出全局安装的模块 带上[--depth 0] 不深入到包的支点 更简洁</span><span class="token function">npm</span> list <span class="token parameter variable">-g</span> <span class="token parameter variable">--depth</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="npm-install-安装模块">npm install 安装模块</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#读取package.json里面的配置单安装  </span><span class="token function">npm</span> <span class="token function">install</span> <span class="token comment">#可简写成 npm i</span><span class="token comment">#默认安装指定模块的最新(@latest)版本</span><span class="token function">npm</span> <span class="token function">install</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>@scope<span class="token operator">></span>/<span class="token punctuation">]</span><span class="token operator">&lt;</span>name<span class="token operator">></span>  <span class="token comment">#eg:npm install gulp</span><span class="token comment">#安装指定模块的指定版本</span><span class="token function">npm</span> <span class="token function">install</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>@scope<span class="token operator">></span>/<span class="token punctuation">]</span><span class="token operator">&lt;</span>name<span class="token operator">></span>@<span class="token operator">&lt;</span>version<span class="token operator">></span> <span class="token comment">#eg: npm install gulp@3.9.1</span><span class="token comment">#安装指定指定版本范围内的模块</span><span class="token function">npm</span> <span class="token function">install</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>@scope<span class="token operator">></span>/<span class="token punctuation">]</span><span class="token operator">&lt;</span>name<span class="token operator">></span>@<span class="token operator">&lt;</span>version range<span class="token operator">></span> <span class="token comment">#eg: npm install vue@">=1.0.28 &lt; 2.0.0"</span><span class="token comment">#安装指定模块的指定标签 默认值为(@latest)</span><span class="token function">npm</span> <span class="token function">install</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>@scope<span class="token operator">></span>/<span class="token punctuation">]</span><span class="token operator">&lt;</span>name<span class="token operator">></span>@<span class="token operator">&lt;</span>tag<span class="token operator">></span> <span class="token comment">#eg:npm install sax@0.1.1</span><span class="token comment"># 通过Github代码库地址安装</span><span class="token function">npm</span> <span class="token function">install</span> <span class="token operator">&lt;</span>tarball url<span class="token operator">></span> <span class="token comment">#eg:npm install git://github.com/package/path.git</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="npm-uninstall-卸载模块">npm uninstall 卸载模块</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#卸载当前项目或全局模块 </span><span class="token function">npm</span> uninstall <span class="token operator">&lt;</span>name<span class="token operator">></span> <span class="token punctuation">[</span>-g<span class="token punctuation">]</span> <span class="token comment">#eg: npm uninstall gulp --save-dev  </span><span class="token comment">#    npm i gulp -g</span><span class="token comment">#卸载后，你可以到 /node\_modules/ 目录下查看包是否还存在，或者使用以下命令查看：</span><span class="token function">npm</span> <span class="token function">ls</span> <span class="token comment">#查看安装的模块</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="npm-update-更新模块">npm update 更新模块</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> update <span class="token comment">#检查并更新项目的全部依赖包</span><span class="token comment">#升级当前项目或全局的指定模块</span><span class="token function">npm</span> update <span class="token operator">&lt;</span>name<span class="token operator">></span> <span class="token punctuation">[</span>-g<span class="token punctuation">]</span> <span class="token comment">#eg: npm update express </span><span class="token comment">#    npm update express -g</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nvm </tag>
            
            <tag> npm </tag>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mermaid-类图</title>
      <link href="/2024/01/19/mermaid-uml/"/>
      <url>/2024/01/19/mermaid-uml/</url>
      
        <content type="html"><![CDATA[<h1>Mermaid-类图</h1><blockquote><p>摘录自 <a href="https://mermaid.nodejs.cn/syntax/classDiagram.html">类图 | Mermaid 中文网 (nodejs.cn)</a></p></blockquote><p>类图是面向对象建模的主要构建块。 它用于应用结构的一般概念建模，以及将模型转换为编程代码的详细建模。 类图也可用于数据建模。 类图中的类表示主要元素、应用中的交互以及要编程的类。</p><p><strong>Code</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">---title: Animal example---classDiagram    note &quot;From Duck till Zebra&quot;    Animal &lt;|-- Duck    note for Duck &quot;can fly\ncan swim\ncan dive\ncan help in debugging&quot;    Animal &lt;|-- Fish    Animal &lt;|-- Zebra    Animal : +int age    Animal : +String gender    Animal: +isMammal()    Animal: +mate()    class Duck&#123;        +String beakColor        +swim()        +quack()    &#125;    class Fish&#123;        -int sizeInFeet        -canEat()    &#125;    class Zebra&#123;        +bool is_wild        +run()    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">---title: Animal example---classDiagram    note "From Duck till Zebra"    Animal <|-- Duck    note for Duck "can fly\ncan swim\ncan dive\ncan help in debugging"    Animal <|-- Fish    Animal <|-- Zebra    Animal : +int age    Animal : +String gender    Animal: +isMammal()    Animal: +mate()    class Duck{        +String beakColor        +swim()        +quack()    }    class Fish{        -int sizeInFeet        -canEat()    }    class Zebra{        +bool is_wild        +run()    }</pre><h2 id="语法">语法</h2><h3 id="类">类</h3><p>UML 提供了表示类成员（例如属性和方法）以及有关它们的附加信息的机制。图中类的单个实例包含三个部分：</p><ul><li>顶部隔间包含类的名称。 它以粗体居中打印，第一个字母大写。 它还可能包含描述类性质的可选注释文本。</li><li>中间的部分包含类的属性。 它们左对齐且第一个字母小写。</li><li>底部隔间包含该类可以执行的操作。 它们也是左对齐的，并且第一个字母是小写的。</li></ul><p><strong>Code</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">---title: Bank example---classDiagramclass BankAccountBankAccount : +String ownerBankAccount : +Bigdecimal balanceBankAccount : +deposit(amount)BankAccount : +withdrawal(amount)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">---title: Bank example---classDiagramclass BankAccountBankAccount : +String ownerBankAccount : +Bigdecimal balanceBankAccount : +deposit(amount)BankAccount : +withdrawal(amount)</pre><h2 id="定义一个类类">定义一个类类</h2><p><strong>定义类有两种方法:</strong></p><ul><li>显示使用关键字 class (如 <code>class Animal</code>) 来定义 Animal 类。</li><li>通过 relatinoship 一次定义两个类及其关系。例如, <code>Vehicle &lt;|-- Car</code>。</li></ul><p><strong>Code</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">classDiagramclass AnimalVehicle &lt;|-- Car<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="mermaid">classDiagramclass AnimalVehicle <|-- Car</pre><p>命名约定： 类名只能由字母数字字符（包括 unicode）、下划线和短划线 (-) 组成。</p><h3 id="类别标签">类别标签</h3><p>如果你需要为类提供标签，可以使用以下语法：</p><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">classDiagram    class Animal[&quot;Animal with a label&quot;]    class Car[&quot;Car with *! symbols&quot;]    Animal --&gt; Car<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">classDiagram    class Animal["Animal with a label"]    class Car["Car with *! symbols"]    Animal --> Car</pre><p>你还可以使用反引号来转义标签中的特殊字符：</p><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">classDiagram    class &#96;Animal Class!&#96;    class &#96;Car Class&#96;    &#96;Animal Class!&#96; --&gt; &#96;Car Class&#96;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">classDiagram    class `Animal Class!`    class `Car Class`    `Animal Class!` --> `Car Class`</pre><h2 id="定义类的成员">定义类的成员</h2><p>UML 提供了表示类成员（例如属性和方法）的机制，以及有关它们的附加信息。</p><p>Mermaid 根据 parenthesis<code>()</code> 是否存在来区分属性和函数/方法。带有 <code>()</code> 的被视为函数/方法，所有其他被视为属性。</p><p>有两种方法可以定义类的成员，无论使用那种语法来定义成员，输出仍然是相同的。两种不同的方式是：</p><ul><li>使用 <strong>:</strong>（冒号）后跟成员名称来关联类的成员，这对于一次定义一个成员很有用。 例如：</li></ul><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">classDiagram    class BankAccount    BankAccount : +String owner    BankAccount : +BigDecimal balance    BankAccount : +deposit(amount)    BankAccount : +withdrawal(amount)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">classDiagram    class BankAccount    BankAccount : +String owner    BankAccount : +BigDecimal balance    BankAccount : +deposit(amount)    BankAccount : +withdrawal(amount)</pre><ul><li>使用 <strong>{}</strong> 括号关联类的成员，其中成员分组在大括号内。 适合一次定义多个成员。 例如：</li></ul><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">classDiagramclass BankAccount&#123;    +String owner    +BigDecimal balance    +deposit(amount)    +withdrawal(amount)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">classDiagramclass BankAccount{    +String owner    +BigDecimal balance    +deposit(amount)    +withdrawal(amount)}</pre><h3 id="返回类型">返回类型</h3><p>或者，你可以使用将返回的数据类型来结束方法/函数定义（注意：最终的 <code>)</code> 和返回类型之间必须有空格）。 一个例子：</p><pre class="line-numbers language-null" data-language="null"><code class="language-null">classDiagramclass BankAccount&#123;    +String owner    +BigDecimal balance    +deposit(amount) bool    +withdrawal(amount) int&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">classDiagramclass BankAccount{    +String owner    +BigDecimal balance    +deposit(amount) bool    +withdrawal(amount) int}</pre><h3 id="通用类型">通用类型</h3><p>泛型可以表示为类定义的一部分以及类成员/返回类型。 为了将该项目表示为通用项，请将该类型括在 <code>~</code> (<strong>tilde</strong>) 内。 支持 <strong>嵌套</strong> 类型声明（例如 <code>List&lt;List&lt;int&gt;&gt;</code>），但当前不支持包含逗号的泛型。 （如 <code>List&lt;List&lt;K, V&gt;&gt;</code>）</p><blockquote><p>请注意，当在类定义中使用泛型时，泛型类型不被视为类名称的一部分。 IE。： 对于任何需要引用类名的语法，你需要删除定义的类型部分。 这也意味着 mermaid 目前不支持两个具有相同名称但泛型类型不同的类。</p></blockquote><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">classDiagramclass Square~Shape~&#123;    int id    List~int~ position    setPoints(List~int~ points)    getPoints() List~int~&#125;Square : -List~string~ messagesSquare : +setMessages(List~string~ messages)Square : +getMessages() List~string~Square : +getDistanceMatrix() List~List~int~~<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">classDiagramclass Square~Shape~{    int id    List~int~ position    setPoints(List~int~ points)    getPoints() List~int~}Square : -List~string~ messagesSquare : +setMessages(List~string~ messages)Square : +getMessages() List~string~Square : +getDistanceMatrix() List~List~int~~</pre><h4 id="能见度">能见度</h4><p>为了描述属于类（即类成员）的属性或方法/函数的可见性（或封装），可以在该成员名称之前放置可选的符号：</p><ul><li><code>+</code> 民众</li><li><code>-</code> 私有的</li><li><code>#</code> 受保护</li><li><code>~</code> 封装/内部</li></ul><blockquote><p>请注意，你还可以通过在方法末尾添加以下符号来在方法定义中包含其他分类器，即： 在 <code>()</code> 或返回类型之后：</p><ul><li><code>*</code> 摘要例如： <code>someAbstractMethod()*</code> 或 <code>someAbstractMethod() int*</code></li><li><code>$</code> 静态例如： <code>someStaticMethod() 或 </code>someStaticMethod() String</li></ul></blockquote><blockquote><p>请注意，你还可以通过在末尾添加以下符号来在字段定义中包含其他分类器：</p><ul><li><code>$</code> 静态例如： `String someField</li></ul></blockquote><h2 id="定义关系">定义关系</h2><p>关系是一个通用术语，涵盖类图和对象图上发现的特定类型的逻辑连接。</p><pre class="line-numbers language-none"><code class="language-none">[classA][Arrow][ClassB]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>目前支持的 UML 下为类定义了八种不同类型的关系：</p><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;|--</code></td><td>继承</td></tr><tr><td><code>*--</code></td><td>作品</td></tr><tr><td><code>o--</code></td><td>聚合</td></tr><tr><td><code>--&gt;</code></td><td>关联</td></tr><tr><td><code>--</code></td><td>链接（实心）</td></tr><tr><td><code>..&gt;</code></td><td>依赖</td></tr><tr><td><code>..|&gt;</code></td><td>实现</td></tr><tr><td><code>..</code></td><td>链接（虚线）</td></tr></tbody></table><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">classDiagramclassA &lt;|-- classBclassC *-- classDclassE o-- classFclassG &lt;-- classHclassI -- classJclassK &lt;.. classLclassM &lt;|.. classNclassO .. classP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">classDiagramclassA <|-- classBclassC *-- classDclassE o-- classFclassG <-- classHclassI -- classJclassK <.. classLclassM <|.. classNclassO .. classP</pre><p>我们可以使用标签来描述两个类之间关系的性质。 此外，箭头也可以用于相反的方向：</p><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">classDiagramclassA --|&gt; classB : InheritanceclassC --* classD : CompositionclassE --o classF : AggregationclassG --&gt; classH : AssociationclassI -- classJ : Link(Solid)classK ..&gt; classL : DependencyclassM ..|&gt; classN : RealizationclassO .. classP : Link(Dashed)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">classDiagramclassA --|> classB : InheritanceclassC --* classD : CompositionclassE --o classF : AggregationclassG --> classH : AssociationclassI -- classJ : Link(Solid)classK ..> classL : DependencyclassM ..|> classN : RealizationclassO .. classP : Link(Dashed)</pre><h3 id="关系标签">关系标签</h3><p>可以将标签文本添加到关系中：</p><pre class="line-numbers language-none"><code class="language-none">[classA][Arrow][ClassB]:LabelText<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">classDiagramclassA &lt;|-- classB : implementsclassC *-- classD : compositionclassE o-- classF : aggregation<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">classDiagramclassA <|-- classB : implementsclassC *-- classD : compositionclassE o-- classF : aggregation</pre><h3 id="双向关系">双向关系</h3><p>关系在逻辑上可以表示一个 N：M 关联：</p><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">classDiagram    Animal &lt;|--|&gt; Zebra<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="mermaid">classDiagram    Animal <|--|> Zebra</pre><p>语法如下：</p><pre class="line-numbers language-none"><code class="language-none">[Relation Type][Link][Relation Type]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中 <code>Relation Type</code> 可以是以下之一：</p><table><thead><tr><th style="text-align:left">类型</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>&lt;|</code></td><td style="text-align:left">继承</td></tr><tr><td style="text-align:left"><code>\*</code></td><td style="text-align:left">作品</td></tr><tr><td style="text-align:left"><code>o</code></td><td style="text-align:left">聚合</td></tr><tr><td style="text-align:left"><code>&gt;</code></td><td style="text-align:left">关联</td></tr><tr><td style="text-align:left"><code>&lt;</code></td><td style="text-align:left">关联</td></tr><tr><td style="text-align:left"><code>|&gt;</code></td><td style="text-align:left">实现</td></tr></tbody></table><p><code>Link</code> 可以是以下之一：</p><table><thead><tr><th style="text-align:left">类型</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">–</td><td style="text-align:left">实线</td></tr><tr><td style="text-align:left">…</td><td style="text-align:left">虚线</td></tr></tbody></table><h2 id="定义命名空间">定义命名空间</h2><p>命名空间对类进行分组。</p><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">classDiagramnamespace BaseShapes &#123;    class Triangle    class Rectangle &#123;      double width      double height    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">classDiagramnamespace BaseShapes {    class Triangle    class Rectangle {      double width      double height    }}</pre><h2 id="关系的基数-多重性">关系的基数/多重性</h2><p>类图中的多重性或基数指示可以链接到另一类的实例的一个类的实例数。 例如，每个公司都会有一名或多名员工（不是零），并且每个员工当前为零个或一个公司工作。</p><p>多重符号放置在关联的末尾附近。</p><p>不同的基数选项是：</p><ul><li><code>1</code> 只有 1 个</li><li><code>0..1</code> 零或一</li><li><code>1..*</code> 一个或多个</li><li><code>*</code> 许多</li><li><code>n</code> 和</li><li><code>0..n</code> 零到 n</li><li><code>1..n</code> 一对多</li></ul><p>通过将文本选项放在给定箭头之前或之后的引号 <code>&quot;</code> 内，可以轻松定义基数。 例如：</p><pre class="line-numbers language-none"><code class="language-none">[classA] &quot;cardinality1&quot; [Arrow] &quot;cardinality2&quot; [ClassB]:LabelText<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-null" data-language="null"><code class="language-null">classDiagram    Customer &quot;1&quot; --&gt; &quot;*&quot; Ticket    Student &quot;1&quot; --&gt; &quot;1..*&quot; Course    Galaxy --&gt; &quot;many&quot; Star : Contains<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">classDiagram    Customer "1" --> "*" Ticket    Student "1" --> "1..*" Course    Galaxy --> "many" Star : Contains</pre><h2 id="类上的注释">类上的注释</h2><p>可以使用标记来注释类，以提供有关该类的附加元数据。 这可以更清楚地表明其性质。 一些常见的注释包括：</p><ul><li><code>&lt;&lt;Interface&gt;&gt;</code> 表示一个接口类</li><li><code>&lt;&lt;Abstract&gt;&gt;</code> 表示一个抽象类</li><li><code>&lt;&lt;Service&gt;&gt;</code> 代表一个服务类</li><li><code>&lt;&lt;Enumeration&gt;&gt;</code> 表示一个枚举</li></ul><p>注释在开头 <code>&lt;&lt;</code> 和结尾 <code>&gt;&gt;</code> 内定义。 有两种方法可以向类添加注释，两种方法的输出都是相同的：</p><ul><li>在 <strong>单独的线</strong> 中定义了一个类之后：</li></ul><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">classDiagramclass Shape&lt;&lt;interface&gt;&gt; ShapeShape : noOfVerticesShape : draw()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">classDiagramclass Shape<<interface>> ShapeShape : noOfVerticesShape : draw()</pre><ul><li>在 <strong>嵌套结构</strong> 中连同类定义：</li></ul><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">classDiagramclass Shape&#123;    &lt;&lt;interface&gt;&gt;    noOfVertices    draw()&#125;class Color&#123;    &lt;&lt;Enumeration&gt;&gt;    RED    BLUE    GREEN    WHITE    BLACK&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">classDiagramclass Shape{    << interface >>    noOfVertices    draw()}class Color{    << Enumeration >>    RED    BLUE    GREEN    WHITE    BLACK}</pre><blockquote><p>这种方式在类注释  <code>&lt;&lt;xxx&gt;&gt;</code>  会在html中报错, 在 <code>&lt;&lt;&gt;&gt;</code> 与注释中添加空格</p></blockquote><h2 id="注释">注释</h2><p>可以在类图中输入注释，解析器将忽略该注释。 注释需要独占一行，并且必须以 <code>%%</code>（双百分号）开头。 下一个换行符之前的任何文本都将被视为注释，包括任何类图语法。</p><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">classDiagram%% This whole line is a comment classDiagram class Shapeclass Shape&#123;    &lt;&lt;interface&gt;&gt;    noOfVertices    draw()&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">classDiagram%% This whole line is a comment classDiagram class Shape << interface >>class Shape{<< interface >>    noOfVertices    draw()}</pre><h2 id="设置图表的方向">设置图表的方向</h2><p>对于类图，你可以使用方向语句来设置图渲染的方向：</p><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">classDiagram  direction RL  class Student &#123;    -idCard : IdCard  &#125;  class IdCard&#123;    -id : int    -name : string  &#125;  class Bike&#123;    -id : int    -name : string  &#125;  Student &quot;1&quot; --o &quot;1&quot; IdCard : carries  Student &quot;1&quot; --o &quot;1&quot; Bike : rides<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">classDiagram  direction RL  class Student {    -idCard : IdCard  }  class IdCard{    -id : int    -name : string  }  class Bike{    -id : int    -name : string  }  Student "1" --o "1" IdCard : carries  Student "1" --o "1" Bike : rides</pre><h2 id="相互作用">相互作用</h2><p>可以将单击事件绑定到节点。 单击可能会导致 JavaScript 回调或导致在新浏览器选项卡中打开的链接。 <strong>注意</strong>： 使用 <code>securityLevel='strict'</code> 时禁用此功能，使用 <code>securityLevel='loose'</code> 时启用此功能。</p><p>声明所有类后，你可以在单独的行上定义这些操作。</p><pre class="line-numbers language-none"><code class="language-none">action className &quot;reference&quot; &quot;tooltip&quot;click className call callback() &quot;tooltip&quot;click className href &quot;url&quot; &quot;tooltip&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>action 是 <code>link</code> 或 <code>callback</code>，具体取决于你想要调用的交互类型</li><li>className 是与操作关联的节点的 id</li><li>Reference 可以是 url 链接，也可以是回调的函数名称。</li><li>（可选）tooltip 是当鼠标悬停在元素上时要显示的字符串（注意：tooltip 的样式由类.mermaidTooltip 设置。）</li><li>note: 将以 nodeId 作为参数调用回调函数。</li></ul><h2 id="图表注释">图表注释</h2><p>可以使用 <code>note &quot;line1\nline2&quot;</code> 在图表上添加注释。 可以使用 <code>note for &lt;CLASS NAME&gt; &quot;line1\nline2&quot;</code> 为特定类添加注释。</p><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">classDiagram    note &quot;This is a general note&quot;    note for Student &quot;This is a note for a class&quot;    class Student&#123;    +String name    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">classDiagram    note "This is a general note"    note for Student "This is a note for a class"    class Student{    +String name    }</pre><h2 id="网址链接">网址链接</h2><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">classDiagramclass Shapelink Shape &quot;https:&#x2F;&#x2F;www.github.com&quot; &quot;This is a tooltip for a link&quot;class Shape2click Shape2 href &quot;https:&#x2F;&#x2F;www.github.com&quot; &quot;This is a tooltip for a link&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">classDiagramclass Shapelink Shape "https://www.github.com" "This is a tooltip for a link"class Shape2click Shape2 href "https://www.github.com" "This is a tooltip for a link"</pre><h2 id="样式">样式</h2><h3 id="设置节点样式-v-MERMAID-RELEASE-VERSION">设置节点样式 (v&lt;MERMAID_RELEASE_VERSION&gt;+)</h3><p>可以使用 <code>style</code> 关键字将特定样式（例如较粗的边框或不同的背景颜色）应用于单个节点。</p><p><strong>Code:</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">classDiagram  class Animal  class Mineral  style Animal fill:#f9f,stroke:#333,stroke-width:4px  style Mineral fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">classDiagram  class Animal  class Mineral  style Animal fill:#f9f,stroke:#333,stroke-width:4px  style Mineral fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5</pre>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mermaid </tag>
            
            <tag> Markdown </tag>
            
            <tag> UML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-01-概述</title>
      <link href="/2024/01/19/design-pattern/"/>
      <url>/2024/01/19/design-pattern/</url>
      
        <content type="html"><![CDATA[<h1>设计模式概述</h1><h2 id="1-设计模式分类">1-设计模式分类</h2><ul><li><p><strong>创建型模式</strong></p><p>用于描述“怎样创建对象”，它的主要特点是“将对象的创建与使用分离”。GoF（四人组）书中提供了单例、原型、工厂方法、抽象工厂、建造者等 5 种创建型模式。</p></li><li><p><strong>结构型模式</strong></p><p>用于描述如何将类或对象按某种布局组成更大的结构，GoF（四人组）书中提供了代理、适配器、桥接、装饰、外观、享元、组合等 7 种结构型模式。</p></li><li><p><strong>行为型模式</strong></p><p>用于描述类或对象之间怎样相互协作共同完成单个对象无法单独完成的任务，以及怎样分配职责。GoF（四人组）书中提供了模板方法、策略、命令、职责链、状态、观察者、中介者、迭代器、访问者、备忘录、解释器等 11 种行为型模式。</p></li></ul><h2 id="2-UML图">2-UML图</h2><p>统一建模语言（Unified Modeling Language，UML）是用来设计软件的可视化建模语言。它的特点是简单、统一、图形化、能表达软件设计中的动态与静态信息。</p><p>UML 从目标系统的不同角度出发，定义了用例图、类图、对象图、状态图、活动图、时序图、协作图、构件图、部署图等 9 种图。</p><h3 id="2-1-类图概述">2.1 类图概述</h3><p>类图(Class diagram)是显示了模型的静态结构，特别是模型中存在的类、类的内部结构以及它们与其他类的关系等。类图不显示暂时性的信息。类图是面向对象建模的主要组成部分。</p><h3 id="2-2-类图的作用">2.2 类图的作用</h3><ul><li>在软件工程中，类图是一种静态的结构图，描述了系统的类的集合，类的属性和类之间的关系，可以简化了人们对系统的理解；</li><li>类图是系统分析和设计阶段的重要产物，是系统编码和测试的重要模型。</li></ul><h3 id="2-3-类图表示法">2.3 类图表示法</h3><h4 id="类的表示方式">类的表示方式</h4><p>在UML类图中，类使用包含类名、属性(field) 和方法(method) 且带有分割线的矩形来表示，比如下图表示一个 Employee 类，它包含 name,age 和 address 这3个属性，以及 work() 方法。</p><pre class="mermaid">classDiagramclass Employee{- name : String- age : int- address : String+ work() void}</pre><p>属性/方法名称前加的加号和减号表示了这个属性/方法的可见性，UML类图中表示可见性的符号有三种：</p><ul><li><p>+：表示 public</p></li><li><p>-：表示 private</p></li><li><p>#：表示 protected</p></li></ul><p>属性的完整表示方式是： <strong>可见性  名称 ：类型 [ = 缺省值]</strong></p><p>方法的完整表示方式是： <strong>可见性  名称(参数列表) [ ： 返回类型]</strong></p><blockquote><p>注意：</p><ol><li>中括号中的内容表示是可选的</li><li>也有将类型放在变量名前面，返回值类型放在方法名前面</li></ol></blockquote><p><strong>举个例子</strong></p><pre class="mermaid">classDiagramclass Demo{+ method() void- method1() String# method2(int part1, String par2) int}</pre><p>上图Demo类定义了三个方法：</p><ul><li>method() 方法：修饰符为 public，没有参数，没有返回值。</li><li>method1() 方法：修饰符为 private，没有参数，返回值类型为String。</li><li>method2() 方法：修饰符为 protected，接收两个参数，第一个参数类型为 int，第二个参数类型为 String，返回值类型是 int。</li></ul><h4 id="类与类之间关系的表示方式">类与类之间关系的表示方式</h4><h5 id="Ⅰ-关联关系">Ⅰ 关联关系</h5><p>关联关系是对象之间的一种引用关系，用于表示一类对象与另一类对象之间的联系，如老师和学生、师傅和徒弟、丈夫和妻子等。关联关系是类与类之间最常用的一种关系，分为一般关联关系、聚合关系和组合关系。我们先介绍一般关联。</p><p>关联又可以分为单向关联，双向关联，自关联。</p><ol><li>单向关联</li></ol><pre class="mermaid">classDiagramclass Customer{- address: Address}class Address{}Address <-- Customer</pre><p>在UML类图中单向关联用一个带箭头的实线表示。上图表示每个顾客都有一个地址，这通过让 Customer 类持有一个类型为 Address 的成员变量类实现。</p><ol start="2"><li>双向关联</li></ol><pre class="mermaid">classDiagramclass Customer{- products: list~Product~}class Product{- customer: Customer}Customer -- Product</pre><p>从上图中我们很容易看出，所谓的双向关联就是双方各自持有对方类型的成员变量。</p><p>在 UML 类图中，双向关联用一个不带箭头的直线表示。上图中在 Customer 类中维护一个 List&lt;Product&gt;，表示一个顾客可以购买多个商品；在 Product 类中维护一个 Customer 类型的成员变量表示这个产品被哪个顾客所购买。</p><ol start="3"><li>自关联</li></ol><pre class="mermaid">classDiagramclass Node{- subNode: Node}Node --> Node</pre><p>自关联在UML类图中用一个带有箭头且指向自身的线表示。上图的意思就是 Node 类包含类型为 Node 的成员变量，也就是“自己包含自己”。</p><h5 id="Ⅱ-聚合关系">Ⅱ 聚合关系</h5><p>聚合关系是关联关系的一种，是强关联关系，是整体和部分之间的关系。</p><p>聚合关系也是通过成员对象来实现的，其中成员对象是整体对象的一部分，但是成员对象可以脱离整体对象而独立存在。例如，学校与老师的关系，学校包含老师，但如果学校停办了，老师依然存在。</p><p>在 UML 类图中，聚合关系可以用带空心菱形的实线来表示，菱形指向整体。下图所示是大学和教师的关系图：</p><pre class="mermaid">classDiagramclass University {- teas : List~Teacher~}class Teacher {- name : String+ teach() void}University o-- Teacher</pre><h5 id="Ⅲ-组合关系">Ⅲ 组合关系</h5><p>组合表示类之间的整体与部分的关系，但它是一种更强烈的聚合关系。</p><p>在组合关系中，整体对象可以控制部分对象的生命周期，一旦整体对象不存在，部分对象也将不存在，部分对象不能脱离整体对象而存在。例如，头和嘴的关系，没有了头，嘴也就不存在了。</p><p>在 UML 类图中，组合关系用带实心菱形的实线来表示，菱形指向整体。下图所示是头和嘴的关系图：</p><pre class="mermaid">classDiagramclass Head{- mouth : Mouth}class Mouth {+ eat() void}Head *-- Mouth</pre><h5 id="Ⅳ-依赖关系👍">Ⅳ 依赖关系👍</h5><p>依赖关系是一种使用关系，它是对象之间<strong>耦合度最弱</strong>的一种关联方式，是临时性的关联。在代码中，某个类的方法通过局部变量、方法的参数或者对静态方法的调用来访问另一个类（被依赖类）中的某些方法来完成一些职责。</p><p>在 UML 类图中，依赖关系使用带箭头的虚线来表示，箭头从使用类指向被依赖的类。下图所示是司机和汽车的关系图，司机驾驶汽车：</p><pre class="mermaid">classDiagramclass Driver {- name : String+ drive(Car car) void}class Car {+ move() void}Driver ..> Carlink Driver "#drive(Car car)" "method"</pre><h6 id="drive-Car-car">drive(Car car)</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drive</span><span class="token punctuation">(</span><span class="token class-name">Car</span> car<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    car<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//汽车移动</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="Ⅴ-继承关系👍">Ⅴ 继承关系👍</h5><p>继承关系是对象之间<strong>耦合度最大</strong>的一种关系，表示一般与特殊的关系，是父类与子类之间的关系，是一种继承关系。</p><p>在 UML 类图中，泛化关系用带空心三角箭头的实线来表示，箭头从子类指向父类。在代码实现时，使用面向对象的继承机制来实现泛化关系。例如，Student 类和 Teacher 类都是 Person 类的子类，其类图如下图所示：</p><pre class="mermaid">classDiagramclass Person {- name : String- age : int+ speak() void}class Student {- studentNo : String+ study() void}class Teacher {- teacherNo : String+ teach() void}Person <|-- StudentPerson <|-- Teacher</pre><h5 id="Ⅵ-实现关系">Ⅵ 实现关系</h5><p>实现关系是接口与实现类之间的关系。在这种关系中，类实现了接口，类中的操作实现了接口中所声明的所有的抽象操作。</p><p>在 UML 类图中，实现关系使用带空心三角箭头的虚线来表示，箭头从实现类指向接口。例如，汽车和船实现了交通工具，其类图如图所示。</p><pre class="mermaid">classDiagramclass Vehicle {<< Interface >>+ move() void}class Car {+ move() void}class Ship {+ move() void}Vehicle <|.. CarVehicle <|.. Ship</pre><h2 id="3-软件设计原则">3-软件设计原则</h2><p>在软件开发中，为了提高软件系统的可维护性和可复用性，增加软件的可扩展性和灵活性，程序员要尽量根据6条原则来开发程序，从而提高软件开发效率、节约软件开发成本和维护成本。</p><h3 id="3-1-开闭原则">3.1 开闭原则</h3><p><strong>对扩展开放，对修改关闭</strong>。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。</p><p>想要达到这样的效果，我们需要使用接口和抽象类。</p><p>因为抽象灵活性好，适应性广，只要抽象的合理，可以基本保持软件架构的稳定。而软件中易变的细节可以从抽象派生来的实现类来进行扩展，当软件需要发生变化时，只需要根据需求重新派生一个实现类来扩展就可以了。</p><p>下面以 <code>搜狗输入法</code> 的皮肤为例介绍开闭原则的应用。</p><p>【例】<code>搜狗输入法</code> 的皮肤设计。</p><p>分析：<code>搜狗输入法</code> 的皮肤是输入法背景图片、窗口颜色和声音等元素的组合。用户可以根据自己的喜爱更换自己的输入法的皮肤，也可以从网上下载新的皮肤。这些皮肤有共同的特点，可以为其定义一个抽象类（AbstractSkin），而每个具体的皮肤（DefaultSpecificSkin 和 DiySpecificSkin）是其子类。用户窗体可以根据需要选择或者增加新的主题，而不需要修改原代码，所以它是满足开闭原则的。</p><pre class="mermaid">classDiagramclass AbstractSkin {+ display() void}class SouGouInput {+ skin : AbstractSkin+ display() void}class DefaultSpecificSkin {+ display() void}class DiySpecificSkin {+ display() void}SouGouInput o-- AbstractSkinAbstractSkin <|-- DefaultSpecificSkinAbstractSkin <|-- DiySpecificSkin</pre><p><strong>Code:</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//抽象皮肤类</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractSkin</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//显示的方法</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//默认皮肤</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultSkin</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractSkin</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"默认皮肤"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//diy皮肤</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DiySkin</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractSkin</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"diy皮肤"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//搜狗输入法</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SougouInput</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">AbstractSkin</span> skin<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSkin</span><span class="token punctuation">(</span><span class="token class-name">AbstractSkin</span> skin<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>skin <span class="token operator">=</span> skin<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        skin<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1,创建搜狗输入法对象</span>        <span class="token class-name">SougouInput</span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SougouInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2,创建皮肤对象</span>        <span class="token comment">//DefaultSkin skin = new DefaultSkin();</span>        <span class="token class-name">DiySkin</span> skin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiySkin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3,将皮肤设置到输入法中</span>        input<span class="token punctuation">.</span><span class="token function">setSkin</span><span class="token punctuation">(</span>skin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4,显示皮肤</span>        input<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-里氏代换原则">3.2 里氏代换原则</h3><p>里氏代换原则是面向对象设计的基本原则之一。</p><p>里氏代换原则：<strong>任何基类可以出现的地方，子类一定可以出现</strong>。通俗理解：子类可以扩展父类的功能，但不能改变父类原有的功能。换句话说，子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法。</p><p>如果通过重写父类的方法来完成新的功能，这样写起来虽然简单，但是整个继承体系的可复用性会比较差，特别是运用多态比较频繁时，程序运行出错的概率会非常大。</p><p>下面看一个里氏替换原则中经典的一个例子</p><p>【例】正方形不是长方形。</p><p>在数学领域里，正方形毫无疑问是长方形，它是一个长宽相等的长方形。所以，我们开发的一个与几何图形相关的软件系统，就可以顺理成章的让正方形继承自长方形。</p><h4 id="改进前">改进前</h4><pre class="mermaid">classDiagramclass Rectangle {- length : double- width : double+ setLength(double length) void+ getLength() double+ setWidth(double width) void+ getWidth() double}class RectangleDemo {+ resize(Rectangle rectangle) void+ printLengthAndWidth(Rectangle rectangle) void}class Square {+ setWidth(double width) void+ setLength(double length) void}Rectangle <|-- Square: 继承Rectangle <.. RectangleDemo: 依赖</pre><p><strong>Code:</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//长方形类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> length<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> width<span class="token punctuation">;</span><span class="token comment">//省略 get set 方法...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//正方形类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">extends</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLength</span><span class="token punctuation">(</span><span class="token keyword">double</span> length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setLength</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setWidth</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWidth</span><span class="token punctuation">(</span><span class="token keyword">double</span> width<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setLength</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setWidth</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//测试类(注意,由于没有遵循里氏代换原则,该程序会一直进行下去,直至溢出)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RectangleDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建长方形对象</span>        <span class="token class-name">Rectangle</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置长和宽</span>        r<span class="token punctuation">.</span><span class="token function">setLength</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r<span class="token punctuation">.</span><span class="token function">setWidth</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//调用resize方法进行扩宽</span>        <span class="token function">resize</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printLengthAndWidth</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建正方形对象</span>        <span class="token class-name">Square</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Square</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置长和宽</span>        s<span class="token punctuation">.</span><span class="token function">setLength</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//调用resize方法进行扩宽</span>        <span class="token function">resize</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printLengthAndWidth</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//扩宽方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token class-name">Rectangle</span> rectangle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//判断宽如果比长小，进行扩宽的操作</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>rectangle<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> rectangle<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            rectangle<span class="token punctuation">.</span><span class="token function">setWidth</span><span class="token punctuation">(</span>rectangle<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//打印长和宽</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printLengthAndWidth</span><span class="token punctuation">(</span><span class="token class-name">Rectangle</span> rectangle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rectangle<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rectangle<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们运行一下这段代码就会发现，假如我们把一个普通长方形作为参数传入 resize 方法，就会看到长方形宽度逐渐增长的效果，当宽度大于长度,代码就会停止，这种行为的结果符合我们的预期；假如我们再把一个正方形作为参数传入 resize 方法后，就会看到正方形的宽度和长度都在不断增长，代码会一直运行下去，直至系统产生溢出错误。所以，普通的长方形是适合这段代码的，正方形不适合。<br>我们得出结论：在 resize 方法中，Rectangle 类型的参数是不能被 Square 类型的参数所代替，如果进行了替换就得不到预期结果。因此，<strong>Square 类和 Rectangle 类之间的继承关系违反了里氏代换原则，它们之间的继承关系不成立，正方形不是长方形。</strong></p><p>如何改进呢？此时我们需要重新设计他们之间的关系。抽象出来一个四边形接口(Quadrilateral)，让 Rectangle 类和 Square 类实现 Quadrilateral 接口</p><h4 id="改进后">改进后</h4><pre class="mermaid">classDiagramclass Quadrilateral {<<interface>>+ getLength() double+ getWidth() double}class RectangleDemo {+ resize(Rectangle rectangle) void+ printLengthAndWidth(Quadrilateral quadrilateral) void}class Square {- size : double+ getLength() double+ getWidth() double+ setSide(double size) void+ getSide() double}class Rectangle {- length : double- width : double+ setLength(double length) void+ getLength() double+ setWidth(double width) void+ getWidth() double}Quadrilateral <|.. Square : 实现Quadrilateral <|.. Rectangle : 实现RectangleDemo  <.. Quadrilateral : 依赖RectangleDemo <.. Rectangle : 依赖</pre><p><strong>Code:</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//四边形接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Quadrilateral</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//获取长</span>    <span class="token keyword">double</span> <span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取宽</span>    <span class="token keyword">double</span> <span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//正方形类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">implements</span> <span class="token class-name">Quadrilateral</span> <span class="token punctuation">&#123;</span><span class="token comment">//边长</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> side<span class="token punctuation">;</span><span class="token comment">//省略 get set...</span><span class="token comment">//重写接口</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> side<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> side<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//长方形类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token keyword">implements</span> <span class="token class-name">Quadrilateral</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> length<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> width<span class="token punctuation">;</span><span class="token comment">//省略 get set...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//测试类(里氏代换原则)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RectangleDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建长方形对象</span>        <span class="token class-name">Rectangle</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r<span class="token punctuation">.</span><span class="token function">setLength</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r<span class="token punctuation">.</span><span class="token function">setWidth</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//调用方法进行扩宽操作</span>        <span class="token function">resize</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//打印长宽</span>        <span class="token function">printLengthAndWidth</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//扩宽的方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token class-name">Rectangle</span> rectangle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//判断宽如果比长小，进行扩宽的操作</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>rectangle<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> rectangle<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            rectangle<span class="token punctuation">.</span><span class="token function">setWidth</span><span class="token punctuation">(</span>rectangle<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//打印长和宽</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printLengthAndWidth</span><span class="token punctuation">(</span><span class="token class-name">Quadrilateral</span> quadrilateral<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>quadrilateral<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>quadrilateral<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-依赖倒转原则">3.3 依赖倒转原则</h3><p>高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象。简单的说就是要求对抽象进行编程，不要对实现进行编程，这样就降低了客户与实现模块间的耦合。</p><p>下面看一个例子来理解依赖倒转原则</p><p>【例】组装电脑</p><p>现要组装一台电脑，需要配件 cpu，硬盘，内存条。只有这些配置都有了，计算机才能正常的运行。选择 cpu 有很多选择，如 Intel，AMD 等，硬盘可以选择希捷，西数等，内存条可以选择金士顿，海盗船等。</p><h4 id="改进前-2">改进前</h4><pre class="mermaid">classDiagramclass Computer {- hardDisk : XiJieHardDisk- cpu : IntelCpu- memory : KingstonMemory+ setHardDisk(XiJieHardDisk hardDisk) void+ getHardDisk() XiJieHardDisk+ setCpu(IntelCpu cpu) void+ getCpu() IntelCpu+ setMemory(KingstonMemory memory) void+ getMemory() KingstonMemory+ run() void}class XiJieHardDisk {+ save(String data) void+ get() String}class IntelCpu {+ run() void}class KingstonMemory {+ save() void}Computer *-- XiJieHardDisk : 组合Computer *-- IntelCpu : 组合Computer *-- KingstonMemory : 组合</pre><p><strong>Code:</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//希捷硬盘</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XiJieHardDisk</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//存储数据的方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用希捷硬盘存储数据为："</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//获取数据的方法</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用希捷希捷硬盘取数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"数据"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Intel cpu</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IntelCpu</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用Intel处理器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//金士顿内存条类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KingstonMemory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用金士顿内存条"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//计算机</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Computer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">XiJieHardDisk</span> hardDisk<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">IntelCpu</span> cpu<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">KingstonMemory</span> memory<span class="token punctuation">;</span><span class="token comment">//省略 get set...</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"运行计算机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> data <span class="token operator">=</span> hardDisk<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"从硬盘上获取的数据是："</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>        cpu<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        memory<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//依赖倒转原则(反例)-测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComputerDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建组件对象</span>        <span class="token class-name">XiJieHardDisk</span> hardDisk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XiJieHardDisk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">IntelCpu</span> cpu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntelCpu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">KingstonMemory</span> memory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KingstonMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建计算机对象</span>        <span class="token class-name">Computer</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//组装计算机</span>        c<span class="token punctuation">.</span><span class="token function">setCpu</span><span class="token punctuation">(</span>cpu<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">setHardDisk</span><span class="token punctuation">(</span>hardDisk<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">setMemory</span><span class="token punctuation">(</span>memory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//运行计算机</span>        c<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码可以看到已经组装了一台电脑，但是似乎组装的电脑的 cpu 只能是 Intel 的，内存条只能是金士顿的，硬盘只能是希捷的，这对用户肯定是不友好的，用户有了机箱肯定是想按照自己的喜好，选择自己喜欢的配件。</p><p>根据依赖倒转原则进行改进：</p><p>代码我们只需要修改 Computer 类，让 Computer 类依赖抽象（各个配件的接口），而不是依赖于各个组件具体的实现类。</p><h4 id="改进后-2">改进后</h4><pre class="mermaid">classDiagramclass Computer {- hardDisk : HardDisk- cpu : Cpu- memory : Memory+ setHardDisk(HardDisk hardDisk) void+ getHardDisk() HardDisk+ setCpu(Cpu cpu) void+ getCpu() Cpu+ setMemory(Memory memory) void+ getMemory() Memory+ run() void}class HardDisk {<< interface >>+ save(String data) void+ get() String}class Cpu {<< interface >>+ run() void}class Memory {<< interface >>+ save() void}class XiJieHardDisk {+ save(String data) void+ get() String}class IntelCpu {+ run() void}class KingstonMemory {+ save() void}Computer *-- HardDisk : 组合Computer *-- Cpu : 组合Computer *-- Memory : 组合HardDisk <|.. XiJieHardDisk : 实现Cpu <|.. IntelCpu : 实现Memory <|.. KingstonMemory : 实现</pre><p><strong>Code:</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//硬盘接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HardDisk</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//存储数据</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取数据</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//cpu接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Cpu</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//运行cpu</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//内存条接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Memory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//希捷硬盘</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XiJieHardDisk</span> <span class="token keyword">implements</span> <span class="token class-name">HardDisk</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//存储数据的方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用希捷硬盘存储数据为："</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//获取数据的方法</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用希捷希捷硬盘取数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"数据"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Intel cpu</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IntelCpu</span> <span class="token keyword">implements</span> <span class="token class-name">Cpu</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用Intel处理器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//金士顿内存条类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KingstonMemory</span> <span class="token keyword">implements</span> <span class="token class-name">Memory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用金士顿内存条"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//计算机</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Computer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">HardDisk</span> hardDisk<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Cpu</span> cpu<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Memory</span> memory<span class="token punctuation">;</span>    <span class="token comment">// 省略 get set...</span>        <span class="token comment">//运行计算机</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"运行计算机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> data <span class="token operator">=</span> hardDisk<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"从硬盘上获取的数据是："</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>        cpu<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        memory<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//依赖倒转原则(改进后)-测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComputerDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建计算机的组件对象</span>        <span class="token class-name">HardDisk</span> hardDisk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XiJieHardDisk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Cpu</span> cpu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntelCpu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Memory</span> memory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KingstonMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建计算机对象</span>        <span class="token class-name">Computer</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//组装计算机</span>        c<span class="token punctuation">.</span><span class="token function">setCpu</span><span class="token punctuation">(</span>cpu<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">setHardDisk</span><span class="token punctuation">(</span>hardDisk<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">setMemory</span><span class="token punctuation">(</span>memory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//运行计算机</span>        c<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>面向对象的开发很好的解决了这个问题，一般情况下抽象的变化概率很小，让用户程序依赖于抽象，实现的细节也依赖于抽象。即使实现细节不断变动，只要抽象不变，客户程序就不需要变化。这大大降低了客户程序与实现细节的耦合度。</p><h3 id="3-4-接口隔离原则">3.4 接口隔离原则</h3><p>客户端不应该被迫依赖于它不使用的方法；一个类对另一个类的依赖应该建立在最小的接口上。</p><p><img src="./../design-pattern/image-20240121132936719.png" alt=""></p><p>下面看一个例子来理解接口隔离原则</p><p>【例】安全门案例</p><p>我们需要创建一个<code>saddyfire</code>品牌的安全门，该安全门具有防火、防水、防盗的功能。可以将防火，防水，防盗功能提取成一个接口，形成一套规范。类图如下：</p><pre class="mermaid">classDiagramclass SafetyDoor {<< interface >>+ antiTheft() void+ fireproof() void+ waterproof() void}class SaddyFireSafetyDoor {+ antiTheft() void+ fireproof() void+ waterproof() void}SafetyDoor <|.. SaddyFireSafetyDoor : 实现</pre><p>上面的设计我们发现了它存在的问题，<code>saddyfire</code>品牌的安全门具有防盗，防水，防火的功能。现在如果我们还需要再创建一个传智品牌的安全门，而该安全门只具有防盗、防水功能呢？很显然如果实现 SafetyDoor 接口就违背了接口隔离原则，那么我们如何进行修改呢？看如下类图：</p><pre class="mermaid">classDiagramclass AntiTheft {<< interface >>+ antiTheft() void}class Fireproof {<< interface >>+ fireproof() void}class Waterproof {<< interface >>+ waterproof() void}class SaddyFireDoor {+ antiTheft() void+ fireproof() void+ waterproof() void}AntiTheft <|.. SaddyFireDoor : 实现Fireproof <|.. SaddyFireDoor : 实现Waterproof <|.. SaddyFireDoor : 实现</pre><p><strong>Code:</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//防盗接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AntiTheft</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">antiTheft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//防火接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Fireproof</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">fireproof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//防水接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Waterproof</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">waterproof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//SaddyFire安全门</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SaddyFireSafetyDoor</span> <span class="token keyword">implements</span> <span class="token class-name">AntiTheft</span><span class="token punctuation">,</span><span class="token class-name">Fireproof</span><span class="token punctuation">,</span><span class="token class-name">Waterproof</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">antiTheft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"防盗"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fireproof</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"防火"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">waterproof</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"防水"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//DeeSan安全门</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeeSanSafetyDoor</span> <span class="token keyword">implements</span> <span class="token class-name">AntiTheft</span><span class="token punctuation">,</span><span class="token class-name">Fireproof</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">antiTheft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"防盗"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fireproof</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"防火"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-5-迪米特法则">3.5 迪米特法则</h3><p>迪米特法则又叫最少知识原则。</p><p>只和你的直接朋友交谈，不跟“陌生人”说话（Talk only to your immediate friends and not to strangers）。</p><p>其含义是：如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。其目的是降低类之间的耦合度，提高模块的相对独立性。</p><p><img src="./../design-pattern/image-20240121134400988.png" alt=""></p><p>迪米特法则中的“朋友”是指：当前对象本身、当前对象的成员对象、当前对象所创建的对象、当前对象的方法参数等，这些对象同当前对象存在关联、聚合或组合关系，可以直接访问这些对象的方法。</p><p>下面看一个例子来理解迪米特法则</p><p>【例】明星与经纪人的关系实例</p><p>明星由于全身心投入艺术，所以许多日常事务由经纪人负责处理，如和粉丝的见面会，和媒体公司的业务洽淡等。这里的经纪人是明星的朋友，而粉丝和媒体公司是陌生人，所以适合使用迪米特法则。</p><p>类图如下：</p><pre class="mermaid">classDiagramclass Agent {- star : Star- fans : Fans- company : Company+ setStar(Star star) void+ setFans(Fans fans) void+ setCompany(Company company) void+ meetinf() void+ business() void}class Star {- name : String+ Star(String name)+ getName() String}class Fans {- name : String+ Fans(String name)+ getName() String}class Company {- name : String+ Company(Strng name)+ getName() void}Agent o-- Star : 聚合Agent o--  Fans : 聚合Agent o--  Company : 聚合</pre><p><strong>Code:</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//明星类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Star</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//省略 get</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//粉丝类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Fans</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Fans</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//省略 get</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//媒体公司类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Company</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Company</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//省略 get</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//经纪人类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Agent</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Star</span> star<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Fans</span> fans<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Company</span> company<span class="token punctuation">;</span><span class="token comment">//省略 set</span>    <span class="token comment">//和粉丝见面的方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">meeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>star<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"和粉丝"</span> <span class="token operator">+</span> fans<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"见面"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//和媒体公司洽谈的方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">business</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>star<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"和"</span> <span class="token operator">+</span> company<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"洽谈"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//迪米特法则测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建经纪人类</span>        <span class="token class-name">Agent</span> agent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Agent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建明星对象</span>        <span class="token class-name">Star</span> star <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token string">"林青霞"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        agent<span class="token punctuation">.</span><span class="token function">setStar</span><span class="token punctuation">(</span>star<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建粉丝对象</span>        <span class="token class-name">Fans</span> fans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fans</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        agent<span class="token punctuation">.</span><span class="token function">setFans</span><span class="token punctuation">(</span>fans<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//创建媒体公司对象</span>        <span class="token class-name">Company</span> company <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Company</span><span class="token punctuation">(</span><span class="token string">"黑马媒体公司"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        agent<span class="token punctuation">.</span><span class="token function">setCompany</span><span class="token punctuation">(</span>company<span class="token punctuation">)</span><span class="token punctuation">;</span>        agent<span class="token punctuation">.</span><span class="token function">meeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//和粉丝见面</span>        agent<span class="token punctuation">.</span><span class="token function">business</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//和媒体公司洽谈业务</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-6-合成复用原则">3.6 合成复用原则</h3><p>合成复用原则是指：尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现。</p><p>通常类的复用分为<strong>继承复用</strong>和<strong>合成复用</strong>两种。</p><p>继承复用虽然有简单和易实现的优点，但它也存在以下缺点：</p><ol><li>继承复用破坏了类的封装性。因为继承会将父类的实现细节暴露给子类，父类对子类是透明的，所以这种复用又称为“白箱”复用。</li><li>子类与父类的耦合度高。父类的实现的任何改变都会导致子类的实现发生变化，这不利于类的扩展与维护。</li><li>它限制了复用的灵活性。从父类继承而来的实现是静态的，在编译时已经定义，所以在运行时不可能发生变化。</li></ol><p>采用组合或聚合复用时，可以将已有对象纳入新对象中，使之成为新对象的一部分，新对象可以调用已有对象的功能，它有以下优点：</p><ol><li>它维持了类的封装性。因为成分对象的内部细节是新对象看不见的，所以这种复用又称为“黑箱”复用。</li><li>对象间的耦合度低。可以在类的成员位置声明抽象。</li><li>复用的灵活性高。这种复用可以在运行时动态进行，新对象可以动态地引用与成分对象类型相同的对象。</li></ol><p>下面看一个例子来理解合成复用原则</p><p>【例】汽车分类管理程序</p><h4 id="改进前-3">改进前</h4><p>汽车按“动力源”划分可分为汽油汽车、电动汽车等；按“颜色”划分可分为白色汽车、黑色汽车和红色汽车等。如果同时考虑这两种分类，其组合就很多。类图如下：</p><pre class="mermaid">classDiagramclass Car {+ move() void}class PetrolCar {+ move() void}class ElectricCar { + move() void}class RedPeroCar {+ move() void}class WhitePetrolCar {+ move() void}class RedElectricCar {+ move() void}class WhiteElectricCar {+ move() void}Car <|-- PetrolCarCar <|-- ElectricCarPetrolCar <|-- RedPeroCarPetrolCar <|-- WhitePetrolCarElectricCar <|-- RedElectricCarElectricCar <|-- WhiteElectricCar</pre><h4 id="改进后-3">改进后</h4><p>从上面类图我们可以看到使用继承复用产生了很多子类，如果现在又有新的动力源或者新的颜色的话，就需要再定义新的类。我们试着将继承复用改为聚合复用看一下。</p><pre class="mermaid">classDiagramclass Car {# color : Color+ move() void}class PetrolCar {+ move() void}class ElectricCar { + move() void}class Color {<< interface >>}class Red { }class White { }Car <|-- PetrolCar : 继承Car <|-- ElectricCar : 继承Car o-- Color : 聚合Color <|.. Red : 实现Color <|.. White : 实现</pre>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> DesignPattern </tag>
            
            <tag> Mermaid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM-Tuning-03-JVM监控及诊断-运行参数篇</title>
      <link href="/2024/01/17/jvm-tuning3/"/>
      <url>/2024/01/17/jvm-tuning3/</url>
      
        <content type="html"><![CDATA[<h1>JVM监控及诊断-运行参数篇</h1><h2 id="01-JVM参数选项类型">01-JVM参数选项类型</h2><h3 id="X参数选项">-X参数选项</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-Xms<span class="token operator">&lt;</span>size<span class="token operator">></span>        设置初始 Java 堆大小, 等价于-XX:InitialHeapSize-Xmx<span class="token operator">&lt;</span>size<span class="token operator">></span>        设置最大 Java 堆大小, 等价于-XX:MaxHeapSize-Xss<span class="token operator">&lt;</span>size<span class="token operator">></span>        设置 Java 线程堆栈大小, 等价于-XX:ThreadStackSize<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="XX参数选项">-XX参数选项</h3><p>Boolean类型格式</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-XX:+<span class="token operator">&lt;</span>option<span class="token operator">></span> 表示启用option属性-XX:-<span class="token operator">&lt;</span>option<span class="token operator">></span> 表示禁用option属性<span class="token parameter variable">-XX:+UseParallelGC</span>  选择垃圾回收器行为并行收集器<span class="token parameter variable">-XX:+UseG1GC</span>  表示启用G1收集器<span class="token parameter variable">-XX:+UseAdaptiveSizePolicy</span>  自动选择年轻代区大小和相应的Survivor区比例<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>非 Boolean 类型格式(key-value类型)</p><ul><li>子类型1: 数值型格式 <code>-XX&lt;option&gt;=&lt;number&gt;</code></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-XX:NewSize-1024m  表示设置新生代初始大小为1024m<span class="token parameter variable">-XX:MaxGCPauseMillis</span><span class="token operator">=</span><span class="token number">500</span>  表示设置GC停顿时间：500毫秒<span class="token parameter variable">-XX:GCTimeRatio</span><span class="token operator">=</span><span class="token number">19</span>  表示设置吞吐量<span class="token parameter variable">-XX:NewRatio</span><span class="token operator">=</span><span class="token number">2</span>  表示新生代与老年代的比例<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>子类型2: 非数值型格式 <code>-XX:&lt;name&gt;=&lt;string&gt;</code></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-XX:HeapDumpPath</span><span class="token operator">=</span>/usr/local/heapdump.hprof  用来指定 heap 转存文件的存储路径。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>特别的</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-XX:+PrintFlagsFinal</span>输出所有参数的默认值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="02-添加JVM参数选项">02-添加JVM参数选项</h2><p>程序运行过程中</p><ul><li>使用 <code>jinfo -flag &lt;name&gt;=&lt;value&gt; &lt;pid&gt;</code> 设置非 Boolean 类型参数</li><li>使用 <code>jinfo -flag [+|-]&lt;name&gt; &lt;pid&gt;</code> 设置Boolean 类型参数</li></ul><h2 id="03-常用的JVM参数选项">03-常用的JVM参数选项</h2><h3 id="打印设置的XX选项及值">打印设置的XX选项及值</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-XX:+PrintCommandLineFlags</span>  可以让在程序运行前打印出用户手动设置或者 JVM 自动设置的 XX 选项<span class="token parameter variable">-XX:+PrintFlagsInitial</span>  表示打印出所有 XX 选项的默认值XX:+PrintFlagsFinal  👍表示打印出 XX 选项在运行程序时生效的值<span class="token parameter variable">-XX:+PrintVMOptions</span>  打印 JVM 的参数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="堆、栈、方法区等内存大小设置">堆、栈、方法区等内存大小设置</h3><p>栈</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-Xss128k</span>  设置每个线程的栈大小为128k<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>堆内存</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-Xms3550m</span>  等价于-XX:InitialHeapSize,设置 JVM 初始堆内存为3550M<span class="token parameter variable">-Xmx3550m</span>  等价于-XX:MaxHeapSize,设置 JVM 最大堆内存为3550M<span class="token parameter variable">-Xmn2g</span>  设置年轻代大小为2G, 官方推荐配置为整个堆大小的3/8<span class="token parameter variable">-XX:NewSize</span><span class="token operator">=</span>1024m  设置年轻代初始值为1024M<span class="token parameter variable">-XX:MaxNewSize</span><span class="token operator">=</span>1024m  设置年轻代最大值为1024M<span class="token parameter variable">-XX:SurvivorRatio</span><span class="token operator">=</span><span class="token number">8</span>  设置年轻代中 Eden 区与一个 Survivorl 区的比值，默认为8<span class="token parameter variable">-XX:+UseAdaptiveSizePolicy</span>  自动选择各区大小比例<span class="token parameter variable">-XX:NewRatio</span><span class="token operator">=</span><span class="token number">4</span>  设置老年代与年轻代（包括1个Eden和2个Survivorl区）的比值<span class="token parameter variable">-XX:PretenureSizeThreadshold</span><span class="token operator">=</span><span class="token number">1024</span>  设置让大于此阈值的对象直接分配在老年代，单位为字节  只对Serial、ParNewl收集器有效<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法区</p><ul><li>永久代</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">XX:PermSize<span class="token operator">=</span>256m  设置永久代初始值为256M<span class="token parameter variable">-XX:MaxPermSize</span><span class="token operator">=</span>256m  设置永久代最大值为256M<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>元空间</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-XX:MetaspaceSize</span>  初始空间大小<span class="token parameter variable">-XX:MaxMetaspaceSize</span>  最大空间，默认没有限制<span class="token parameter variable">-XX:+UseCompressedOops</span>  压缩对象指针<span class="token parameter variable">-XX:+UseCompressedClassPointers</span>  压缩类指针<span class="token parameter variable">-XX:CompressedClassSpaceSize</span>  设置Klass Metaspace的大小，默认1G<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接内存</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-XX:MaxDirectMemorySize</span> 指定DirectMemory容量，若未指定，则默认与Java堆最大值一样<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="OutofMemory相关的选项">OutofMemory相关的选项</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-XX:+HeapDumpOnOutOfMemoryError</span>  表示在内存出现OOM的时候，把Heap转存<span class="token punctuation">(</span>Dump<span class="token punctuation">)</span>到文件以便后续分析<span class="token parameter variable">-XX:+HeapDumpBeforeFullGC</span>  表示在出现FulIGC之前，生成Heap转储文件<span class="token parameter variable">-XX:HeapDumpPath</span><span class="token operator">=</span><span class="token operator">&lt;</span>path<span class="token operator">></span>  指定heap转存文件的存储路径<span class="token parameter variable">-XX:OnOutofMemoryError</span>  指定一个可行性程序或者脚本的路径，当发生OOM的时候，去执行这个脚本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>对 OnOutOfMemoryError 的运维处理<br>以部署在 linux 系统 /opt/Server 目录下的 Server.jar 为例</p><ol><li><p>在 <a href="http://run.sh">run.sh</a> 启动脚本中添加 jvm 参数：</p><p>-XX:OnOutofMemoryError=/opt/Server/restart.sh</p></li><li><p>restart.sh脚本</p></li></ol></blockquote><p>linux 环境：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">pid</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">ps</span> -ef<span class="token operator">|</span><span class="token function">grep</span> Server.jar<span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'&#123;if($8=="java")&#123;print $2&#125;&#125;'</span><span class="token variable">)</span></span><span class="token function">kill</span> <span class="token parameter variable">-9</span> <span class="token variable">$pid</span><span class="token builtin class-name">cd</span> /opt/Server/<span class="token punctuation">;</span><span class="token function">sh</span> run.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Windows 环境：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> offwmic process where <span class="token assign-left variable">Name</span><span class="token operator">=</span><span class="token string">'java.exe'</span>delete<span class="token builtin class-name">cd</span> D:<span class="token punctuation">\</span>Serverstart run.bat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="垃圾收集器相关选项">垃圾收集器相关选项</h3><ul><li>查看默认垃圾回收器</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-XX:PrintCommandLineFlags</span>查看命令行相关参数<span class="token punctuation">(</span>包含使用的垃圾收集器<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>Serial 回收器</li></ul><p>Serial 收集器作为 HotSpot 中 Client 模式下的默认新生代垃圾收集器。SerialOld 是运行在 Client 模式下默认的老年代的垃圾回收器。</p><p>-XX:+UseSerialGC</p><p>指定年轻代和老年代都使用串行收集器。等价于新生代用 Seria GC, 且老年代用Serial Old GC。可以获得最高的单线程收集效率。</p><ul><li>ParNew 回收器</li></ul><p>-XX:+UseParNewGC</p><p>手动指定使用 ParNew 收集器执行内存回收任务。它表示年轻代使用并行收集器，不影响老年代。</p><p>-XX:ParallelGCThreads=N</p><p>限制线程数量，默认开启和 CPU 数据相同的线程数。</p><ul><li>Parallel 回收器</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-XX:+UseParallelGC</span>手动指定年轻代使用 Parallel 并行收集器执行内存回收任务。<span class="token parameter variable">-XX:+UseParallelOldGC</span>手动指定老年代都是使用并行回收收集器。分别适用于新生代和老年代。默认jdk8是开的。上面两个参数，默认开启一个，另一个也会被开启。（互相激活）<span class="token parameter variable">-XX:ParallelGCThreads</span>设置年轻代并行收集器的线程数。一般地，最好与 CPU 数量相等，以避免过多的线程数影响垃圾收集性能。在默认情沉下，当 CPU 数量小于 <span class="token number">8</span> 个，ParallelGCThreads 的值等于 CPU 数量。当 CPU 数量大于 <span class="token number">8</span> 个，ParallelGCThreads 的值等于 <span class="token number">3</span>+<span class="token punctuation">[</span><span class="token number">5</span>*CPU_Count<span class="token punctuation">]</span>/8<span class="token punctuation">]</span>。<span class="token parameter variable">-XX:MaxGCPauseMillis</span> 设置垃圾收集器最大停顿时间（即STW的时间）。单位是毫秒。为了尽可能地把停顿时间控制在 MaxGCPauseMills 以内，收集器在工作时会调整 Java 堆大小或者其他一些参数。对于用户来讲，停顿时间越短体验越好。但是在服务器端，我们注重高并发，整体的吞吐量所以服务器端适合 Parallel,进行控制。该参数使用需谨慎。<span class="token parameter variable">-XX:GCTimeRatio</span>垃圾收集时间占总时间的比例<span class="token punctuation">(</span><span class="token operator">=</span><span class="token number">1</span>/<span class="token punctuation">(</span>N+1<span class="token punctuation">))</span>。用于衡量吞吐量的大小。取值范围（0, <span class="token number">100</span>）。默认值99，也就是垃圾回收时间不超过1%。与前一个 <span class="token parameter variable">-X:MaxGCPauseMillis</span> 参数有一定矛盾性。暂停时间越长，Radio 参数就容易超过设定的比例。<span class="token parameter variable">-XX:+UseAdaptivesizePolicy</span>设置 Parallel Scavengel 收集器具有自适应调节策略<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>CMS 回收器</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-XX:+UseConcMarkSweepGC</span>手动指定使用 CMS 收集器执行内存回收任务。开启该参数后会自动将 <span class="token parameter variable">-XX:+UseParNewGC</span> 打开。即: ParNew<span class="token punctuation">(</span>Young区用<span class="token punctuation">)</span> + CMS<span class="token punctuation">(</span>Old区用<span class="token punctuation">)</span> + Serial Old 的组合。<span class="token parameter variable">-XX:CMSInitiatingOccupanyFraction</span> 设置堆内存使用率的阈值，一旦达到该阈值，便开始进行回收。JDK5及以前版本的默认值为68，即当老年代的空间使用率达到 <span class="token number">68</span>% 时，会执行一次 CMS 回收。JDK6及以上版本默认值为92%如果内存增长缓慢，则可以设置一个稍大的值，大的阈值可以有效降低 CMS 的触发频率，减少老年代回收的次数可以较为明显地改善应用程序性能。反之，如果应用程序内存使用率增长很快，则应该降低这个阈值，以避免频繁触发老年代串行收集器。因此通过该选项便可以有效降低 Full GC 的执行次数。<span class="token parameter variable">-XX:+UseCMSCompactAtFullCollection</span>用于指定在执行完 Full GC 后对内存空间进行压缩整理，以此避免内存碎片的产生。不过由于内存压缩整理过程无法并发执行，所带来的问题就是停顿时间变得更长了。<span class="token parameter variable">-XX:CMSFullGCsBeforeCompaction</span>设置在执行多少次 Full GC 后对内存空间进行压缩整理。<span class="token parameter variable">-XX:ParallelCMSThreads</span>设置 CMS 的线程数量。CMS 默认启动的线程数是<span class="token punctuation">(</span>ParallelGCThreads+3<span class="token punctuation">)</span>/4, ParallelGCThreads 是年轻代并行收集器的线程数。当 CPU 资源比较紧张时，受到 CMS 收集器线程的影响，应用程序的性能在垃圾回收阶段可能会非常糟糕<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>G1 回收器</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-XX:+UseG1GC</span>手动指定使用 G1 收集器执行内存回收任务。<span class="token parameter variable">-XX:G1HeapRegionSize</span>设置每个 Region 的大小。值是2的幂，范围是1MB到32MB之间，目标是根据最小的 Java 堆大小划分出约2048个区域。默认是堆内存的1/2000。<span class="token parameter variable">-XX:MaxGCPauseMillis</span>设置期望达到的最大GC停顿时间指标<span class="token punctuation">(</span>JVM会尽力实现，但不保证达到<span class="token punctuation">)</span>。默认值是200ms<span class="token parameter variable">-XX:ParallelGCThread</span>设置 STW 时 GC 线程数的值。最多设置为8<span class="token parameter variable">-XX:ConcGCThreads</span>设置并发标记的线程数。将n设置为并行垃圾回收线程数<span class="token punctuation">(</span>Parallel GCThreads<span class="token punctuation">)</span>的1/4左右。<span class="token parameter variable">-XX:InitiatingHeapOccupancyPercent</span>设置触发并发GC周期的Java堆占用率阈值。超过此值，就触发GC。默认值是45。<span class="token parameter variable">-XX:G1NewSizePercent</span>  <span class="token parameter variable">-XX:G1MaxNewSizePercent</span>新生代占用整个堆内存的最小百分比（默认5%）、最大百分比（默认6%）<span class="token parameter variable">-XX:G1ReservePercent</span><span class="token operator">=</span><span class="token number">10</span>保留内存区域，防止to space<span class="token punctuation">(</span>Survivor中的to区<span class="token punctuation">)</span>溢出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如何选择</p><ul><li>优先调整堆的大小让 JVM 自适应完成。</li><li>如果内存小于 100M, 使用串行收集器</li><li>如果是单核、单机程序，并且没有停顿时间的要求，串行收集器</li><li>如果是多 CPU、需要高吞吐量、允许停顿时间超过1秒，选择并行或者 JVM 自己选择</li><li>如果是多 CPU、追求低停顿时间，需快速响应（比如延迟不能超过1秒，如互联网应用）,使用并发收集器。官方推荐 G1, 性能高。现在互联网的项目，基本都是使用G1。</li></ul><blockquote><p>特别说明：</p><ol><li>没有最好的收集器，更没有万能的收集</li><li>调优永远是针对特定场景、特定需求，不存在一劳永逸的收集器</li></ol></blockquote><h3 id="GC日志相关选项">GC日志相关选项</h3><h3 id="常用参数">常用参数</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-verbose:gc</span>输出 gc 日志信息，默认输出到标准输出<span class="token parameter variable">-XX:+PrintGC</span>等同于 -verbose:gc, 表示打开简化的GC日志<span class="token parameter variable">-XX:+PrintGCDetails</span>在发生垃圾回收时打印内存回收详细的日志，并在进程退出时输出当前内存各区域分配情况<span class="token parameter variable">-XX:+PrintGCTimeStamps</span>输出GC发生时的时间戳<span class="token punctuation">(</span>不可独立使用, 需要配合-XX:+PrintGCDetails<span class="token punctuation">)</span><span class="token parameter variable">-XX:+PrintGCDateStamps</span>输出GC发生时的时间戳（以日期的形式，如2013-05-04T21:53:59.234+0800<span class="token punctuation">)</span><span class="token punctuation">(</span>不可独立使用, 需要配合-XX:+PrintGCDetails<span class="token punctuation">)</span><span class="token parameter variable">-XX:+PrintHeapAtGC</span>每一次 GC 前和 GC 后，都打印堆信息-Xloggc:<span class="token operator">&lt;</span>file<span class="token operator">></span>把GC日志写入到一个文件中去，而不是打印到标准输出中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="04-通过Java代码获取JVM参数">04-通过Java代码获取JVM参数</h2><p>Java 提供了 java.lang.management 包用于监视和管理 Java 虚拟机和 Java 运行时中的其他组件，它允许本地和远程监控和管理运行的 Java 虚拟机。其中 ManagementFactory 这个类还是挺常用的。另外还有 Runtime 类也可以获取一些内存、CPU核数等相关的数据。<br>通过这些api可以监控我们的应用服务器的堆内存使用情况，设置一些阈值进行报警等处理。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">MemoryMXBean</span> memorymbean <span class="token operator">=</span> <span class="token class-name">ManagementFactory</span><span class="token punctuation">.</span><span class="token function">getMemoryMXBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">MemoryUsage</span> usage <span class="token operator">=</span> memorymbean<span class="token punctuation">.</span><span class="token function">getHeapMemoryUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"INIT HEAP: "</span> <span class="token operator">+</span> usage<span class="token punctuation">.</span><span class="token function">getInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">+</span> <span class="token string">"m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MAX HEAP: "</span> <span class="token operator">+</span> usage<span class="token punctuation">.</span><span class="token function">getMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">+</span> <span class="token string">"m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"USE HEAP: "</span> <span class="token operator">+</span> usage<span class="token punctuation">.</span><span class="token function">getUsed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">+</span> <span class="token string">"m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\nFull Information:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Heap Memory Usage: "</span> <span class="token operator">+</span> memorymbean<span class="token punctuation">.</span><span class="token function">getHeapMemoryUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Non-Heap Memory Usage: "</span> <span class="token operator">+</span> memorymbean<span class="token punctuation">.</span><span class="token function">getNonHeapMemoryUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=======================通过java来获取相关系统状态============================ "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前堆内存大小totalMemory "</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">totalMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">+</span> <span class="token string">"m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 当前堆内存大小</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"空闲堆内存大小freeMemory "</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">freeMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">+</span> <span class="token string">"m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 空闲堆内存大小</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最大可用总堆内存maxMemory "</span> <span class="token operator">+</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">maxMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">+</span> <span class="token string">"m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 最大可用总堆内存大小</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>香橙派5B上手记录</title>
      <link href="/2024/01/10/oranpi-start/"/>
      <url>/2024/01/10/oranpi-start/</url>
      
        <content type="html"><![CDATA[<h1>香橙派5B上手记录</h1><blockquote><p>本文基于香橙派官方文档, 结合自己上手记录过程</p><p><a href="http://www.orangepi.cn/html/hardWare/computerAndMicrocontrollers/service-and-support/Orange-Pi-5B.html">香橙派5B 资料页面链接</a></p></blockquote><p><img src="./../oranpi-start/image-20240110205343056.png" alt="正面视图(尤其注意电源位置)"></p><h2 id="前置工作">前置工作</h2><ul><li>开发板</li><li>5V/4A/20W 电源 (手册中多次提及电压不能超过5V, 否则会烧坏板子)</li><li>3.3V 的 USB 转 TTL 模块和杜邦线, 使用串口调试功能时, 需要 USB 转 TTL 模块和杜邦线来连接开发板和电脑</li><li>上一条可以换成网线</li><li>读卡器 + TF卡 (对于香橙派5, 板载emmc自带 Droid 系统)</li><li>Ubuntu镜像文件 + 烧录软件 balenaEtcher</li></ul><blockquote><p>balenaEtcher官方地址 <a href="https://www.balena.io/etcher/">https://www.balena.io/etcher/</a></p></blockquote><h2 id="Ubuntu-系统启动">Ubuntu 系统启动</h2><h3 id="前置烧录">前置烧录</h3><h4 id="烧录至-TF-卡">烧录至 TF 卡</h4><p><img src="./../oranpi-start/image-20240110210102428.png" alt=""></p><h4 id="使用-TF-卡烧录至-emmc">使用 TF 卡烧录至 emmc</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> /dev/mmcblk*boot0 <span class="token operator">|</span> <span class="token function">cut</span> -c1-12<span class="token comment">#格式化</span><span class="token function">sudo</span> <span class="token function">dd</span> <span class="token assign-left variable">bs</span><span class="token operator">=</span>1M <span class="token assign-left variable">if</span><span class="token operator">=</span>/dev/zero <span class="token assign-left variable">of</span><span class="token operator">=</span>/dev/mmcblk1 <span class="token assign-left variable">count</span><span class="token operator">=</span><span class="token number">1000</span> <span class="token assign-left variable">status</span><span class="token operator">=</span>progress<span class="token function">sudo</span> <span class="token function">sync</span><span class="token comment">#烧录</span><span class="token function">sudo</span> <span class="token function">dd</span> <span class="token assign-left variable">bs</span><span class="token operator">=</span>1M <span class="token assign-left variable">if</span><span class="token operator">=</span><span class="token operator">&lt;</span>镜像路径/镜像名<span class="token operator">></span> <span class="token assign-left variable">of</span><span class="token operator">=</span>/dev/mmcblk1 <span class="token assign-left variable">status</span><span class="token operator">=</span>progress<span class="token function">sudo</span> <span class="token function">sync</span><span class="token comment">#实例</span><span class="token function">sudo</span> <span class="token function">dd</span> <span class="token assign-left variable">bs</span><span class="token operator">=</span>1M <span class="token assign-left variable">if</span><span class="token operator">=</span>Orangepi5b_1.0.8_ubuntu_focal_server_linux5.10.160.img <span class="token assign-left variable">of</span><span class="token operator">=</span>/dev/mmcblk1 <span class="token assign-left variable">status</span><span class="token operator">=</span>progress<span class="token function">sudo</span> <span class="token function">sync</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用-RKDevTool-烧录至-emmc">使用 RKDevTool 烧录至 emmc</h4><ol><li><p>准备工具</p><p><img src="./../oranpi-start/image-20240113215312745.png" alt=""></p><blockquote><p>注意，&quot;MiniLoader-烧录 Linux 镜像才需要用到的东西&quot;文件夹下文简称为 MiniLoader 文件夹。</p></blockquote></li><li><p>在文件夹 DriverAssitant_v5.12 中找到 DriverInstall.exe 可执行文件并打开即可</p></li><li><p>打开 DriverInstall.exe 后安装瑞芯微驱动的步骤如下所示:</p><ol><li><p>点击“驱动安装”按钮</p><p><img src="./../oranpi-start/image-20240113215457426.png" alt=""></p></li><li><p>等待一段时间后，会弹出窗口提示“安装驱动成功”，然后点击“确定”按钮即可</p><p><img src="./../oranpi-start/image-20240113215521619.png" alt=""></p></li></ol></li><li><p>在 RKDevTool_Release 中打开 RKDevTool</p><p><img src="./../oranpi-start/image-20240113215904896.png" alt=""></p></li><li><p>打开 RKDevTool 烧录工具后，因为电脑此时还没有通过 Type-C 线连接上开发板，所以左下角会提示&quot;没有发现设备&quot;</p><p><img src="./../oranpi-start/image-20240113215954181.png" alt=""></p></li><li><p>然后开始烧录 Linux 镜像到 eMMC 中</p><ol><li><p>首先通过 Type-C 数据线连接好开发板与 Windows 电脑</p></li><li><p>确保开发板没有插入 TF 卡，没有连接电源</p></li><li><p>还需确保下图位置的白色 USB2.0 接口没有插入 USB 设备</p></li><li><p>然后按住开发板的 MaskROM 按键不放，MaskROM 按键在开发板的位置如下图所示：</p><p><img src="./../oranpi-start/image-20240113220111610.png" alt=""></p></li><li><p>然后给开发板接上 Type-C 接口的电源，并上电，然后就可以松开 MaskROM 按键了</p><p><img src="./../oranpi-start/image-20240113220151020.png" alt=""></p></li><li><p>如果前面的步骤顺利，此时开发板会进入 MASKROM 模式，在烧录工具的界面上会提示&quot;发现一个 MASKROM 设备&quot;</p><p><img src="./../oranpi-start/image-20240113220226739.png" alt=""></p></li><li><p>然后将鼠标光标放在下面的这片区域中</p><p><img src="./../oranpi-start/image-20240113220312051.png" alt=""></p></li><li><p>然后点击鼠标右键会弹出下图所示的选择界面</p><p><img src="./../oranpi-start/image-20240113220342529.png" alt=""></p></li><li><p>然后选择<strong>导入配置</strong>选项</p><p><img src="./../oranpi-start/image-20240113220421330.png" alt=""></p></li><li><p>然后选择前面下载的 MiniLoader 文件夹中的 rk3588_linux_emmc.cfg 配置文件，再点击<strong>打开</strong></p><p><img src="./../oranpi-start/image-20240113220458479.png" alt=""></p></li><li><p>然后点击<strong>确定</strong></p><p><img src="./../oranpi-start/image-20240113220539678.png" alt=""></p></li><li><p>然后点击下图所示的位置</p><p><img src="./../oranpi-start/image-20240113220610577.png" alt=""></p></li><li><p>再选择前面下载的 MiniLoader 文件夹中 MiniLoaderAll.bin，再点击<strong>打开</strong></p><p><img src="./../oranpi-start/image-20240113220631065.png" alt=""></p></li><li><p>然后点击下图所示的位置</p><p><img src="./../oranpi-start/image-20240113220736369.png" alt=""></p></li><li><p>然后选择想要烧录的 linux 镜像的路径，再点击<strong>打开</strong></p><blockquote><p>在烧录镜像前，建议将要烧录的linux镜像重命名为orangepi.img或者其它比较短的名字，这样在烧录镜像的时候就能看到烧录进度的百分比数值。</p></blockquote></li></ol><p><img src="./../oranpi-start/image-20240113220850498.png" alt=""></p><ol start="16"><li><p>然后请<strong>勾选上强制按地址写</strong>选项</p><p><img src="./../oranpi-start/image-20240113220918394.png" alt=""></p></li><li><p>再点击执行按钮就会开始烧录 linux 镜像到开发板的 eMMC 中</p></li><li><p>linux 镜像烧录完后的显示 log 如下图所示</p><p><img src="./../oranpi-start/image-20240113220958757.png" alt=""></p></li><li><p>烧录完 linux 镜像到 eMMC 中后，linux 系统会自动启动。</p></li></ol></li></ol><h3 id="Linux-启动并登录">Linux 启动并登录</h3><blockquote><p>此处我烧录的是 Ubuntu Server, 因此提前准备了一根网线</p></blockquote><ol><li><p>连接网线, 电源并启动</p></li><li><p>登录 192.168.1.1 查看香橙派网络</p><p><img src="./../oranpi-start/image-20240110212239167.png" alt=""></p></li><li><p>使用 ssh 工具连接香橙派</p><p>账号及密码都是 (orangepi)</p></li></ol><h3 id="串口调试">串口调试</h3><ul><li>RX (Receive Data) 接收数据</li><li>TX (Transmit Data) 发送数据</li></ul><ol><li>首先查看自己手上的模块的引脚对应关系</li></ol><p><img src="./../oranpi-start/Snipaste_2024-01-14_14-32-46.png" alt="TX青色、RX蓝色、GN紫色"></p><ol start="2"><li>开发板的调试串口引脚关系对应如下</li></ol><p><img src="./../oranpi-start/image-20240114143604445.png" alt=""></p><ol start="3"><li><p>USB 转 TTL 模块 GND、TXD 和 RXD 引脚需要通过杜邦线连接到开发板的调试串口上</p><ul><li>USB 转 TTL 模块的 GND 接到开发板的 GND 上</li><li>USB 转 TTL 模块的 RX 接到开发板的 TX 上</li><li>USB 转 TTL 模块的 TX 接到开发板的 RX 上</li></ul></li><li><p>由此杜邦线接线的顺序应该(紫、青、蓝)</p></li><li><p>调整终端工具参数</p></li></ol><p><img src="./../oranpi-start/image-20240114153426102.png" alt="以xshell为例"></p><ol start="6"><li>开机</li></ol><h3 id="WIFI-连接">WIFI 连接</h3><ol><li>首先使用 <code>nmcli dev wifi</code> 命令扫描周围的 WIFI 热点</li></ol><p><img src="./../oranpi-start/image-20240110212620976.png" alt=""></p><ol start="2"><li>然后使用 <code>nmcli</code> 命令连接扫描到的 WIFI 热点：</li></ol><p><code>nmcli dev wifi connect &lt;wifi_name&gt; password &lt;wifi_passwd&gt;</code></p><p><img src="./../oranpi-start/image-20240110212831443.png" alt=""></p><ol start="3"><li>通过 <code>ip addr show wlan0</code> 命令可以查看 wifi 的 IP 地址</li></ol><p><img src="./../oranpi-start/image-20240110213012840.png" alt=""></p><ol start="4"><li>使用 <code>ping</code> 命令可以测试 wifi 网络的连通性</li></ol><p><img src="./../oranpi-start/image-20240110213123089.png" alt=""></p><h3 id="设置静态-IP-地址">设置静态 IP 地址</h3><h4 id="使用-nmcli-命令设置">使用 nmcli 命令设置</h4><blockquote><p>如果要设置网口的静态 IP 地址，请先将网线插入开发板，如果需要设置 WIFI的静态 IP 地址，请先连接好 WIFI，然后再开始设置静态 IP 地址</p></blockquote><ol><li>然后通过 <code>nmcli con show</code> 命令可以查看网络设备的名字，如下所示</li></ol><p><img src="./../oranpi-start/image-20240110220800203.png" alt=""></p><ol start="2"><li><p>然后输入下面的命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nmcli con mod <span class="token string">"&lt;网络名>"</span> <span class="token punctuation">\</span>ipv4.addresses <span class="token string">"192.168.1.110"</span> <span class="token punctuation">\</span>ipv4.gateway <span class="token string">"192.168.1.1"</span> <span class="token punctuation">\</span>ipv4.dns <span class="token string">"8.8.8.8"</span> <span class="token punctuation">\</span>ipv4.method <span class="token string">"manual"</span>nmcli con mod <span class="token string">"CMCC-6Xcu-5G"</span> <span class="token punctuation">\</span>ipv4.addresses <span class="token string">"192.168.1.111"</span> <span class="token punctuation">\</span>ipv4.gateway <span class="token string">"192.168.1.1"</span> <span class="token punctuation">\</span>ipv4.dns <span class="token string">"8.8.8.8"</span> <span class="token punctuation">\</span>ipv4.method <span class="token string">"manual"</span><span class="token comment"># Wired connection 1 表示设置以太网的静态 IP 地址</span><span class="token comment"># ipv4.addresses 后面是要设置的静态 IP 地址，可以修改为自己想要设置的值</span><span class="token comment"># ipv4.gateway 表示网关的地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>然后重启 linux 系统</p><p><code>sudo reboot</code></p></li><li><p>然后重新进入 linux 系统使用 <code>ip addr show eth0</code> 命令就可以查看到 IP 地址已经设置为想要的值了 (如果设置成功后通过 ssh登录就能发现了🤣)</p></li></ol><h4 id="使用-nmtui-命令设置">使用 nmtui 命令设置</h4><ol><li>首先运行 <code>nmtui</code> 命令</li></ol><p><img src="./../oranpi-start/image-20240110214452331.png" alt=""></p><ol start="2"><li>选择 Edit a connection, 并按下回车</li><li>选择需要设置静态 IP 地址的网络接口, 比如设置 CMCC-6Xcu-5G, 按下 Tab 键进入</li></ol><p><img src="./../oranpi-start/image-20240110214624786.png" alt=""></p><ol start="4"><li>将光标移动到下图所示的 <code>&lt;Automatic&gt;</code> 位置进行 IPv4 的配置</li></ol><p><img src="./../oranpi-start/image-20240110214901015.png" alt=""></p><ol start="5"><li>然后回车, 通过方向键选择 <code>Manual</code>, 然后回车确定</li></ol><p><img src="./../oranpi-start/image-20240110214945084.png" alt=""></p><ol start="6"><li>然后通过 Tab 键将光标移动到 <code>&lt;Show&gt;</code></li></ol><p><img src="./../oranpi-start/image-20240110215021768.png" alt=""></p><ol start="7"><li>在下图所示的位置设置 IP 地址(Addresses)、网关(Gateway)和 DNS 服务器的地址（里面还有很多其他设置选项，请自行探索），请根据自己的具体需求来设置，下图中设置的值只是一个示例</li></ol><p><img src="./../oranpi-start/image-20240110215211432.png" alt=""></p><ol start="8"><li>完后将光标移动到右下角的 <code>&lt;OK&gt;</code>，然后回车确认, 然后点击 <code>&lt;Back&gt;</code> 回退到上一级选择界面</li><li>然后选择 Activate a connection，再将光标移动到 <code>&lt;OK&gt;</code>，最后点击回车</li></ol><p><img src="./../oranpi-start/image-20240110215400337.png" alt=""></p><ol start="10"><li>然后选择需要设置的网络接口，激活该激活的, 关闭想关闭的网络</li></ol><p><img src="./../oranpi-start/image-20240110215705785.png" alt=""></p><ol start="11"><li>设置完成, 友好退出即可</li><li>最后通过 <code>ip addr show wlan0</code> 就能看到网口的 IP 地址已经变成前面设置的静态 IP地址了</li></ol><p><img src="./../oranpi-start/image-20240110215932436.png" alt=""></p><h3 id="板载-LED-灯说明">板载 LED 灯说明</h3><ol><li>开发板上有两个 LED 灯，一个绿灯，一个红灯，所在位置如下图所示：</li></ol><p><img src="./../oranpi-start/image-20240110210834760.png" alt=""></p><ol start="2"><li><p>只要开发板打开了电源，红色的 LED 灯就会常亮，这是由硬件控制的，软件无法关闭。</p></li><li><p>绿色的 LED 灯在内核启动后会一直闪烁，这是由软件控制的</p></li><li><p>设置绿灯亮灭和闪烁的方法如下所示</p><blockquote><p>注意: 下面的操作请在 root 用户下进行</p></blockquote><ol><li><p>首先进入绿灯的设置目录</p><p><code>cd /sys/class/leds/status_led</code></p></li><li><p>设置绿灯停止闪烁的命令如下</p><p><code>echo none &gt; trigger</code></p></li><li><p>设置绿灯常亮的命令如下</p><p><code>echo default-on &gt; trigger</code></p></li><li><p>设置绿灯闪烁的命令如下</p><p><code>echo heartbeat &gt; trigger</code></p></li><li><p>如果开机后不需要 LED 灯闪烁, 可以使用下面的方法来关闭绿灯和蓝灯</p><ol><li><p>首先运行下 orangepi-config，普通用户记得加 sudo 权限</p><p><code>sudo orangepi-config</code></p></li><li><p>然后选择 System</p><p><img src="./../oranpi-start/image-20240110211444336.png" alt=""></p></li><li><p>然后选择 Hardware</p><p><img src="./../oranpi-start/image-20240110211500003.png" alt=""></p></li><li><p>然后使用键盘的方向键定位到下图所示的位置，再使用空格选中 disable-led 配置</p><p><img src="./../oranpi-start/image-20240110211601620.png" alt=""></p></li><li><p>然后选择 <code>&lt;Save&gt;</code> 保存, 然后选择 <code>&lt;Back&gt;</code></p><p><img src="./../oranpi-start/image-20240110211627953.png" alt=""></p></li><li><p>然后选择 <code>&lt;Reboot&gt;</code> 重启系统使配置生效, 重启后就可以看到开发板上只有红灯常亮, 绿灯不会闪烁了</p><p><img src="./../oranpi-start/image-20240110211709091.png" alt=""></p></li></ol></li></ol></li></ol><h2 id="常用命令">常用命令</h2><h4 id="查看-Ubuntu-版本">查看 Ubuntu 版本</h4><p><code>lsb_release -a</code></p><p><img src="./../oranpi-start/image-20240110222823841.png" alt=""></p><h4 id="查看当前Ubuntu系统使用的镜像源">查看当前Ubuntu系统使用的镜像源</h4><p><code>cat /etc/apt/sources.list</code></p><p><img src="./../oranpi-start/image-20240110223734669.png" alt=""></p><p>如果想使用其他镜像源，可以在这个文件中添加或编辑相应的行。编辑完成后，记得运行以下命令更新软件包列表：</p><p><code>sudo apt-get update</code></p><h4 id="其他设置">其他设置</h4><p><strong>账户相关</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#修改 root 账号的密码(要切换至root)</span>paswd<span class="token comment">#修改 orangepi 账号的密码</span><span class="token function">passwd</span> orangepi<span class="token comment">#修改 orangepi 的账号为 dee</span><span class="token function">usermod</span> <span class="token parameter variable">-l</span> dee orangepi<span class="token comment">#修改组</span><span class="token function">groupmod</span> <span class="token parameter variable">-n</span> dee orangepi<span class="token comment">#把原来 orangepi 目录改掉</span><span class="token function">mv</span> /home/ornagepi /home/dee<span class="token comment">#把这目录设置成 orangepi 用户的 home 目录</span><span class="token function">usermod</span> <span class="token parameter variable">-d</span> /home/orangepi orangepi<span class="token comment">#查看 Linux 中所有用户</span><span class="token function">cat</span> /etc/passwd<span class="token comment">#查看 Linux 中添加了多少用户</span><span class="token function">cat</span> /etc/passwd<span class="token operator">|</span><span class="token function">grep</span> <span class="token parameter variable">-v</span> nologin<span class="token operator">|</span><span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token function">halt</span><span class="token operator">|</span><span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token function">shutdown</span><span class="token operator">|</span>awk-F<span class="token string">":"</span> <span class="token string">'&#123; print $1"|"$3"|"$4 &#125;'</span><span class="token operator">|</span><span class="token function">more</span><span class="token comment">#查看 Linux 中所有组</span><span class="token function">cat</span> /etc/group<span class="token comment">#删除 Linux 某个用户</span><span class="token function">userdel</span> <span class="token operator">&lt;</span>用户名<span class="token operator">></span><span class="token comment">#删除linux中某个用户所有信息</span><span class="token function">userdel</span> <span class="token parameter variable">-r</span> <span class="token operator">&lt;</span>用户名<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>设置时区</strong></p><p><code>sudo dpkg-reconfigure tzdata</code> 选择Asia然后shanghai即可</p><h3 id="常用-apt-命令">常用 apt 命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update <span class="token comment">#列出所有可更新的软件清单命令</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token operator">&lt;</span>package_name<span class="token operator">></span> <span class="token comment">#安装指定的软件命令</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token operator">&lt;</span>package_<span class="token operator"><span class="token file-descriptor important">1</span>></span> <span class="token operator">&lt;</span>package_<span class="token operator"><span class="token file-descriptor important">2</span>></span> <span class="token operator">&lt;</span>package_<span class="token operator"><span class="token file-descriptor important">3</span>></span> <span class="token comment">#安装多个软件包</span><span class="token function">sudo</span> <span class="token function">apt</span> update <span class="token operator">&lt;</span>package_name<span class="token operator">></span> <span class="token comment">#更新指定的软件命令</span><span class="token function">sudo</span> <span class="token function">apt</span> remove <span class="token operator">&lt;</span>package_name<span class="token operator">></span> <span class="token comment">#删除软件包命令</span><span class="token function">sudo</span> <span class="token function">apt</span> autoremove <span class="token comment">#清理不再使用的依赖和库文件</span><span class="token function">sudo</span> <span class="token function">apt</span> purge <span class="token operator">&lt;</span>package_name<span class="token operator">></span> <span class="token comment">#移除软件包及配置文件</span><span class="token function">sudo</span> <span class="token function">apt</span> search <span class="token operator">&lt;</span>keyword<span class="token operator">></span> <span class="token comment">#查找软件包命令</span><span class="token function">apt</span> list <span class="token parameter variable">--installed</span> <span class="token comment">#列出所有已安装的包</span><span class="token function">apt</span> list --all-versions <span class="token comment">#列出所有已安装的包的版本信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常用防火墙命令">常用防火墙命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> ufw <span class="token comment">#安装防火墙</span><span class="token function">sudo</span> ufw status <span class="token comment">#查看防火墙状态</span><span class="token function">sudo</span> ufw <span class="token builtin class-name">enable</span> <span class="token comment">#开启防火墙</span><span class="token function">sudo</span> ufw disable <span class="token comment">#关闭防火墙</span><span class="token function">sudo</span> ufw allow <span class="token number">80</span> <span class="token comment">#允许外部访问80端口, 协议包含 tcp 和 udp</span><span class="token function">sudo</span> ufw allow <span class="token number">80</span>/tcp <span class="token comment">#允许其它主机使用 tcp 协议访问本机 80 端口</span><span class="token function">sudo</span> ufw delete allow <span class="token number">80</span> <span class="token comment">#禁止外部访问80 端口</span><span class="token function">sudo</span> ufw allow from <span class="token number">192.168</span>.1.1 <span class="token comment">#允许此IP访问所有的本机端口</span><span class="token function">sudo</span> ufw deny smtp <span class="token comment">#禁止外部访问smtp服务</span><span class="token function">sudo</span> ufw reject out smtp <span class="token comment">#禁止访问外部smtp端口，不告知“被防火墙阻止”</span><span class="token function">sudo</span> ufw deny out to <span class="token number">192.168</span>.1.1 <span class="token comment">#禁止本机 192.168.1.1 对外访问，告知“被防火墙阻止”</span><span class="token function">sudo</span> ufw delete allow smtp <span class="token comment">#删除上面建立的某条规则</span><span class="token function">sudo</span> ufw delete deny <span class="token number">80</span>/tcp <span class="token comment">#要删除规则，只要在命令中加入delete就行了</span><span class="token comment">###可以允许所有RFC1918网络（局域网/无线局域网的）访问这个主机（/8,/16,/12是一种网络分级）</span><span class="token function">sudo</span> ufw allow from <span class="token number">10.0</span>.0.0/8<span class="token function">sudo</span> ufw allow from <span class="token number">172.16</span>.0.0/12<span class="token function">sudo</span> ufw allow from <span class="token number">192.168</span>.0.0/16<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常用端口命令">常用端口命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">netstat</span> -ntulp<span class="token operator">|</span><span class="token function">grep</span> <span class="token operator">&lt;</span>应用名<span class="token operator">></span> <span class="token comment">#注意要加sudo</span><span class="token function">sudo</span> <span class="token function">lsof</span> -i:<span class="token operator">&lt;</span>端口号<span class="token operator">></span> <span class="token comment">#注意要加sudo</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="软件及服务">软件及服务</h2><h3 id="JDK">JDK</h3><p><strong>安装 OpenJDK 8</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> openjdk-8-jdk <span class="token parameter variable">-y</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通过检查 Java 版本，来验证安装过程：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">java</span> <span class="token parameter variable">-version</span><span class="token comment">##### 控制台 ####</span>openjdk version <span class="token string">"1.8.0_382"</span>OpenJDK Runtime Environment <span class="token punctuation">(</span>build <span class="token number">1.8</span>.0_382-8u382-ga-1~20.04.1-b05<span class="token punctuation">)</span>OpenJDK <span class="token number">64</span>-Bit Server VM <span class="token punctuation">(</span>build <span class="token number">25.382</span>-b05, mixed mode<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>安装OpenJDK 11</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> openjdk-11-jdk <span class="token parameter variable">-y</span><span class="token comment">##### 控制台 ####</span>openjdk version <span class="token string">"11.0.20.1"</span> <span class="token number">2023</span>-08-24OpenJDK Runtime Environment <span class="token punctuation">(</span>build <span class="token number">11.0</span>.20.1+1-post-Ubuntu-0ubuntu120.04<span class="token punctuation">)</span>OpenJDK <span class="token number">64</span>-Bit Server VM <span class="token punctuation">(</span>build <span class="token number">11.0</span>.20.1+1-post-Ubuntu-0ubuntu120.04, mixed mode<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>设置默认版本</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> update-alternatives <span class="token parameter variable">--config</span> <span class="token function">java</span> <span class="token comment">#同时也可查看 Java 安装路径</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>JAVA_HOME 环境变量</strong></p><p>java 安装路径如下:</p><ul><li>OpenJDK 11 is located at <code>/usr/lib/jvm/java-11-openjdk-amd64/bin/java</code></li><li>OpenJDK 8 is located at <code>/usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java</code></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#环境变量位置</span><span class="token function">sudo</span> <span class="token function">vim</span> /etc/environment<span class="token comment">#末尾添加</span><span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span><span class="token string">"/usr/lib/jvm/java-8-openjdk-arm64/jre/bin/java"</span><span class="token comment">#立即生效</span><span class="token builtin class-name">source</span> /etc/environment<span class="token comment">#校验</span><span class="token builtin class-name">echo</span> <span class="token variable">$JAVA_HOME</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> remove openjdk-11-jdk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="MySql">MySql</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看</span><span class="token function">sudo</span> <span class="token function">apt</span> search mysql<span class="token comment">#安装</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> mysql-server <span class="token parameter variable">-y</span><span class="token comment">#查看服务</span><span class="token function">sudo</span> systemctl status mysql<span class="token comment">#查看版本</span>mysql <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="安全配置向导说明">安全配置向导说明</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> mysql_secure_installation<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="配置远程访问">配置远程访问</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#允许远程访问</span><span class="token builtin class-name">cd</span> /etc/mysql/mysql.conf.d<span class="token function">sudo</span> <span class="token function">vim</span> mysqld.cnf <span class="token comment">#此处不要修改权限, 否则 mysql 无法读取配置</span><span class="token comment"># 重启mysql</span><span class="token function">sudo</span> systemctl restart mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./../oranpi-start/image-20240113105048034.png" alt=""></p><h4 id="登录">登录</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#登录</span><span class="token function">sudo</span> mysql<span class="token function">sudo</span> mysql <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span> <span class="token comment">#接着输入密码</span><span class="token comment">#更改 root 密码</span>ALTER <span class="token environment constant">USER</span> <span class="token string">'root'</span>@<span class="token string">'localhost'</span> IDENTIFIED WITH mysql_native_password BY <span class="token string">'sad_mysql'</span><span class="token punctuation">;</span><span class="token comment">#### 推荐新建用户 (通过 SELECT @@VERSION; 查看版本: mysql版本8.0.13之后, 新用户授权方式发生了变化</span>create user <span class="token string">'saddyfire'</span>@<span class="token string">'%'</span> identified by  <span class="token string">'sad_mysql'</span><span class="token punctuation">;</span>grant all privileges on *.* to <span class="token string">'saddyfire'</span>@<span class="token string">'%'</span> with grant option<span class="token punctuation">;</span>flush privileges<span class="token punctuation">;</span><span class="token comment">#### 如果出现了策略 ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</span>show variables like <span class="token string">'validate_password%'</span><span class="token punctuation">;</span><span class="token builtin class-name">set</span> global <span class="token assign-left variable">validate_password.policy</span><span class="token operator">=</span>LOW<span class="token punctuation">;</span><span class="token builtin class-name">set</span> global <span class="token assign-left variable">validate_password.length</span><span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span>flush privileges<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="卸载">卸载</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看MySQL的依赖项</span>dpkg --list<span class="token operator">|</span><span class="token function">grep</span> mysql<span class="token comment">#删除</span><span class="token function">sudo</span> <span class="token function">apt</span> remove mysql-*<span class="token comment">#继续查看</span>dpkg --list<span class="token operator">|</span><span class="token function">grep</span> mysql<span class="token comment">#继续删除</span><span class="token function">sudo</span> <span class="token function">apt</span> autoremove <span class="token parameter variable">--purge</span> mysql-server-8.0 mysql-common<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Redis">Redis</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> redis-server <span class="token parameter variable">-y</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>配置文件及日志</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /etc/redis<span class="token function">sudo</span> <span class="token function">vim</span> /etc/redis/redis.conf<span class="token comment">#(定位到 bind 端口绑定) >>> 注释# bind 127.0.0.1 ::1</span><span class="token comment">#(定位到 requirepass 并修改密码)</span><span class="token comment">#查看日志</span><span class="token builtin class-name">cd</span> /var/log/redis<span class="token comment">#中间会遇到文件夹及文件权限问题</span><span class="token function">chmod</span> <span class="token number">755</span> *<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Nginx">Nginx</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> nginx-full <span class="token parameter variable">-y</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>配置文件及日志</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#配置文件夹</span><span class="token builtin class-name">cd</span> /etc/nginx<span class="token comment">#日志</span><span class="token builtin class-name">cd</span> /var/log/nginx/<span class="token comment">#中间会遇到文件夹及文件权限问题</span><span class="token function">chmod</span> <span class="token number">755</span> *<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="局域网共享">局域网共享</h3><p><strong>安装及配置</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#安装Samba</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> samba <span class="token parameter variable">-y</span><span class="token comment">#新增共享目录</span><span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /dee/sharedir<span class="token comment">#添加用户</span><span class="token function">sudo</span> <span class="token function">useradd</span> dee <span class="token parameter variable">-s</span> /usr/sbin/nologin<span class="token comment">#修改权限</span><span class="token function">sudo</span> <span class="token function">chown</span> dee:dee /dee/sharedir<span class="token comment">#将用户smbuser添加到samba的smbpasswd file中(即在samba服务中注册该账户)</span><span class="token function">sudo</span> smbpasswd <span class="token parameter variable">-a</span> dee<span class="token comment">#pass=dee</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>配置文件</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /etc/samba/<span class="token function">sudo</span> <span class="token function">vim</span> /etc/samba/smb.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>shift g</code> 在末尾添加</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">## 注意: 后面的注释要输出</span><span class="token punctuation">[</span>secret<span class="token punctuation">]</span>    <span class="token comment">#共享目录名，访问时的展示名</span>    comment <span class="token operator">=</span> Secret File       <span class="token comment">#该共享目录的描述</span>    path <span class="token operator">=</span> /dee/sharedir  <span class="token comment">#访问的实际路径,前面设置的</span>    valid <span class="token function">users</span> <span class="token operator">=</span> dee       <span class="token comment">#设置可访问的用户，此处为前面添加的用户smbuser（注意users不要拼写错误）</span>    guest ok <span class="token operator">=</span> no               <span class="token comment">#是否允许访客，否</span>    writable <span class="token operator">=</span> <span class="token function">yes</span>              <span class="token comment">#可写，是</span>    browsable <span class="token operator">=</span> <span class="token function">yes</span>             <span class="token comment">#可浏览，是</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>重启生效</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl restart smbd<span class="token function">sudo</span> systemctl restart nmbd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>匿名方式类似</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 打开文件</span><span class="token function">sudo</span> <span class="token function">vim</span> /etc/samba/smb.conf<span class="token comment"># 尾部写入以下内容并保存</span><span class="token punctuation">[</span>share<span class="token punctuation">]</span>     comment <span class="token operator">=</span> Ubuntu File Server     path <span class="token operator">=</span> /dee/shareAll     browsable <span class="token operator">=</span> <span class="token function">yes</span>     guest ok <span class="token operator">=</span> <span class="token function">yes</span>     <span class="token builtin class-name">read</span> only <span class="token operator">=</span> no<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>附加命令</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看samba用户列表</span><span class="token function">sudo</span> pdbedit <span class="token parameter variable">-L</span><span class="token comment">#删除samba服务中的某个用户</span><span class="token function">sudo</span> smbpasswd -x<span class="token operator">&lt;</span>用户名<span class="token operator">></span><span class="token comment"># 对samba用户进行管理（用户已经在系统中创建）</span><span class="token function">sudo</span> smbpasswd <span class="token parameter variable">-h</span>  <span class="token comment">#查看支持的命令列表</span><span class="token comment"># 异常时可查看日志情况</span><span class="token function">cat</span> /var/log/samba/log.%m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自动化部署">自动化部署</h2><h3 id="wifi">wifi</h3><p><code>vim inti-wifi.sh</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token comment">## 如果出现 -bash: /bin/bash^M: bad interpreter: No such file or directory</span><span class="token comment">## vim或者vi的命令模式下, 输入命令 set ff=unix 即可解决换行问题</span><span class="token comment">#校验是否为合法ip格式</span><span class="token keyword">function</span> <span class="token function-name function">validate_ip</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable">ip</span><span class="token operator">=</span><span class="token variable">$1</span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable">stat</span><span class="token operator">=</span><span class="token number">1</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$ip</span> <span class="token operator">=~</span> ^<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span>-9<span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1,3</span><span class="token punctuation">&#125;</span><span class="token punctuation">\</span>.<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token number">0</span>-9<span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1,3</span><span class="token punctuation">&#125;</span>$ <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token assign-left variable">OIFS</span><span class="token operator">=</span><span class="token environment constant">$IFS</span>        <span class="token assign-left variable"><span class="token environment constant">IFS</span></span><span class="token operator">=</span><span class="token string">'.'</span>        <span class="token assign-left variable">ip</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token variable">$ip</span><span class="token punctuation">)</span>        <span class="token assign-left variable"><span class="token environment constant">IFS</span></span><span class="token operator">=</span><span class="token variable">$OIFS</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$&#123;ip<span class="token punctuation">[</span>0<span class="token punctuation">]</span>&#125;</span> <span class="token parameter variable">-le</span> <span class="token number">255</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$&#123;ip<span class="token punctuation">[</span>1<span class="token punctuation">]</span>&#125;</span> <span class="token parameter variable">-le</span> <span class="token number">255</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$&#123;ip<span class="token punctuation">[</span>2<span class="token punctuation">]</span>&#125;</span> <span class="token parameter variable">-le</span> <span class="token number">255</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$&#123;ip<span class="token punctuation">[</span>3<span class="token punctuation">]</span>&#125;</span> <span class="token parameter variable">-le</span> <span class="token number">255</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>            <span class="token assign-left variable">stat</span><span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">fi</span>    <span class="token keyword">fi</span>    <span class="token builtin class-name">return</span> <span class="token variable">$stat</span><span class="token punctuation">&#125;</span><span class="token comment">#设置静态ip</span><span class="token keyword">function</span> <span class="token function-name function">set_stat_ip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token builtin class-name">local</span> <span class="token assign-left variable">gate_way</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$3</span>"</span><span class="token keyword">if</span> <span class="token operator">!</span> validate_ip <span class="token string">"<span class="token variable">$3</span>"</span> <span class="token punctuation">;</span> <span class="token keyword">then</span><span class="token assign-left variable">gate_way</span><span class="token operator">=</span><span class="token string">"192.168.1.1"</span><span class="token keyword">fi</span>nmcli con mod <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token punctuation">\</span>ipv4.addresses <span class="token string">"<span class="token variable">$2</span>"</span> <span class="token punctuation">\</span>ipv4.gateway <span class="token string">"<span class="token variable">$gate_way</span>"</span> <span class="token punctuation">\</span>ipv4.dns <span class="token string">"8.8.8.8"</span> <span class="token punctuation">\</span>ipv4.method <span class="token string">"manual"</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$#</span> <span class="token parameter variable">-eq</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"使用说明："</span>    <span class="token builtin class-name">echo</span> <span class="token string">"    ./init-wifi &lt;wifi名> &lt;密码> &lt;静态ip> [网关ip]"</span>    <span class="token builtin class-name">exit</span> <span class="token number">0</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token variable">$1</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span><span class="token builtin class-name">echo</span> <span class="token string">"wifi名不能为空"</span><span class="token builtin class-name">exit</span> <span class="token number">1</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token variable">$2</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span><span class="token builtin class-name">echo</span> <span class="token string">"wifi密码不能为空"</span><span class="token builtin class-name">exit</span> <span class="token number">1</span><span class="token keyword">fi</span><span class="token comment">#校验静态ip</span><span class="token keyword">if</span> <span class="token operator">!</span> validate_ip <span class="token string">"<span class="token variable">$3</span>"</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$3</span>"</span>  <span class="token builtin class-name">echo</span> <span class="token string">"静态ip不合法"</span>  <span class="token builtin class-name">exit</span> <span class="token number">1</span><span class="token keyword">fi</span><span class="token assign-left variable">conn_result</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>nmcli dev wifi connect $1 password $2<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$conn_result</span> <span class="token operator">=~</span> <span class="token string">"successfully"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span><span class="token builtin class-name">echo</span> <span class="token string">">>> wifi连接成功, 正在修改静态ip &lt;&lt;&lt;"</span>set_stat_ip <span class="token variable">$1</span> <span class="token variable">$3</span> <span class="token variable">$4</span><span class="token builtin class-name">echo</span> <span class="token string">">>> 修改完成, 请重启计算机 &lt;&lt;&lt;"</span><span class="token builtin class-name">exit</span> <span class="token number">0</span><span class="token keyword">else</span><span class="token builtin class-name">echo</span> <span class="token string">"连接失败"</span><span class="token builtin class-name">exit</span> <span class="token number">1</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基础应用安装">基础应用安装</h3><p><code>vim init-prog.sh</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token keyword">while</span> <span class="token builtin class-name">getopts</span> <span class="token string">":r:"</span> opt<span class="token punctuation">;</span> <span class="token keyword">do</span>  <span class="token keyword">case</span> <span class="token variable">$opt</span> <span class="token keyword">in</span>    r<span class="token punctuation">)</span>      <span class="token assign-left variable">redis_pass</span><span class="token operator">=</span><span class="token variable">$OPTARG</span>      <span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token punctuation">\</span>?<span class="token punctuation">)</span>      <span class="token builtin class-name">echo</span> <span class="token string">"参数错误 > 使用说明："</span>      <span class="token builtin class-name">echo</span> <span class="token string">"./init-prog.sh -r &lt;redis密码>"</span>      <span class="token builtin class-name">exit</span> <span class="token number">0</span>      <span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token keyword">esac</span><span class="token keyword">done</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$#</span> <span class="token parameter variable">-eq</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"使用说明："</span>    <span class="token builtin class-name">echo</span> <span class="token string">"./init-prog.sh -r &lt;redis密码>"</span>    <span class="token builtin class-name">exit</span> <span class="token number">0</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token variable">$redis_pass</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token assign-left variable">redis_pass</span><span class="token operator">=</span><span class="token string">'123456'</span>  <span class="token builtin class-name">echo</span> <span class="token string">"redis默认密码: <span class="token variable">$redis_pass</span>"</span><span class="token keyword">fi</span><span class="token builtin class-name">echo</span> <span class="token string">">>> 开始安装 telnet &lt;&lt;&lt;"</span> <span class="token function">nohup</span> <span class="token function">apt</span> <span class="token function">install</span> telnet <span class="token parameter variable">-y</span> <span class="token operator">>></span> init-program.log <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span><span class="token builtin class-name">echo</span> <span class="token string">">>> 开始安装 Redis &lt;&lt;&lt;"</span><span class="token function">nohup</span> <span class="token function">apt</span> <span class="token function">install</span> redis-server <span class="token parameter variable">-y</span> <span class="token operator">>></span> init-program.log <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/^bind 127.0.0.1 ::1/#bind 127.0.0.1 ::1/g'</span> /etc/redis/redis.conf<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">"s/# requirepass foobared/requirepass <span class="token variable">$1</span>/g"</span> /etc/redis/redis.conf<span class="token builtin class-name">echo</span> <span class="token string">"redis安装并配置完成,密码为 <span class="token variable">$1</span> "</span><span class="token builtin class-name">echo</span> <span class="token string">">>> 开始安装 Nginx &lt;&lt;&lt;"</span><span class="token function">nohup</span> <span class="token function">apt</span> <span class="token function">install</span> nginx-full <span class="token parameter variable">-y</span> <span class="token operator">>></span> init-program.log <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span><span class="token builtin class-name">echo</span> <span class="token string">">>> 开始安装 JDK8 &lt;&lt;&lt;"</span><span class="token function">nohup</span> <span class="token function">apt</span> <span class="token function">install</span> openjdk-8-jdk <span class="token parameter variable">-y</span> <span class="token operator">>></span> init-program.log <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> $<span class="token builtin class-name">echo</span> <span class="token string">"添加 JAVA 环境变量"</span><span class="token builtin class-name">echo</span> <span class="token string">'JAVA_HOME8="/usr/lib/jvm/java-8-openjdk-arm64/jre/bin/java"'</span> <span class="token operator">>></span> /etc/environment<span class="token builtin class-name">echo</span> <span class="token string">'JAVA_HOME=$JAVA_HOME8'</span> <span class="token operator">>></span> /etc/profile<span class="token builtin class-name">source</span> /etc/environment<span class="token builtin class-name">echo</span> <span class="token string">'请输入 echo $JAVA_HOME 用以校验'</span><span class="token builtin class-name">echo</span> <span class="token string">">>> 开始安装 mysql &lt;&lt;&lt;"</span> <span class="token function">nohup</span> <span class="token function">apt</span> <span class="token function">install</span> mysql-server <span class="token parameter variable">-y</span> <span class="token operator">>></span> init-mysql.log <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/^bind-address/#bind-address/g'</span> /etc/mysql/mysql.conf.d/mysqld.cnfmysql <span class="token operator">&lt;&lt;</span> <span class="token string">EOFALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'dee_mysql';create user 'saddyfire'@'%' identified by  'dee_mysql';grant all privileges on *.* to 'saddyfire'@'%' with grant option;flush privileges;exitEOF</span><span class="token builtin class-name">echo</span> <span class="token string">">>> mysql 安装完成&lt;&lt;&lt;"</span><span class="token builtin class-name">echo</span> <span class="token string">">>> 账号: saddyfire 密码: dee_mysql&lt;&lt;&lt;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> OrangePi </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM-Tuning-02-JVM监控及诊断-工具篇</title>
      <link href="/2024/01/07/jvm-tuning2/"/>
      <url>/2024/01/07/jvm-tuning2/</url>
      
        <content type="html"><![CDATA[<h1>JVM监控及诊断-工具篇</h1><h2 id="01-工具概述">01-工具概述</h2><p>使用上一章命令行工具或组合能帮您获取目标]aVa应用性能相关的基础信息，但它们存在下列局限：</p><ol><li>无法获取方法级别的分析数据，如方法间的调用关系、各方法的调用次数和调用时间<br>等（这对定位应用性能瓶颈至关重要）。</li><li>要求用户登录到目标Java应用所在的宿主机上，使用起来不是很方便。</li><li>分析数据通过终端输出，结果展示不够直观。</li></ol><p>为此，JDK 提供了一些内存泄漏的分析工具，如 jconsole, jvisualvm 等，用于辅助开发人员定位问题，但是这些工具很多时候并不足以满足快速定位的需求。所以这里我们介绍的工具相对多一些、丰富一些。</p><p><strong>图形化综合诊断工具</strong></p><ul><li><p>JDK自带的工具</p><ul><li>jconsole: JDK 自带的可视化监控工具。查看Java应用程序的运行概况、监控堆信。<br>息、永久区（或元空间）使用情况、类加载情况等。</li><li>Visual VM: Visual VM 是一个工具，它提供了一个可视界面，用于查看 Java 虚拟机上运行的基于Java技术的应用程序的详细信息。</li><li>JMC: Java Mission Control, 内置 Java Flight Recorder。能够以极低的性能开销收集 Java 虚拟机的性能数据。</li></ul></li><li><p>第三方工具</p><ul><li><p>MAT: MAT(Memory Analyzer Tool) 是基于 Eclipse 的内存分析工具，是一个快速、功能丰富的 Java heap 分析工具，它可以帮助我们查找内存泄漏和减少内存消耗。</p><blockquote><p>Eclipse的插件形式</p></blockquote></li><li><p>JProfiler: 商业软件，需要付费。功能强大。</p><blockquote><p>与 VisualVM 类似</p></blockquote></li><li><p>Arthas: Alibaba 开源的 Java 诊断工具。</p></li><li><p>Btrace: Java 运行时追踪工具. 可以在不停机的情况下, 跟踪指定的方法调用、构造函数调用和系统内存等信息。</p></li></ul></li></ul><h2 id="02-JConsole">02-JConsole</h2><p><img src="./../jvm-tuning2/image-20240108221409666.png" alt="概览"></p><p><img src="./../jvm-tuning2/image-20240108221430344.png" alt="内存"></p><p><img src="./../jvm-tuning2/image-20240108221631164.png" alt="检测死锁"></p><p><img src="./../jvm-tuning2/image-20240108221658907.png" alt="VM 概要"></p><h2 id="03-Visual-VM">03-Visual VM</h2><h3 id="插件的安装">插件的安装</h3><ul><li>Visual VM 的一大特点是支持插件扩展，并且插件安装非常方便。我们既可以通过离线下载插件文件 *.nbm, 然后在 Plugin 对话框的己下载页面下，添加己下载的插件。也可以在可用插件页面下，在线安装插件。（这里建议安装上：VisualGC)<br>插件地址：<a href="https://visualvm.github.io/pluginscenters.html">https://visualvm.github.io/pluginscenters.html</a></li></ul><h3 id="1-生成-读取堆内存快照">1-生成/读取堆内存快照</h3><h2 id="04-Eclipse-MAT">04-Eclipse MAT</h2><h3 id="获取堆dump文件">获取堆dump文件</h3><p>MAT可以分析heap dump文件。在进行内存分析时，只要获得了反映当前设备内存映像的nprof文件，通过MAT打开就可以直观地看到当前的内存信息。<br>一般说来，这些内存信息包含：</p><ul><li>所有的对象信息，包括对象实例、成员变量、存储于栈中的基本类型值和存储于堆中的其他对象的引用值。</li><li>所有的类信息，包括classloader、类名称、父类、静态变量等</li><li>GCRoot 到所有的这些对象的引用路径</li><li>线程信息，包括线程的调用栈及此线程的线程局部变量(TLS)</li></ul><p><strong>获取堆dump文件</strong></p><ol><li><p>通过前一章介绍的jmap工具生成，可以生成任意一个java进程的dump文件：</p></li><li><p>通过配置JVM参数生成。</p><ul><li>选项 <code>-XX:+HeapDumpOnOutOfMemoryError</code> 或 <code>-XX:+HeapDumpBeforeFullGC</code></li><li>选项 <code>-XX:HeapDumpPath</code> 所代表的含义就是当程序出现 OutofMemory 时，将会在相应的目录下生成一份 dump 文件。如果不指定选项 <code>-XX:HeapDumpPath</code> 则在当前目录下生成 dump 文件。</li></ul></li></ol><p>对比：考虑到生产环境中几乎不可能在线对其进行分析，大都是采用离线分析，因此使用 jmap + MAT 工具是最常见的组合。</p><ol start="3"><li><p>使用 VisualVM 可以导出堆 ump 文件。</p></li><li><p>使用 MAT 即可打开一个已有的堆快照, 也可以通过 MAT 直接从活动 Java 程序中导出堆快照。</p><p>该功能将借助 jps 列出当前正在运行的 Java 进程, 以供选择并获取快照。</p></li></ol><h3 id="分析堆dump文件">分析堆dump文件</h3><h4 id="概述">概述</h4><p><img src="./../jvm-tuning2/image-20240114213029332.png" alt=""></p><p><img src="./../jvm-tuning2/image-20240115130520402.png" alt="image-20240115130520402"></p><h4 id="Histogram">Histogram</h4><p><img src="./../jvm-tuning2/image-20240114215411645.png" alt=""></p><h4 id="thread-overview">thread_overview</h4><p><img src="./../jvm-tuning2/image-20240114220539571.png" alt="获得湘湖引用的关系"></p><h4 id="深堆与浅堆">深堆与浅堆</h4><p><strong>浅堆(Shallow Heap)</strong> 是指一个对象所消耗的内存。在 32 位系统中，一个对象引用会占据 4 个字节，一个 int 类型会占据 4 个字节，long 型变量会占据 8 个字节，每个对象头需要占用 8 个字节。根据堆快照格式不同，对象的大小可能会向 8 字节进行对齐。</p><p>以 String 为例：2 个 int 值共占 8 字节，对象引用占用 4 字节，对象头 8 字节，合计 20 字节，向 8 字节对齐，故占 24 字节。(jdk7中)</p><table><thead><tr><th>String对象空间</th><th></th><th></th></tr></thead><tbody><tr><td>int</td><td>hash32</td><td>0</td></tr><tr><td>int</td><td>hash</td><td>0</td></tr><tr><td>ref</td><td>value</td><td>C:\Users\Administrat</td></tr></tbody></table><p>这 24 字节为 String 对象的浅堆大小. 它与 String 的 value 实际取值无关, 无论字符串长度如何, 浅堆大小始终是 24 字节</p><p><strong>保留集(Retained Set):</strong><br>对象 A 的保留集指当对象 A 被拉垃圾回收后，可以被释放的所有的对象集合（包括对象 A 本身），即对象 A 的保留集可以被认为是<strong>只能通过</strong>对象 A 被直接或间接访问到的所有对象的集合。通俗地说，就是指仅被对象A所持有的对象的集合。</p><img src="./../jvm-tuning2/image-20240114222017532.png" style="zoom: 50%;" /><p><strong>深堆(Retained Heap):</strong><br>深堆是指对象的保留集中所有的对象的浅堆大小之和。</p><p>注意：浅堆指对象本身占用的内存，不包括其内部引用对象的大小。一个对象的深堆指只能通过该对象访问到的（直接或间接）所有对象的浅堆之和，即对象被回收后，可以释放的真实空间。</p><p><strong>对象的实际大小</strong></p><p>另外一个常用的概念是对象的实际大小。这里，对象的实际大小定义为一个对象所能触及的所有对象的浅堆大小之和，也就是通常意义上我们说的对象大小。与深堆相比，似乎这个在日常开发中更为直观和被人接受，<strong>但实际上，这个概念和垃圾回收无关。</strong></p><p>下图显示了一个简单的对象引用关系图，对象 A 引用了 C 和 D, 对象 B 引用了 C 和 E。那么对象 A 的浅堆大小只是 A 本身，不含 C 和 D,而 A 的实际大小为A、C、D三者之和。而 A 的深堆大小为 A 与 D 之和，由于对象 C 还可以通过对象 B 访问到，因此不在对象 A 的深堆范围内。</p><p><img src="./../jvm-tuning2/image-20240114222337156.png" alt=""></p><blockquote><p>A 的浅堆大小只有它自己, A 的深堆大小则是 A + D, A 对象的实际大小是 A + C + D</p></blockquote><p><strong>看图理解 Retained Size</strong></p><p><img src="./../jvm-tuning2/image-20240114222649031.png" alt=""></p><blockquote><p>上图中, GC Roots 直接引用了 A 和 B 两个对象</p><p>A 对象的 Retained Size=A 对象的 Shallow Size</p><p>B 对象的 Retained Size=B 对象的 Shallow Size + C 对象的 Shallow Size</p><p>这里部包括 D 对象, 因为 D 对象被 GC Roots 直接引用</p><p>如果 GC Roots 不引用 D 对象呢?</p></blockquote><p><img src="./../jvm-tuning2/image-20240114222937490.png" alt="此时B的深堆和实际大小是一样的"></p><p><strong>案例分析 StudentTrace</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//-XX:+HeapDumpBeforeFullGC -XX:HeapDumpPath=d:\student.hprof</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentTrace</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WebPage</span><span class="token punctuation">></span></span> webpages <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WebPage</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">createWebPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">WebPage</span> wp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            wp<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"http://www."</span> <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            wp<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            webpages<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>wp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">createWebPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建了100个网页</span>        <span class="token comment">//创建3个学生对象</span>        <span class="token class-name">Student</span> st3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Student</span> st5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"Jerry"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Student</span> st7 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">"Lily"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> webpages<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> st3<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                st3<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span>webpages<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> st5<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                st5<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span>webpages<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> st7<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                st7<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span>webpages<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        webpages<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WebPage</span><span class="token punctuation">></span></span> history <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WebPage</span><span class="token punctuation">></span></span> <span class="token function">getHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> history<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHistory</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WebPage</span><span class="token punctuation">></span></span> history<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>history <span class="token operator">=</span> history<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">WebPage</span> wp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>wp <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            history<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>wp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">WebPage</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> url<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> url<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> content<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setContent</span><span class="token punctuation">(</span><span class="token class-name">String</span> content<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> content<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行后用 MAT 打开, 打开 thread_over</p><p><img src="./../jvm-tuning2/image-20240115101947087.png" alt=""></p><p><img src="./../jvm-tuning2/image-20240115110940270.png" alt=""></p><blockquote><p>以 Lily 为例, elementData[ ] 中总共有15个 WebPage 对象(此处不能只看数组长度, 这里是数组长度恰好等于元素个数)</p><p>13个152 字节, 2个144字节, 13 * 152 + 2 * 144 = 2264 &lt; 1288</p><p>是因为有一些 WebPage 是它们共有的, 因此不能算作 Lily 的深堆</p><p>能被 7 整除, 且能被 3 整除, 以及能被 5整除的数: 0, 21, 35, 42, 63, 70, 84. 共 7 个. 即 6 * 152 + 1 * 144 = 1056</p><p>2264 - 1056 = 1208 = 1288 - 80字节! (即: 还可以多回收 80 个字节)</p><p>这 80 个字节是什么??</p><p>即 elementData 对象本身的浅堆:</p><ul><li>对象头 = 12个字节(默认采用指针压缩, 没有则是16字节) + 4(数组长度)</li><li>数组本身4个字节数</li><li>数组引用 = 15个elementData的元素 * 4 = 60字节</li></ul><p><strong>补充: 为什么会有 152 字节和 144 字节:</strong></p><p>因为URL和content会存在两种情况:</p><ul><li><p>URL: “<a href="http://www.7.com">http://www.7.com</a>”  content: “7”</p><ul><li><p>URL长度为 16, 底层的 char 数组的占用空间为([ ] 方括号里面整个都属于对象头, 分开写方便理解)</p><p>[普通对象头(12) + 数组长度(4)] + 16个字符(32) = 48字节, 符合 8 字节对齐</p><p>同理 content 占用 [普通对象头(12) + 数组长度(4)] + 一个字符(2) = 18 字节, 八字节对齐=24字节</p></li></ul></li><li><p>URL: “<a href="http://www.14.com">http://www.14.com</a>”  content: “14”</p><ul><li><p>URL长度为17, 底层的 char 数组的占用空间为</p><p>[普通对象头(12) + 数组长度(4)] + 17个字符(34) = 50字节, 不符合8字节对齐, 对齐为 56</p><p>同理 content 占用 [普通对象头(12) + 数组长度(4)] + 两个字符(4) = 20 字节, 八字节对齐=24字节</p></li></ul></li></ul><p>因此第二种比第一种多了 8 字节, 所以是 152 和 144 (为什么总大小是 152 而不是 72 是因为我们只计算了 String 底层的 char 数组的区别, 没有计算各变量本身的浅堆, 因为结构都相同, 所以差别就差在内容的占用上)</p></blockquote><h4 id="支配树">支配树</h4><p>(Dominator Tree)</p><p>支配树的概念源自图论。</p><p>MAT 提供了一个称为支配树(Dominator Tree)的对象图。支配树体现了对象实例间的支配关系。在对象引用图中，所有指向对象B的路径都经过对象 A, 则认为<strong>对象 A 支配对象 B</strong>。如果对象 A 是离对象 B 最近的一个支配对象，则认为对象 A 为对象 B 的<strong>直接支配者</strong>。支配树是基于对象间的引用图所建立的，它有以下基本性质：</p><ul><li>对象A的子树（所有被对象A支配的对象集合）表示对象A的保留集(retained set),即深堆。</li><li>如果对象A支配对象B,那么对象A的直接支配者也支配对象B。</li><li>支配树的边与对象引用图的边不直接对应。</li></ul><p>如下图所示：左图表示对象引用图，右图表示左图所对应的支配树。对象 A 和 B 由根对象直接支配，由于在到对象 C 的路径中，可以经过 A，也可以经过 B, 因此对象 C 的直接支配者也是根对象。对象 F 与对象 D 相互引用，因为到对象 F 的所有路径必然经过对象 D, 因此，对象 D 是对象 F 的直接支配者。而到对象 D 的所有路径中，必然经过对象 C, 即使是从对象 F 到对象 D 的引用，从根节点出发，也是经过对象 C 的，所以，对象 D 的直接支配者为对象 C。</p><p><img src="./../jvm-tuning2/image-20240115124856415.png" alt="左-引用关系 右-支配树"></p><p>同理，对象 E 支配对象 G。到达对象 H 的可以通过对象 D ,也可以通过对象 E,因此对象 D 和 E 都不能支配对象 H, 而经过对象 C 既可以到达 D 也可以到达 E, 因此对象 C 为对象 H 的直接支配者。</p><p>在 MAT 中, 单机工具栏上的对象支配树按钮, 可以打开对象支配树视图。</p><p><img src="./../jvm-tuning2/image-20240115125324965.png" alt=""></p><p>下图显示了对象支配树视图的一部分。该截图显示部分 Lily 学生的 history 队列的直接支配对象。即当 Lily 对象被回收，也会一并回收的所有对象。显然能被 3 或者 5 整除的网页不会出现在该列表中，因为它们同时被另外两名学生对象引用。</p><p><img src="./../jvm-tuning2/image-20240115125714133.png" alt=""></p><blockquote><p>通过正则搜索 Thread 后, 找到 Lily,</p><p>注意: 此处支配树中的 ArrayList 只有 8 个, 与前面的引用分析中 15-7=8 就能对上了</p></blockquote><h3 id="案例-Tomcat堆溢出分析">案例: Tomcat堆溢出分析</h3><p>Tomcat 是最常用的 Java Servlet 容器之一，同时也可以当做单独的 Web 服务器使用。Tomcat 本身使用 Java 实现，并运行于 Java 虚拟机之上。在大规模请求时，Tomcat 有可能会因为无法承受压力而发生内存溢出错误。这里根据一个被压垮的 Tomcat 的堆快照文件，来分析 Tomcat 在崩溃时的内部情况。</p><h4 id="分析过程">分析过程</h4><p><img src="./../jvm-tuning2/image-20240115132535587.png" alt=""></p><p><img src="./../jvm-tuning2/image-20240115132622706.png" alt=""></p><p><img src="./../jvm-tuning2/image-20240115132641999.png" alt=""></p><p><img src="./../jvm-tuning2/image-20240115133555411.png" alt=""></p><p>由此继续排查, 并且结合实际分析</p><h2 id="05-JProfiler">05-JProfiler</h2><h3 id="概述-2">概述</h3><ol><li><p>方法调用</p><p>对方法调用的分析可以帮助您了解应用程序正在做什么，并找到提高其性能的方法</p></li><li><p>内存分配</p><p>通过分析堆上对象、引用链和垃圾收集能帮您修复内存泄露问题，优化内存使用</p></li><li><p>线程和锁</p><p>JProfiler提供多种针对线程和锁的分析视图助您发现多线程问题</p></li><li><p>高级子系统</p><p>许多性能问题都发生在更高的语义级别上。例如，对于JDBC调用，您可能希望找出执行最慢的SQL语句。JProfiler支持对这些子系统进行集成分析</p></li></ol><h3 id="安装与配置">安装与配置</h3><h3 id="使用">使用</h3><p><strong>数据采集方式</strong></p><p>JProfier数据采集方式分为两种：Sampling(样本采集) 和 Instrumentation(重构模式)</p><ul><li>Instrumentation: 这是 JProfiler:全功能模式。在 class 加载之前，JProfier 把相关功能代码写入到需要分析的 class 的 bytecode中，对正在运行的 jvm 有一定影响。<ul><li>优点：功能强大。在此设置中，调用堆栈信息是准确的。</li><li>缺点：若要分析的 class 较多，则对应用的性能影响较大，CPU 开销可能很高（取决于 Filter 的控制)。因此使用此模式一般配合 Filter 使用，只对特定的类或包进行分析</li></ul></li><li>Sampling: 类似于样本统计，每隔一定时间(5ms)将每个线程栈中方法栈中的信息统计出来。<ul><li>优点：对 CPU 的开销非常低，对应用影响小（即使你不配置任何 Filter)</li><li>缺点：一些数据/特性不能提供（例如：方法的调用次数、执行时间）</li></ul></li></ul><blockquote><p>注：JProfiler 本身没有指出数据的采集类型，这里的采集类型是针对方法调用的采集类型。<br>因为 JProfiler 的绝大多数核心功能都依赖方法调用采集的数据，所以可以直接认为是 JProfiler 的数据采集类型。</p></blockquote><p><strong>遥感监测 Telemetries</strong></p><p><strong>内存视图 Live Memory</strong></p><p>Live memory 内存剖析：class/class instance 的相关信息。例如对象的个数，大小，对象创建的方法执行栈，对象创建的热点。</p><ul><li><p>所有对象 All Objects</p><p>显示所有加载的类的列表和在堆上分配的实例数。只有 Java1.5(JMTI) 才会显示此视图。</p></li></ul><p><img src="./../jvm-tuning2/image-20240117205945955.png" alt=""></p><ul><li><p>记录对象 Record Objects</p><p>查看特定时间段对象的分配，并记录分配的调用堆栈。</p></li><li><p>分配访问树 Allocation Call Tree<br>显示一棵请求树或者方法、类、包或对己选择类有带注释的分配信息的 J2EE 组件。</p></li><li><p>分配热点 Allocation Hot Spots</p><p>显示一个列表，包括方法、类、包或分配已选类的 J2EE 组件。你可以标注当前值并且显示差异值。对于每个热点都可以显示它的跟踪记录树。</p></li><li><p>类追踪器 Class Tracker</p><p>类跟踪视图可以包含任意数量的图表，显示选定的类和包的实例与时间。</p></li></ul><blockquote><p>分析: 内存中的对象的情况</p><ul><li>频繁创建的 Java 对象：死循环、循环次数过多(Instance Count 多, Size 也大)</li><li>存在大的对象：读取文件时，byte[ ] 应该边读边写。–&gt; 如果长时间不写出的话，导致 byte[ ] 过大存在内存泄漏</li></ul><p>注意：</p><ul><li>All Objects 后面的 Size 大小是浅堆大小</li><li>Record Objects 在判断内存泄露的时候使用，可以通过观察 Telemetries 中的 Memory，如果里面出现垃圾回收之后的内存占用逐步提高，这就有可能出现内存泄露问题，所以可以使用 Record Objects 查看，但是该分析默认不开启，毕竟占用 CPU 性能太多</li></ul></blockquote><p><strong>堆遍历 heap walker</strong></p><p><strong>cpu视图 cpu views</strong></p><p>JProfiler 提供不同的方法来记录访问树以优化性能和细节。线程或者线程组以及线程状况可以被所有的视图选择。所有的视图都可以聚集到方法、类、包或 J2EE 组件等不同层上。</p><p>访问树 Call Tree</p><p>显示一个积累的自顶向下的树，树中包含所有在 JVM 中己记录的访问队列。JDBC, JMS 和 JNDI 服务请求都被注释在请求树中。请求树可以根据 Servlet 和 JSP 对 URL 的不同需要进行拆分。</p><p>热点 Hot Spots</p><p>显示消耗时间最多的方法的列表。对每个热点都能够显示回溯树。该热点可以按照方法请求，JDBC,  JMS 和 JNDI 服务请求以及按照 URL请求来进行计算。</p><p>访问图 Call Graph</p><p>显示一个从已选方法、类、包或 J2EE 组件开始的访问队列的图。</p><p>方法统计 Method Statistis</p><p>显示一段时间内记录的方法的调用时间细节。</p><p><strong>线程视图 threads</strong></p><p>JProfiler 通过对线程历史的监控判断其运行状态，并监控是否有线程阻塞产生，还能将一个线程所管理的方法以树状形式呈现。对线程剖析。</p><p>线程历史 Thread History</p><p>显示一个与线程活动和线程状态在一起的活动时间表。</p><p>线程监控 Thread Monitor</p><p>显示一个列表，包括所有的活动线程以及它们目前的活动状况。</p><p>线程转储 Thread Dumps</p><p>显示所有线程的堆栈跟踪。</p><blockquote><p>线程分析主要关心三个方面：</p><ol><li>web 容器的线程最大数。比如：Tomcat 的线程容量应该略大于最大并发数。</li><li>线程阻塞</li><li>线程死锁</li></ol></blockquote><p><strong>监视器&amp;锁 Monitors&amp;locks</strong></p><p>监控和锁 Monitors &amp; Locks 所有线程持有锁的情况以及锁的信息。</p><p>观察 JVM 的内部线程并查看状态：</p><ul><li>死锁探测图表 Current Locking Graph: 显示 JVM 中的当前死锁图表。</li><li>目前使用的监测器 Current Monitors: 显示目前使用的监测器并且包括它们的关联线程。</li><li>锁定历史图表 Locking History Graph: 显示记录在 JVM 中的锁定历史。</li><li>历史检测记录 Monitor History: 显示重大的等待事件和阻塞事件的历史记录。</li><li>监控器使用统计 Monitor Usage Statistics: 显示分组监测，线程和监测类的统计监测数据</li></ul><h3 id="案例分析">案例分析</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JProfilerTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">ArrayList</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">500</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Data</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Data</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//1mb</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> info <span class="token operator">=</span> <span class="token string">"hello,dee"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MemoryLeak</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ArrayList</span> beanList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">500</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Bean</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                data<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//10kb</span>                beanList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Bean</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> info <span class="token operator">=</span> <span class="token string">"hello,dee"</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">ArrayList</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="06-Arthas">06-Arthas</h2><h3 id="概述-3">概述</h3><p>Arthas(阿尔萨斯) 是Alibaba 开源的 Java 诊断工具，深受开发者喜爱。在线排查问题，无需重启; 动态跟踪 Java 代码：实时监控 JVM 状态。</p><p>Arthas 支持 JDK6+,支持 Linux,/Mac/Windows, 采用命令行交互模式，同时提供丰富的 Tab 自动补全功能，进一步方便进行问题的定位和诊断。</p><p>当你遇到以下类似问题而束手无策时，Arthas 可以帮助你解决：</p><ul><li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception?</li><li>我改的代码为什么没有执行到？难道是我没 commit? 分支搞错了？</li><li>遇到问题无法在线上 debug, 难道只能通过加日志再重新发布吗？</li><li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug, 线下无法重现！</li><li>是否有一个全局视角来查看系统的运行状况？</li><li>有什么办法可以监控到 JVM 的实时运行状态？</li><li>怎么快速定位应用的热点，生成火焰图？</li></ul><p><strong>基于哪些工具而来</strong></p><ul><li>greys-anatomy: Arthas 代码基于 Greys 二次开发而来，非常感谢 Greys 之前所有的工作，以及 Greys 原作者对 Arthas 提出的意见和建议！</li><li>termd: Arthas 的命令行实现基于 termd 开发，是一款优秀的命令行程序开发框架，感谢 termd 提供了优秀的框架。</li><li>crash: Arthas 的文本渲染功能基于 crash 中的文本渲染功能开发，可以从这里看到源码，感谢 crash 在这方面所做的优秀工作。</li><li>cli: Arthas 的命令行界面基于 vert.x 提供的 cli 库进行开发，感谢 vert.x 在这方面做的优秀工作。</li><li>compiler Arthas 里的内存编绎器代码来源</li><li>Apache Commons Net Arthas 里的 Telnet client 代码来源</li><li>JavaAgent: 运行在 main 方法之前的拦截器，它内定的方法名叫 premain, 也就是说先执行 premain 方法然后再执行 main 方法</li><li>ASM: 一个通用的 Java 字节码操作和分析框架。它可以用于修改现有的类或直接以二进制形式动态生成类。ASM 提供了一些常见的字节码转换和分析算法，可以从它们构建定制的复杂转换和代码分析工具。ASM 提供了与其他 Java 字节码框架类似的功能，但是主要关注性能。因为它被设计和实现得尽可能小和快，所以非常适合在动态系统中使用（当然也可以以静态方式使用，例如在编译器中)</li></ul><blockquote><p>官方文档 <a href="https://arthas.aliyun.com/doc/quick-start.html">https://arthas.aliyun.com/doc/quick-start.html</a></p></blockquote><h3 id="安装与使用">安装与使用</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://alibaba.github.io/arthas/arthas-boot.jar<span class="token function">wget</span> https://arthas.gitee.io/arthas-boot.jar<span class="token comment">#启动</span><span class="token function">java</span> <span class="token parameter variable">-jar</span> arthas-boot.jar <span class="token punctuation">[</span>pid<span class="token punctuation">]</span><span class="token comment">#退出</span><span class="token comment"># 最后一行[arthas(@7457]$,说明打开进入了监控客户端，在这里就可以执行相关命令进行查看了。</span><span class="token comment"># 使用quit\exit:退出当前客户端</span><span class="token comment"># 使用stop\shutdown:关闭arthas服务端，并退出所有客户端。</span><span class="token comment">#卸载：</span><span class="token function">rm</span> <span class="token parameter variable">-rf</span> ~/.arthas/I<span class="token function">rm</span> <span class="token parameter variable">-rf</span> ~/logs/arthas<span class="token comment">#Windows平台直接删除user home下面的.arthas和logs/arthas目录</span><span class="token comment">#查看日志</span><span class="token function">cat</span> ~/logs/arthas/arthas.log<span class="token comment">#查看帮助</span><span class="token function">java</span> <span class="token parameter variable">-jar</span> arthas-boot.jar <span class="token parameter variable">-h</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>工作目录</strong></p><p>arthas-agent: 基于 JavaAgent 技术的代理</p><p>bin: 一些启动脚本</p><p>arthas-boot: Java版本的一键安装启动脚本</p><p>arthas-client: telnet client 代码</p><p>arthas-common: 一些共用的工具类和枚举类</p><p>arthas-core: 核心库，各种 arthas 命令的交互和实现</p><p>arthas-demo: 示例代码</p><p>arthas-memorycompiler: 内存编绎器代码，Fork from<br><a href="https://github.com/skalogs/SkaETL/tree/master/compiler">https://github.com/skalogs/SkaETL/tree/master/compiler</a></p><p>arthas-packaging: maven 打包相关的</p><p>arthas-site: arthas 站点</p><p>arthas-spy: 编织到目标类中的各个切面</p><p>static: 静态资源</p><p>arthas-testcase: 测试</p><p><strong>web console</strong></p><p>除了在命令行查看外，Arthas 目前还支持 Web Console。在成功启动连接进程之后就已经自动启动，可以直接访问<a href="http://127.0.0.1:8563/%E8%AE%BF%E9%97%AE%EF%BC%8C%E9%A1%B5%E9%9D%A2%E4%B8%8A%E7%9A%84%E6%93%8D%E4%BD%9C%E6%A8%A1%E5%BC%8F%E5%92%8C%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%AE%8C%E5%85%A8%E4%B8%80%E6%A0%B7%E3%80%82">http://127.0.0.1:8563/访问，页面上的操作模式和控制台完全一样。</a></p><h3 id="相关指令">相关指令</h3><p><strong>class/classloader 相关</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sc <span class="token comment">#查看VM已加载的类信息</span>sm <span class="token comment">#查看已加载类的方法信息</span>jad <span class="token comment">#反编译指定已加载类的源码</span><span class="token function">mc</span> <span class="token comment">#内存编译器，内存编译.java文件为.class文件</span>retransform <span class="token comment">#加载外部的.class文件，retransform到JVM里</span>redefine <span class="token comment">#加载外部的.class文件，redefine到JVM里</span>dump <span class="token comment">#dump已加载类的byte code到特定目录</span>classloader <span class="token comment">#查看classloaderf的继承树，urls,类加载信息，使用classloader去getResource</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>monitor/watch/trace相关</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">monitor <span class="token comment">#方法执行监控</span><span class="token function">watch</span> <span class="token comment">#方法执行数观测</span>trce <span class="token comment">#方法内部调用路径，并输出方法路径上的每个节点上耗时</span>stack <span class="token comment">#输出当前方法被调用的调用路径</span>tt <span class="token comment">#方法执行数据的时空隧道，记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="07-Java-Mission-Control">07-Java Mission Control</h2><h2 id="08-其他工具">08-其他工具</h2><h2 id="09-补充内容">09-补充内容</h2><h3 id="内存泄漏">内存泄漏</h3><h4 id="memory-leak-概念"><strong>(memory leak) 概念</strong></h4><p><img src="./../jvm-tuning2/image-20240115134009517.png" alt=""></p><p>可达性分析算法来判断对象是否是不再使用的对象，本质都是判断一个对象是否还被引用。那么对于这种情况下，由于代码的实现不同就会出现很多种内存泄漏问题（让 JVM 误以为此对象还在引用中，无法回收，造成内存泄漏)。</p><ul><li>是否还被使用? 是</li><li>是否还被需要? 否</li></ul><p><strong>内存泄漏的理解</strong></p><p><strong>严格来说</strong>，只有对象不会再被程序用到了，但是 GC 又不能回收他们的情况，才叫内存泄漏。</p><p>但实际情况很多时候一些不太好的实践（或疏忽）会导致对象的生命周期变得很长甚至导致 OOM, 也可以叫做<strong>宽泛意义上的&quot;内存泄漏&quot;</strong>。</p><p><img src="./../jvm-tuning2/image-20240115134602479.png" alt=""></p><p>对象 X 引用对象 Y, X 的生命周期比 Y 的生命周期长：</p><p>那么当 Y 生命周期结束的时候，X 依然引用着 Y, 这时候，垃圾回收期是不会回收对象 Y 的：</p><p>如果对象 X 还引用着生命周期比较短的A、B、C, 对象 A 又引用着对象a、b、c,这样就可能造成大量无用的对象不能被回收，进而占据了内存资源，造成内存泄漏，直到内存溢出。</p><p><strong>内存泄漏与内存溢出的关系</strong></p><ol><li><p>内存泄漏(memory leak)</p><p>申请了内存用完了不释放，比如一共有 1024M 的内存，分配了 521M 的内存一直不回收，那么可以用的内存只有 521M 了，仿佛泄露掉了一部分：</p><p>通俗一点讲的话，内存泄漏就是【占着茅坑不拉💩】。</p></li><li><p>内存溢出(out of memory)</p><p>申请内存时，没有足够的内存可以使用：</p><p>通俗一点儿讲，一个厕所就三个坑，有两个站着茅坑不走的（内存泄漏），剩下最后一个坑，厕所表示接待压力很大，这时候一下子来了两个人，坑位（内存）就不够了，内存泄漏变成内存溢出了。</p></li></ol><p><strong>泄漏的分类</strong></p><ul><li>经常发生: 发生内存泄漏的代码会被多次执行, 每次执行, 泄漏一块内存</li><li>偶然发生: 在某些特定情况下才会发生</li><li>一次性: 发生内存泄漏的方法指挥执行一次</li><li>隐式泄漏: 一直占着内存不释放, 知道执行结束; 严格的说这个不算内存泄漏, 因为最终释放掉了, 但是如果执行时间特别长, 也可能会导致内存耗尽</li></ul><h4 id="内存泄漏的8种情况">内存泄漏的8种情况</h4><p><strong>1-静态集合类</strong></p><p>静态集合类，如 HashMap、LinkedList 等等。如果这些容器为静态的，那么它们的生命周期与 JVM 程序一致，则容器中的对象在程序结束之前将不能被释放，从而造成内存泄漏。简单而言，长生命周期的对象持有短生命周期对象的引用，尽管短生命周期的对象不再使用，但是因为长生命周期对象持有它的引用而导致不能被回收。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MemoryLeak</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//静态集合类</span>    <span class="token keyword">static</span> <span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">oomTests</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//局部变量</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//由于list容器是静态的, 随着类加载而加载, 从而使对象无法被回收</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2-单例模式</strong></p><p>单例模式，和静态集合导致内存泄露的原因类似，因为单例的静态特性，它的生命周期和 JVM 的生命周期一样长，所以如果单例对象如果持有外部对象的引用，那么这个外部对象也不会被回收，那么就会造成内存泄漏。</p><p><strong>3-内部类持有外部类</strong></p><p>内部类持有外部类，如果一个外部类的实例对象的方法返回了一个内部类的实例对象。</p><p>这个内部类对象被长期引用了，即使那个外部类实例对象不再被使用，但由于内部类持有外部类的实例对象，这个外部类对象将不会被垃圾回收，这也会造成内存泄漏。</p><p><strong>4-各种连接, 如数据库连接、网络连接和IO连接等</strong></p><p>各种连接，如数据库连接、网络连接和IO连接等。</p><p>在对数据库进行操作的过程中，首先需要建立与数据库的连接，当不再使用时，需要调用 close 方法来释放与数据库的连接。只有连接被关闭后，垃圾回收器才会回收对应的对象。</p><p>否则，如果在访问数据库的过程中，对Connection、Statement 或 ResultSet 不显性地关闭，将会造成大量的对象无法被回收，从而引起内存泄漏。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConnectLeak</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Statement</span> stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//1.关闭结果集 Statement</span>            <span class="token comment">//2.关闭声明的对象 ResultSet</span>            <span class="token comment">//3.关闭连接 Connection</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>5-变量不合理的作用域</strong></p><p>变量不合理的作用域。一般而言，一个变量的定义的作用范围大于其使用范围，很有可能会造成内存泄漏。另一方面，如果没有及时地把对象设置为 null, 很有可能导致内存泄漏的发生。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UsingRandom</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//private String msg; //可定义在方法中</span>        <span class="token function">readFromNet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从网络中接收数据保存到msg中</span>        <span class="token function">saveDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//把msg保存到数据库中</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上面这个伪代码，通过 readFromNet 方法把接受的消息保存在变量 msg 中，然后调用 saveDB 方法把 msg 的内容保存到数据库中，此时 msg 已经就没用了，由于 msg 的生命周期与对象的生命周期相同，此时 msg 还不能回收，因此造成了内存泄漏。</p><p>实际上这个 msg 变量可以放在 receiveMsg 方法内部，当方法使用完，那么 msg 的生命周期也就结束，此时就可以回收了。还有一种方法，在使用完 msg 后，把 msg 设置为 null ,这样垃圾回收器也会回收 msg 的内存空间。</p><p><strong>6-改变哈希值</strong>👍</p><p>改变哈希值，当一个对象被存储进 HashSet 集合中以后，就不能修改这个对象中的那些参与计算哈希值的字段了。<br>否则，对象修改后的哈希值与最初存储进 HashSet 集合中时的哈希值就不同了，在这种情况下，即使在 contains 方法使用该对象的当前引用作为的参数去 HashSet 集合中检索对象，也将返回找不到对象的结果，这也会导致无法从 HashSet 集合中单独删除当前对象，造成内存泄漏。</p><p>这也是 String 为什么被设置成了不可变类型，我们可以放心地把 String 存入 HashSet, 或者把 String 当做 HashMap 的 key 值；</p><p>当我们想把自己定义的类保存到散列表的时候，需要保证对象的 hashCode 不可变。</p><ul><li>案例一</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChangeHashCode</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Point</span><span class="token punctuation">></span></span> hs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Point</span> cc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cc<span class="token punctuation">.</span><span class="token function">setX</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//hashCode = 41</span>        hs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cc<span class="token punctuation">)</span><span class="token punctuation">;</span>        cc<span class="token punctuation">.</span><span class="token function">setX</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//hashCode= 51 此行为修改了hash值, 导致了内存泄漏</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hs.remove(cc) = "</span> <span class="token operator">+</span> hs<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>cc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>        hs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hs.size() = "</span> <span class="token operator">+</span> hs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//size=2</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setX</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token class-name">Point</span> point <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Point</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token keyword">return</span> x <span class="token operator">==</span> point<span class="token punctuation">.</span>x<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> prime <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> prime <span class="token operator">*</span> result <span class="token operator">+</span> x<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Point&#123;"</span> <span class="token operator">+</span>                <span class="token string">"x="</span> <span class="token operator">+</span> x <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>案例二</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChangeHashCode1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span> <span class="token string">"AA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span> <span class="token string">"BB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>        p1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"CC"</span><span class="token punctuation">;</span><span class="token comment">//导致了内存的泄漏</span>        set<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除失败</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span> <span class="token string">"CC"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span> <span class="token string">"AA"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//此时总共进来了4个元素</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">!=</span> person<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> id<span class="token punctuation">;</span>        result <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">*</span> result <span class="token operator">+</span> <span class="token punctuation">(</span>name <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> name<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Person&#123;"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                <span class="token char">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./../jvm-tuning2/image-20240115144702050.png" alt="图解"></p><p><strong>7-缓存泄漏</strong></p><p>内存泄漏的另一个常见来源是缓存，一旦你把对象引用放入到缓存中，他就很容易遗忘。比如：之前项目在一次上线的时候，应用启动奇慢直到夯死，就是因为代码中会加载一个表中的数据到缓存（内存）中，测试环境只有几百条数据，但是生产环境有几百万的数据。</p><p>对于这个问题，可以使用 WeakHashMap 代表缓存，此种 Map 的特点是，当除了自身有对 key 的引用外，此 key 没有其他引用那么此 map 会自动丢弃此值。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CacheMapTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token class-name">Map</span> wMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">Map</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">testWeakHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">testHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> ref1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"obejct1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> ref2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"obejct2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> ref3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"obejct3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> ref4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"obejct4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ref1<span class="token punctuation">,</span> <span class="token string">"cacheObject1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ref2<span class="token punctuation">,</span> <span class="token string">"cacheObject2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ref3<span class="token punctuation">,</span> <span class="token string">"cacheObject3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ref4<span class="token punctuation">,</span> <span class="token string">"cacheObject4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"String引用ref1，ref2，ref3，ref4 消失"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testWeakHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"WeakHashMap GC之前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> o <span class="token operator">:</span> wMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"WeakHashMap GC之后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> o <span class="token operator">:</span> wMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HashMap GC之前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> o <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HashMap GC之后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> o <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./../jvm-tuning2/image-20240115224832668.png" alt=""></p><p>上面代码和图示主演演示 WeakHashMap 如何自动释放缓存对象, 当 init 函数执行完成后, 局部变量字符串引用 weakd1, weakd2, d1, d2 都会消失, 此时只有静态 map 中保存对字符串对象的引用, 可以看到, 调用 gc 之后, HashMap 的没有被回收, 而 WeakHashMap 里面的缓存被回收了。</p><p><strong>8-监听器和回调</strong></p><p>内存泄漏第三个常见来源是监听器和其他回调，如果客户端在你实现的 API 中注册回调，却没有显示的取消，那么就会积聚。</p><p>需要确保回调立即被当作垃圾回收的最佳方法是只保存它的弱引用，例如将他们保存成为 WeakHashMap 中的键。</p><h4 id="内存泄漏案例分析">内存泄漏案例分析</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Stack</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elements<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_INITIAL_CAPACITY</span> <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        elements <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token constant">DEFAULT_INITIAL_CAPACITY</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">Object</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//入栈</span>        <span class="token function">ensureCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        elements<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//存在内存泄漏</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//出栈</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">EmptyStackException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> elements<span class="token punctuation">[</span><span class="token operator">--</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//此处移出的时候只是将指针前移, 并没有真正移出对象, GC也无法回收</span>    <span class="token punctuation">&#125;</span><span class="token comment">//应该改成这样</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">EmptyStackException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> result <span class="token operator">=</span> elements<span class="token punctuation">[</span><span class="token operator">--</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>        elements<span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//将堆中数据指针断掉</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>elements<span class="token punctuation">.</span>length <span class="token operator">==</span> size<span class="token punctuation">)</span>            elements <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="OQL语言查询对象信息">OQL语言查询对象信息</h3><p>MAT 支持一种类似于 SQL 的查询语言 OQL(Object Query Language)。OQL 使用类 SQL 语法，可以在堆中进行对象的查找和筛选。</p><p><strong>Select 子句：</strong></p><p>在MAT中，Select 子句的格式与 SQL 基本一致，用于指定要显示的列。Select 子句中可以使用&quot;*&quot;，查看结果对象的引用实例（相当于outgoing references)。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">FROM</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Vector v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用&quot;OBJECTS&quot;关键字，可以将返回结果集中的项以对象的形式显示。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> objects v<span class="token punctuation">.</span>elementData <span class="token keyword">FROM</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Vector v<span class="token keyword">SELECT</span> OBJECTS s<span class="token punctuation">.</span><span class="token keyword">value</span> <span class="token keyword">FROM</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在 Select 子句中，使用&quot;AS RETAINED SET&quot;关键字可以得到所得对象的保留集。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">AS</span> RETAINED <span class="token keyword">SET</span> <span class="token keyword">FROM</span> com<span class="token punctuation">.</span>saddyfire<span class="token punctuation">.</span>mat<span class="token punctuation">.</span>Student<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>&quot;DISTINCT&quot;关键字用于在结果集中去除重复对象。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> OBJECTS classof<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">FROM</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>FROM子句</strong></p><p>Fom子句用于指定查询范围，它可以指定类名、正则表达式或者对象地址。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">FROM</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下例使用正则表达式，限定搜索范围，输出所有 com.saddyfire 包下所有类的实例</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">FROM</span> <span class="token string">"com\.saddyfire\..*"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以直接使用类的地址进行搜索。使用类的地址的好处是可以区分被不同 ClassLoader 加载的同一种类型</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">from</span> <span class="token number">0x37a0b4d</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>WHERE子句</strong></p><p>Where 子句用于指定 OQL 的查询条件。OQL 查询将只返回满足 Where 子句指定条件的对象。</p><p>Where 子句的格式与传统 SQL 极为相似。<br>下例返回长度大于 10 的 char 数组。</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">SELECT FROM char[] s WHERE s.@length&gt;10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下例返回包含 “java” 子字符串的所有字符串，使用 &quot;LIKE 操作符，“LIKE” 操作符的操作参数为正则表达式。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">FROM</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String s <span class="token keyword">WHERE</span> toString<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">LIKE</span> "<span class="token operator">*</span>java<span class="token punctuation">.</span><span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下例返回所有 value 域不为 null 的字符串，使用 “=” 操作符。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">FROM</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String s <span class="token keyword">where</span> s<span class="token punctuation">.</span><span class="token keyword">value</span> <span class="token operator">!=</span> <span class="token boolean">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Where 子句支持多个条件的 AND、OR 运算。下例返回数组长度大于15，并且深堆大于 1000 字节的所有 Vector 对象。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">FROM</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Vector v <span class="token keyword">WHERE</span> v<span class="token punctuation">.</span>elementData<span class="token punctuation">.</span><span class="token variable">@length</span><span class="token operator">></span><span class="token number">15</span> <span class="token operator">AND</span> v<span class="token punctuation">.</span><span class="token variable">@retainedHeapsize</span><span class="token operator">></span><span class="token number">1000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>内置对象与方法</strong></p><p>OQL 中可以访问堆内对象的属性，也可以访问堆内代理对象的属性。访问堆内对象的属性时，<br>格式如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token punctuation">[</span> <span class="token operator">&lt;</span>alias<span class="token operator">></span><span class="token punctuation">.</span> <span class="token punctuation">]</span> <span class="token operator">&lt;</span>field<span class="token operator">></span><span class="token punctuation">.</span><span class="token operator">&lt;</span>field<span class="token operator">></span><span class="token punctuation">.</span><span class="token operator">&lt;</span>field<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中 alias 为对象名称。</p><p>访问 java.io.File 对象的 path 属性，并进一步访问 path 的 value 属性：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> toString<span class="token punctuation">(</span>f<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token keyword">value</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span><span class="token keyword">File</span> f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下例显示了 String 对象的内容、objectid 和 objectAddress。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> s<span class="token punctuation">.</span>toString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token variable">@objectId</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token variable">@objectAddress</span> <span class="token keyword">FROM</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下例显示 java.util.Vector 内部数组的长度。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> v<span class="token punctuation">.</span>elementData<span class="token punctuation">.</span><span class="token variable">@length</span> <span class="token keyword">FROM</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Vector v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下例显示了所有的java.util.Vector对象及其子类型</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">from</span> INSTANCEOF java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Vector<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM-Tuning-01-JVM监控及诊断-命令篇</title>
      <link href="/2024/01/07/jvm-tuning1/"/>
      <url>/2024/01/07/jvm-tuning1/</url>
      
        <content type="html"><![CDATA[<h1>JVM监控及诊断-命令篇</h1><h2 id="概述">概述</h2><h3 id="性能调优思路">性能调优思路</h3><p><strong>1-发现问题: 性能监控</strong></p><ul><li>GC 频繁</li><li>cpu load 过高</li><li>OOM</li><li>内存泄漏</li><li>死锁</li><li>程序响应时间长</li></ul><p><strong>2-排查问题: 性能分析</strong></p><ul><li>打印 GC 日志, 通过 GCviewer 或者 <a href="http://gceasy.io">http://gceasy.io</a> 来分析日志信息</li><li>灵活运用命令行工具: jstack, jmap, jinfo 等</li><li>dump出堆文件, 使用内存分析工具分析文件</li><li>使用阿里 Arthas, 或 jconsole, JVisualVM 来实时查看 JVM 状态</li><li>jstack 查看堆栈信息</li></ul><p><strong>3-解决问题: 性能调优</strong></p><ul><li>适当增加内存, 根据业务背景选择垃圾回收器</li><li>优化代码, 控制内存使用</li><li>增加机器, 分散节点压力</li><li>合理设置线程池线程数量</li><li>使用中间件提高程序效率, 比如缓存, 消息队列等</li></ul><h3 id="性能评价-测试指标">性能评价/测试指标</h3><h4 id="1-停顿时间-或响应时间">1-停顿时间(或响应时间)</h4><p>提交请求和返回该请求的响应之间使用的时间, 一般比较关注平均响应时间</p><p>常用操作的响应时间列表</p><table><thead><tr><th>操作</th><th>响应时间</th></tr></thead><tbody><tr><td>打开一个站点</td><td>几秒</td></tr><tr><td>数据库查询一条记录(有索引)</td><td>十几毫秒</td></tr><tr><td>机械硬盘一次寻址定位</td><td>4毫秒</td></tr><tr><td>从机械磁盘顺序读取 1M 数据</td><td>2毫秒</td></tr><tr><td>从 SSD 磁盘顺序读取 1M 数据</td><td>0.3毫秒</td></tr><tr><td>从远程分布式换成 Redis 读取一个数据</td><td>0.5毫秒</td></tr><tr><td>从内存读取 1M 数据</td><td>十几微妙</td></tr><tr><td>网络传输 2KB 数据</td><td>1 微妙</td></tr></tbody></table><p>在垃圾回收环节中:</p><p>暂停时间: <strong>执行垃圾收集时, 程序的工作线程被暂停的时间</strong></p><p><code>-XX:MaxGCPauseMillis</code></p><h4 id="2-吞吐量">2-吞吐量</h4><p>对单位时间内完成的工作量(请求量)的量度</p><p>在 GC 中: 运行用户代码的时间占总运行时间的比例(总运行时间: 程序的运行时间 + 内存回收的时间)</p><p><strong>吞吐量为 1-1/(1 + n)</strong> <code>-XX:GCTimeRatio=n</code></p><h4 id="3-并发数">3-并发数</h4><p>同一时刻, 对服务器由实际交互的请求数</p><blockquote><p>1000个人同时在线, 估计并发数在 5%-15% 之间, 也就是同时并发量: 50-150 之间</p></blockquote><h4 id="4-内存占用">4-内存占用</h4><p>Java 堆区所占用的内存大小</p><h2 id="02-jps">02-jps</h2><p><strong>查看正在运行的Java进程</strong></p><h2 id="03-jstat">03-jstat</h2><p><strong>jstat(JVM Statistics Monitoring Tool)</strong>:</p><p>用于监视虚拟机各种运行状态信息的命令行工具。它可以显示本地或者远程虚拟机进程中的类装载、内存、垃圾收集、JIT 编译等运行数据。</p><p>在没有GUT图形界面，只提供了纯文本控制台环境的服务器上，它将是运行期定位虚拟机性能问题的首选工具。常用于检测垃圾回收问题以及内存泄漏问题。<br>官方文档：<br><a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/istat.html">https://docs.oracle.com/javase/8/docs/technotes/tools/unix/istat.html</a></p><h3 id="基本语法">基本语法</h3><p>它的基本使用语法为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jstat -<span class="token operator">&lt;</span>option<span class="token operator">></span> <span class="token punctuation">[</span>-t<span class="token punctuation">]</span> <span class="token punctuation">[</span>-h<span class="token operator">&lt;</span>linues<span class="token operator">></span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>vmid<span class="token operator">></span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>interval<span class="token operator">></span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>count<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">]</span>类装载相关:-class: 显示 ClassLoader 的相关信息: 类的装载、卸载数量、总空间、类装载所消耗的时间等<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>option参数</strong></p><ul><li>类装载相关:</li></ul><table><thead><tr><th>选项</th><th>选项说明</th></tr></thead><tbody><tr><td><code>- class</code></td><td>显示 ClassLoader 的相关信息: 类的装载、卸载数量、总空间、类装载所消耗的时间等</td></tr></tbody></table><ul><li>垃圾回收相关的：</li></ul><table><thead><tr><th>选项</th><th>选项说明</th></tr></thead><tbody><tr><td>👍-gc</td><td>显示与 GC 相关的堆信息。包括 Eden 区、两个 Survivor 区、老年代、永久代等的容量、已用空间、GC 时间合计等信息。</td></tr><tr><td>-gccapacity</td><td>显示内容与 <code>-gc</code> 基本相同，但输出主要关注 Java 堆各个区域使用到的最大、最小空间。</td></tr><tr><td>👍-gcutil</td><td>显示内容与 <code>-gc</code> 基本相同，但输出主要关注己使用空间占总空间的百分比。</td></tr><tr><td>👍-gccause</td><td>与 <code>-gcutil</code> 功能一样，但是会额外输出导致最后一次或当前正在发生的GC产生的原因。</td></tr><tr><td>-gcnew</td><td>显示新生代GC状况</td></tr><tr><td>-gcnewcapacity</td><td>显示内容与 <code>-gcnew</code> 基本相同，输出主要关注使用到的最大、最小空间</td></tr><tr><td>-geold</td><td>显示老年代 GC 状况</td></tr><tr><td>-gcoldcapacity</td><td>显示内容与 <code>-gcold</code>基本相同，输出主要关注使用到的最大、最小空间</td></tr><tr><td>-gcpermcapacity</td><td>显示永久代使用到的最大、最小空间。</td></tr></tbody></table><ul><li>JIT 相关的：</li></ul><table><thead><tr><th>选项</th><th>选项说明</th></tr></thead><tbody><tr><td><code>-compiler</code></td><td>显示 JIT 编译器编译过的方法、耗时等信息</td></tr><tr><td><code>-printcompilation</code></td><td>输出己经被 JIT 编译的方法</td></tr></tbody></table><p>👍<strong>interval参数</strong></p><ul><li>用于指定输出统计数据的周期, 单位为毫秒. 即: 查询时间</li></ul><p>👍<strong>count参数</strong></p><ul><li>用于指定查询的总次数</li></ul><p>👍**-t参数**</p><ul><li>可以在输出信息前加上一个Timestamp列，显示程序的运行时间。单位：秒</li><li>可以比较 Java 进程的启动时间以及总 GC 时间 (GCT 列), 或者两次测量的间隔时间以及总 GC 时间的增量, 来得出 GC 时间占运行时间的比例</li><li>如果该比例超过 20%, 则说明目前堆的压力较大; 如果该比例超过 90%, 则说明堆里几乎没有可用空间, 随时都可能抛出 OOM 异常</li></ul><p><strong>-h参数</strong></p><ul><li>可以在周期性输出时, 输出多少行数据后输出一个表头信息</li></ul><h3 id="gc-控制台详解">-gc 控制台详解</h3><p><strong>堆空间默认比例</strong></p><p><img src="./../jvm-tuning1/image-20240107203204723.png" alt=""></p><p><strong>新生代相关</strong></p><ul><li>S0C 是第一个幸存者区的大小（字节）</li><li>S1C 是第二个幸存者区的大小（字节）</li><li>S0U 是第一个幸存者区已使用的大小（字节）</li><li>S1U 是第二个幸存者区已使用的大小（字节）</li><li>EC 是 Eden 空间的大小（字节）</li><li>EU 是 Eden 空间已使用大小（字节）</li></ul><p><strong>老年代相关</strong></p><ul><li>OC 是老年代的大小（字节）</li><li>OU 是老年代已使用的大小（字节）</li></ul><p><strong>方法区（元空间）相关</strong></p><ul><li>MC 是方法区的大小</li><li>MU 是方法区已使用的大小</li><li>CCSC 是压缩类空间的大小</li><li>CCSU 是压缩类空间已使用的大小</li></ul><p><strong>其他</strong></p><ul><li>YGC 是从应用程序启动到采样时 young gc 的次数</li><li>YGCT 是指从应用程序启动到采样时 young gc 消耗时间（秒）</li><li>FGC 是从应用程序启动到采样时 full gc 的次数</li><li>FGCT 是从应用程序启动到采样时的 full gc 的消耗时间（秒）</li><li>GCT 是从应用程序启动到采样时 gc 的总时间</li></ul><p><strong>代码示例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// -Xms60m -Xmx60m -XX:SurvivorRatio=8</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GCTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//100kb</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 终端命令</span><span class="token comment">// jstat -gc -t 1476 1000 10</span><span class="token comment">// jstat -gcutil -t 1476 1000 10</span><span class="token comment">// jstat -gccause -t 10200 1000 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="t-参数观察说明">-t 参数观察说明</h4><p>GCT的时间差/Timestamp时间差: 如果大于20%,说明堆压力较大; 如果大于90%, 则随时都可能GC, 详细见 -t参数 描述</p><h4 id="判断是否出现内存泄漏">判断是否出现内存泄漏</h4><ol><li>在长时间运行的 Java 程序中，我们可以运行 <code>jstat</code> 命令连续获取多行性能数据，并取这几行数据中 OU 列（即己占用的老年代内存）的最小值。</li><li>然后，我们每隔一段较长的时间重复一次上述操作，来获得多组 OU 最小值。如果这些值呈上涨趋势，则说明该 Java 程序的老年代内存己使用量在不断上涨，这意味着无法回收的对象在不断增加，因此很有可能存在内存泄漏。</li></ol><h2 id="04-jinfo">04-jinfo</h2><p><strong>查看虚拟机配置参数信息, 也可用于调整虚拟机的配置参数</strong></p><p>在很多情况下，Java 应用程序不会指定所有的 Java 虚拟机参数。而此时，开发人员可能不知道某一个具体的 Java 虚拟机参数的默认值。在这种情况下，可能需要通过查找文档获取某个参数的默认值。这个查找过程可能是非常艰难的。但有了 <code>jinfo</code> 工具，开发人员可以很方便地找到 Java 虚拟机参数的当前值。</p><h3 id="基本语法-2">基本语法</h3><p><code>jinfo [options] pid</code></p><p>说明: java 进程 ID 必须要加上</p><table><thead><tr><th>选项</th><th>选项说明</th></tr></thead><tbody><tr><td>-flag name</td><td>输出对应名称的参数</td></tr><tr><td>-flag [±] name</td><td>开启或者关闭对应名称的参数, 只有被标记为 manageable 的参数才可以被动态修改</td></tr><tr><td>-flag name=value</td><td>设定对应名称的参数</td></tr><tr><td>-flags</td><td>输出全部的参数</td></tr><tr><td>-sysprops</td><td>输出系统属性</td></tr></tbody></table><h3 id="控制台详解">控制台详解</h3><p><strong>代码示例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScannerTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> info <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查看参数">查看参数</h4><p><code>jinfo -flags 23456</code></p><p><img src="./../jvm-tuning1/image-20240107212623817.png" alt=""></p><p><code>jinfo -flag UseParallelGC 23456</code></p><p><img src="./../jvm-tuning1/image-20240107212717024.png" alt=""></p><h4 id="修改参数">修改参数</h4><p><code>jinfo</code> 不仅可以查看运行时某一个 Java 虚拟机参数的实际取值, 甚至可以在运行时修改部分参数, 并使之立即生效.</p><p>但是, 并非所有参数都支持动态修改. 参数只有被标记 manageable 的 flag 可以被实时修改. 其实, 这个修改能力是及其有限的.</p><ul><li>查看被标记 manageable 的参数</li><li><code>java -XX:+PrintFlagsFinal -version | grep manageable</code></li></ul><p><strong>针对boolean类型</strong></p><p><code>jinfo -flag [+/-]参数名称 进程id</code></p><p><strong>针对非boolean类型</strong></p><p><code>jinfo -flag 参数名称=参数值 进程id</code></p><h3 id="拓展">拓展</h3><p><strong>查看所有 JVM 参数启动的初始值</strong></p><p><code>java -XX:+PrintFlagsInitial</code></p><p><strong>查看所有 JVM 参数的最终值</strong></p><p><code>java -XX:+PrintFlagsFinal</code></p><p><strong>查看那些已经被用户或者 JVM 设置过的详情的XX参数的名称和值</strong></p><p><code>java -参数名称:+PrintCommandLineFlags</code></p><h2 id="05-jmap">05-jmap</h2><p><strong>导出内存映像文件&amp;内存使用情况</strong></p><p>jmap(JVM Memory Map): 作用一方面是获取 dump 文件（堆转储快照文件，二进制文件）, 它还可以获取目标 Java 进程的内存相关信息，包括 Java 堆各区域的使用情况、堆中对象的统计信息、类加载信息等。</p><p>开发人员可以在控制台中输入命令 <code>jmap-help</code> 查阅 jmap 工具的具体使用方式和一些标准选项配置。</p><p>官方帮助文档：<br><a href="https://docs.oracle.com/en/java/javase/11/tools/jmap.html">https://docs.oracle.com/en/java/javase/11/tools/jmap.html</a></p><h3 id="基本语法-3">基本语法</h3><ul><li><code>jmap [option] &lt;pid&gt;</code></li><li><code>jmap [option] &lt;executable&gt;</code></li><li><code>jmap [option] [server_id@]&lt;remote server IP or hostname&gt;</code></li></ul><p><strong>option 包括</strong></p><table><thead><tr><th>选项</th><th>选项说明</th></tr></thead><tbody><tr><td>-dump</td><td>生成dump文件</td></tr><tr><td>-finalizerinfo</td><td>以 ClassLoader 为统计口径输出永久代的内存状态信息</td></tr><tr><td>-heap</td><td>输出整个堆空间的详细信息, 包括 GC 的使用、堆配置信息, 以及内存的实用信息等</td></tr><tr><td>-histo</td><td>输出堆空间中对象的统计信息, 包括类、实例数量和合计容量</td></tr><tr><td>-permstat</td><td>以 ClassLoader 为统计口径输出永久代的内存状态信息</td></tr><tr><td>-F</td><td>当虚拟机进程对 -dump 选项没有任何响应时, 强制执行生成 dump 文件</td></tr></tbody></table><p>👍**-dump**</p><ul><li>生成Java堆转储快照：dump文件</li><li>特别的：-dump:live只保存堆中的存活对象</li></ul><p>👍**-heap**</p><ul><li>输出整个堆空间的详细信息, 包括 GC 的使用、堆配置信息, 以及内存的使用信息等</li></ul><p>👍**-histo**</p><ul><li>输出堆中对象的统计信息, 包括类、实例数量和合计容量</li><li>特别的: -histo:live 只统计堆中的存活对象</li></ul><p><strong>-permstat</strong></p><ul><li>以 ClassLoader 为统计口径输出永久代的内存状态信息</li><li>仅 linux/solaris 平台有效</li></ul><p><strong>-finalizerinfo</strong></p><ul><li>显示在 F-Queue 中等待 Finalizer 线程执行 finalize 方法的对象</li><li>仅 linux/solaris 平台有效</li></ul><p><strong>-F</strong></p><ul><li>当虚拟机进程对 -dump 选项没有任何响应时, 可使用此选项强制执行生成 dump 文件</li><li>仅 linux/solaris 平台有效</li></ul><p><strong><code>-J &lt;flag&gt;</code></strong></p><ul><li>传递参数给 jmap 启动的 JVM</li></ul><h3 id="使用1-导出内存映像文件">使用1: 导出内存映像文件</h3><p>一般来说，使用 jmap 指令生成 dump 文件的操作算得上是最常用的 jmap 命令之一，将堆中所有存活对象导出至一个文件之中。</p><p>Heap Dump 又叫做堆存储文件，指一个 Java 进程在某个时间点的内存快照。Heap Dump 在触发内存快照的时候会保存此刻的信息如下：</p><ul><li>A110 bjects<br>Class,fields,primitive values and references</li><li>A11C1 asses<br>ClassLoader,name,super class,static fields</li><li>Garbage Collection Roots<br>objects defined to be reachable by the JVM</li><li>Thread Stacks and Local Variables<br>The call-stacks of threads at the moment of the snapshot,and per-frame<br>information about local objects</li></ul><p><strong>说明：</strong></p><ol><li>通常在 Heap Dump 文件前会触发一次 Full GC,所以neap dump文件里保存的都是 Full GC 后留下的对象信息。</li><li>由于生成 dump 文件比较耗时，因此大家需要耐心等待，尤其是大内存镜像生成 dump 文件则需要耗费更长的时间来完成。</li></ol><p><strong>手动的方式</strong></p><ul><li><code>jmap -dump:format=b,file=&lt;filename.hprof&gt; &lt;pid&gt;</code></li><li>👍<code>jmap -dump:live,format=b,file=&lt;filename.hprof&gt; &lt;pid&gt;</code></li></ul><p><strong>自动的方式</strong></p><ul><li><code>-XX:+HeapDumpOnOutOfMemoryError</code></li><li><code>-XX:HeapDumpPath=&lt;filename.hprof&gt;</code></li></ul><p>当程序发生 OOM 退出系统时，一些瞬时信息都随着程序的终止而消失，而重现 OOM 问题往往比较困难或者耗时。此时若能在 OOM 时，自动导出 dump 文件就显得非常迫切。</p><p>这里介绍一种比较常用的取得堆快照文件的方法，即使用：</p><p>-XX:+HeapDumpOnOutofMemoryError：在程序发生OOM时，导出应用程序的当前堆快照。<br>-XX:HeapDumpPath：可以指定堆快照的保存位置。</p><p>比如：<br>-Xmx100m -XX:+HeapDumpOnOutofMemoryError -XX:HeapDumpPath=D:\m.hprof</p><h3 id="使用2-显示堆内存相关信息">使用2: 显示堆内存相关信息</h3><ul><li><code>jmap -heap pid</code> 展示当前堆空间信息</li><li><code>jmap -histo pid</code> 展示当前对象信息</li></ul><h3 id="小结">小结</h3><p>由于 jmap 将访问堆中的所有对象，为了保证在此过程中不被应用线程干扰，jmap 需要借助安全点机制，让所有线程停留在不改变堆中数据的状态。也就是说，由 jmap 导出的堆快照必定是安全点位置的。这可能导致基于该堆快照的分析结果存在偏差。</p><p>举个例子，假设在编译生成的机器码中，某些对象的生命周期在两个安全点之间，那么 :live 选项将无法探知到这些对象。</p><p>另外，如果某个线程长时间无法跑到安全点，jmap 将一直等下去。</p><p>与前面讲的 jstat 则不同，垃圾回收器会主动将 jstat 所需要的摘要数据保存至固定位置之中而 jstat 只需直接读取即可。</p><h2 id="06-jhat">06-jhat</h2><p><strong>(JVM Heap Analysis Tool): JDK 自带堆分析工具</strong><br>Sun JDK 提供的 jhat 命令与 jmap 命令搭配使用，用于分析 jmap 生成的 heap dump 文件（堆转储快照)。jhat 内置了一个微型的 HTTP/HTML 服务器，生成 dump 文件的分析结果后，用户可以在浏览器中查看分析结果（分析虚拟机转储快照信息）。</p><p>使用了 jhat 命令，就启动了一个 http 服务，端口是7000，即 <a href="http://1oca1host:7000/">http://1oca1host:7000/</a> , 就可以在浏览器里分析。</p><p>说明：jhat命令在JDK9、JDK10中已经被删除，官方建议用VisualVM代替。</p><h2 id="07-jstack">07-jstack</h2><p><strong>打印 JVM 中线程快照</strong></p><p>jstack(JVM Stack Trace): 用于生成虚拟机指定进程当前时刻的线程快照（虚拟机堆栈跟踪)。线程快照就是当前虚拟机内指定进程的每一条线程正在执行的方法堆栈的集合。</p><p>生成线程快照的作用：可用于定位线程出现长时间停顿的原因，如<strong>线程间死锁</strong>、<strong>死循环</strong>、<strong>请求外部资源导致的长时间等待</strong>等问题。这些都是导致线程长时间停顿的常见原因。当线程出现停顿时，就可以用jstack显示各个线程调用的堆栈情况。</p><p>官方帮助文档：<br><a href="https://docs.oracle.com/en/java/javase/11/tools/jstack.html">https://docs.oracle.com/en/java/javase/11/tools/jstack.html</a></p><p>在thread dump中，要留意下面几种状态</p><ul><li><strong>死锁，Deadlock(重点关注)</strong></li><li><strong>等待资源，Waiting on condition(重点关注)</strong></li><li><strong>等待获取监视器，Waiting on monitor entry(重点关注)</strong></li><li><strong>阻塞，Blocked(重点关注)</strong></li><li>执行中，Runnable</li><li>暂停，Suspended</li><li>停止，Parked</li></ul><p><strong>死锁 代码示例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadDeadLock</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StringBuilder</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                s2<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    s2<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                s2<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    s2<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>jps</code> -&gt; <code>jstack 18980</code></p><p><img src="./../jvm-tuning1/image-20240107224824883.png" alt=""></p><p><img src="./../jvm-tuning1/image-20240107224843349.png" alt=""></p><p><strong>TIMED_WAITING 代码示例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadSleepTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello - 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello - 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./../jvm-tuning1/image-20240107225054663.png" alt="image-20240107225054663"></p><p><strong>线程同步代码示例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadSyncTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Number</span> number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"线程2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Number</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>                    number<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./../jvm-tuning1/image-20240107225727222.png" alt=""></p><h2 id="08-jcmd">08-jcmd</h2><p><strong>多功能命令行</strong></p><p>在JDK1.7以后，新增了一个命令行工具 jcmd。</p><p>它是一个多功能的工具，可以用来实现前面除了 jstat 之外所有命令的功能。比如：用它来导出堆、内存使用、查看 Java 进程、导出线程信息、执行 GC、JVM 运行时间等。</p><p>官方帮助文档：<br><a href="https://docs.oracle.com/en/java/javase/11/tools/jcmd.html">https://docs.oracle.com/en/java/javase/11/tools/jcmd.html</a></p><p>jcmd 拥有 jmap 的大部分功能，并且在 Oracle 的官方网站上也推荐使用 jcmd 命令代 jmap 命令</p><h3 id="基本语法-4">基本语法</h3><ul><li><code>jcmd -l</code> 列出所有的 JVM 进程</li><li><code>jcmd pid help</code> 针对指定的进程, 列出支持的所有命令</li><li><code>jcmd pid 具体命令</code> 显示指定进程的指令命令数据</li></ul><h3 id="使用示例">使用示例</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jcmd <span class="token parameter variable">-l</span> <span class="token comment">#查看所有java进程</span>jcmd <span class="token number">13508</span> <span class="token builtin class-name">help</span> <span class="token comment">#查看可使用命令</span>jcmd <span class="token number">13508</span> Thread.print <span class="token comment">#查看栈信息,等同于jstack</span>jcmd <span class="token number">13508</span> GC.class_histogram <span class="token comment">#等同于jmap -histo</span>jcmd <span class="token number">13508</span> GC.heap_dump d:<span class="token punctuation">\</span><span class="token number">1</span>.hprof <span class="token comment">#等同于jmap -dump:live,format=b,file=&lt;filename.hprof> &lt;pid></span>jcmd <span class="token number">13508</span> VM.flags <span class="token comment">#等同于jinfo -flags 23456</span>jcmd <span class="token number">13508</span> VM.command_line<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM-Class-03-类的加载过程详解</title>
      <link href="/2024/01/06/jvm-class3/"/>
      <url>/2024/01/06/jvm-class3/</url>
      
        <content type="html"><![CDATA[<h1>类的加载过程详解</h1><h2 id="01-概述">01-概述</h2><p>在 Java 中数据类型分为基本数据类型和引用数据类型。<strong>基本数据类型由虚拟机预先定义，引用数据类型则需要进行类的加载。</strong></p><p>按照 Java 虚拟机规范，从 class 文件到加载到内存中的类，到类卸载出内存为止，它的整个生命周期包括如下7个阶段：</p><p><img src="./../jvm-class3/image-20240106235908087.png" alt=""></p><p>其中，验证、准备、解析3个部分统称为链接(Linking)</p><p>从程序中类的使用过程看:</p><p><img src="./../jvm-class3/image-20240107000058146.png" alt=""></p><p><strong>面试题</strong></p><ul><li>描述以下 JVM 加载 Class 文件的原理机制</li><li>类加载过程</li><li>加载类的时机</li></ul><h2 id="02-过程一：Loading（加载）阶段">02-过程一：Loading（加载）阶段</h2><h3 id="1-加载完成的操作">1-加载完成的操作</h3><p><strong>加载的理解</strong></p><p>**所谓加载，简而言之就是将 Java 类的字节码文件加载到机器内存中，并在内存中构建出 Java 类的原型一一类模板对象。**所谓类模板对象，其实就是 Java 类在VM内存中的一个快照，JVM将从字节码文件中解析出的常量池、类字段、类方法等信息</p><p>存储到类模板中，这样 JVM 在运行期便能通过类模板而获取 Java 类中的任意信息，能够对 Java 类的成员变量进行遍历，也能进行 Java 方法的调用。</p><p>反射的机制即基于这一基础。如果 JVM 没有将 Java 类的声明信息存储起来，则 JVM 在运行期也无法反射。</p><p><strong>加载完成的操作</strong></p><p><strong>加载阶段，简言之，查找并加载类的二进制数据，生成 Class 的实例。</strong></p><p>在加载类时，Java 虚拟机必须完成以下3件事情：</p><ul><li>通过类的全名，获取类的二进制数据流。</li><li>解析类的二进制数据流为方法区内的数据结构( Java 类模型)</li><li>创建 java.lang.Class 类的实例，表示该类型。作为方法区这个类的各种数据的访问入口。</li></ul><h3 id="2-二进制流的获取方式">2-二进制流的获取方式</h3><p>对于类的二进制数据流，虚拟机可以通过多种途径产生或获得。（只要所读取的字节码符合 JVM 规范即可）</p><ul><li>虚拟机可能通过文件系统读入一个 class 后缀的文件（最常见）</li><li>读入 jar、zip 等归档数据包，提取类文件。</li><li>事先存放在数据库中的类的二进制数据</li><li>使用类似于 HTTP 之类的协议通过网络进行加载</li><li>在运行时生成一段 Class 的二进制信息等</li></ul><p>在获取到类的二进制信息后，Java 虚拟机就会处理这些数据，并最终转为一个 java.lang.Class的实例。</p><p>如果输入数据不是 ClassFile 的结构，则会抛出ClassFormatError。</p><h3 id="3-类模型与Class实例的">3-类模型与Class实例的</h3><p><strong>1、类模型的位置</strong></p><p>加载的类在JVM中创建相应的类结构，类结构会存储在方法区（JDK1.8 之前：永久代；JDK1.8 及之后：元空间）。<br><strong>2、Class 实例的位置</strong></p><p>类将 .class 文件加载至元空间后，会在堆中创建一个 Java.lang.Class 对象，用来封装类位于方法区内的数据结构，该<br>Class 对象是在加载类的过程中创建的，每个类都对应有一个 Class 类型的对象。(instancKass --&gt; mirror: Class的实例)</p><p><strong>3、图示</strong></p><p><img src="./../jvm-class3/004.jpg" alt=""></p><p>外部可以通过访问代表 Order 类的 Class 对象来获取 Order 的类数据结构</p><p><strong>4、再说明</strong></p><p>Class 类的构造方法是私有的, 只有 JVM 能够创建</p><p>java.lang.Class 实例访问类型元数据的接口, 也是实现反射的关键数据、入口. 通过 Class 类提供的接口, 可以获取目标类所关联的 .class 文件中具体的数据结构: 方法、字段信息等.</p><p><strong>通过Class类, 获得了java.lang.String类的所有方法信息, 并打印方法访问标识符、描述符</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoadingTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.String"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//获取当前运行时类声明的所有方法</span>            <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ms <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> m <span class="token operator">:</span> ms<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//获取方法的修饰符</span>                <span class="token class-name">String</span> mod <span class="token operator">=</span> <span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>mod <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//获取方法的返回值类型</span>                <span class="token class-name">String</span> returnType <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>returnType <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//获取方法名</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//获取方法的参数列表</span>                <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> ps <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ps<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ps<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">char</span> end <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> ps<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token char">')'</span> <span class="token operator">:</span> <span class="token char">','</span><span class="token punctuation">;</span>                    <span class="token comment">//获取参数类型</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>ps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-数组类的加载">4-数组类的加载</h3><p>创建数组类的情况稍微有些特殊，<strong>因为数组类本身并不是由类加载器负责创建</strong>，而是由 JVM 在运行时根据需要而直接创建的，但数组的元素类型仍然需要依靠类加载器去创建。创建数组类（下述简称A）的过程：</p><ol><li>如果数组的元素类型是引用类型，那么就遵循定义的加载过程递归加载和创建数组 A 的元素类型</li><li>JVM 使用指定的元素类型和数组维度来创建新的数组类</li></ol><p>如果数组的元素类型是引用类型，数组类的可访问性就由元素类型的可访问性决定。否则数组类的可访问性将被缺省定义为 public。</p><h2 id="03-过程二：Linking（链接）阶段">03-过程二：Linking（链接）阶段</h2><h3 id="1-环节1：链接阶段之Verification（验证）">1-环节1：链接阶段之Verification（验证）</h3><p><strong>验证阶段(Verification)</strong></p><ul><li><p>当类加载到系统后，就开始链接操作，验证是链接操作的第一步。</p></li><li><p><strong>它的目的是保证加载的字节码是合法、合理并符合规范的。</strong></p></li></ul><p>验证的步骤比较复杂, 实际需要验证的项目也很繁多, 大体上 Java 虚拟机需要做以下检查, 如图所示:</p><p><img src="./../jvm-class3/image-20240107101652172.png" alt=""></p><p><strong>整体说明：</strong></p><p>验证的内容则涵盖了类数据信息的格式验证、语义检查、字节码验证，以及符号引用验证等。</p><ul><li>其中<strong>格式验证会和加载阶段一起执行</strong>。验证通过之后，类加载器才会成功将类的二进制数据信息加载到方法区中。</li><li><strong>格式验证之外的验证操作将会在方法区中进行。</strong></li></ul><p>链接阶段的验证虽然拖慢了加载速度，但是它避免了在字节码运行时还需要进行各种检查。（磨刀不误砍柴工）</p><p><strong>具体说明：</strong></p><ol><li><p>格式验证：是否以魔数 0xCAFEBABE 开头，主版本和副版本号是否在当前 Java 虚拟机的支持范围内，数据中每一个项是否都<br>拥有正确的长度等。</p></li><li><p>Java 虚拟机会进行字节码的语义检查，但凡在语义上不符合规范的，虚拟机也不会给予验证通过。比如：</p><ul><li>是否所有的类都有父类的存在（在 Java 里，除了 Object 外，其他类都应该有父类）</li><li>是否一些被定义为 final 的方法或者类被重写或继承了</li><li>非抽象类是否实现了所有抽象方法或者接口方法</li><li>是否存在不兼容的方法（比如方法的签名除了返回值不同，其他都一样，这种方法会让虚拟机无从下手调度；abstract 情况下的方法，就不能是 final 的了)</li></ul></li><li><p>Java 虚拟机还会<strong>进行字节码验证</strong>，字节码验证<strong>也是验证过程中最为复杂的一个过程</strong>。它试图通过对字节码流的分析，判断字节码是否可以被正确地执行。比如：</p><ul><li>在字节码的执行过程中，是否会跳转到一条不存在的指令</li><li>函数的调用是否传递了正确类型的参数</li><li>变量的赋值是不是给了正确的数据类型等</li></ul><p>栈映射帧( StackMapTable )就是在这个阶段，用于检测在特定的字节码处，其局部变量表和操作数栈是否有着正确的数据类型。但遗憾的是，100% 准确地判断一段字节码是否可以被安全执行是无法实现的，因此，该过程只是尽可能地检查出可以预知的明显的问题。如果在这个阶段无法通过检查，虚拟机也不会正确装载这个类。但是，如果通过了这个阶段的检查，也不能说明这个类是完全没有问题的。</p></li></ol><p>​<strong>在前面3次检查中，已经排除了文件格式错误、语义错误以及字节码的不正确性。但是依然不能确保类是没有问题的。</strong></p><ol start="4"><li><p>校验器还将进行<strong>符号引用的验证</strong>。Class 文件在其常量池会通过字符串记录自己将要使用的其他类或者方法。因此，在验证阶段，<strong>虚拟机就会检查这些类或者方法确实是存在的</strong>，并且当前类有权限访问这些数据，如果一个需要使用类无法在系统中找到，则会抛出 NoClassDefFoundError，如果一个方法无法被找到，则会抛出 NoSuchMethodError。</p><p>此阶段在解析环节才会执行。</p></li></ol><h3 id="2-环节2：链接阶段之Preparation（准备）">2-环节2：链接阶段之Preparation（准备）</h3><h3 id="3-环节3：链接阶段之Resolution（解析）">3-环节3：链接阶段之Resolution（解析）</h3><h2 id="04-过程三：Initialization（初始化）阶段">04-过程三：Initialization（初始化）阶段</h2><h2 id="05-过程四：类的Using（使用）">05-过程四：类的Using（使用）</h2><h2 id="06-过程五：类的Unloading（卸载）">06-过程五：类的Unloading（卸载）</h2>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM-Class-02-字节码指令集与解析举例</title>
      <link href="/2024/01/05/jvm-class2/"/>
      <url>/2024/01/05/jvm-class2/</url>
      
        <content type="html"><![CDATA[<h1>字节码指令集与解析举例</h1><h2 id="01-概述">01-概述</h2><ul><li>Java 字节码对于虚拟机，就好像汇编语言对于计算机，属于基本执行指令。</li><li>Java 虚拟机的指令由<strong>一个字节长度</strong>的、代表着某种特定操作含义的数字（称为操作码，Opcode)以及跟随其后的零至多个代表此操作所需参数（称为操作数，Operands)而构成。由于Java虚拟机采用面向操作数栈而不是寄存器的结构，所以大多数的指令都不包含操作数，只有一个操作码。</li><li>由于限制了 Java 虚拟机操作码的长度为一个字节（即0~255），这意味着指令集的操作码总数不可能超过 256 条。</li><li>官方文档：https:/docs.oracle.com/javase./specs/jvms/se8/html/jvms-6.html</li><li>熟悉虚拟机的指令对于动态字节码生成、反编译 Class 文件、Class文件修补都有着非常重要的价值。因此，阅读字节码作为了解 Java 虚拟机的基础技能，需要熟练掌握常见指令。</li></ul><p><strong>执行模型</strong></p><p>如果不考虑异常处理的话，那么Java虚拟机的解释器可以使用下面这个伪代码当做最基本的执行模型来理解</p><pre class="line-numbers language-null" data-language="null"><code class="language-null">do&#123;    自动计算PC寄存器的值加1;    根据PC寄存器的指示位置，从字节码流中取出操作码;    if(字节码存在操作数)从字节码流中取出操作数;    执行操作码所定义的操作;&#125; while (字节码长度 &gt; 0);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>字节码于数据类型</strong></p><p>在 Java 虚拟机的指令集中，大多数的指令都包含了其操作所对应的数据类型信息。例如，iload 指令用于从局部变量表中加载 int 型的数据到操作数栈中，而 fload 指令加载的则是 float 类型的数据。</p><p>对于大部分与数据类型相关的字节码指令，<strong>它们的操作码助记符中都有特殊的字符来表明专门为哪种数据类型服务</strong>：</p><ul><li>i 代表对 int类型的数据操作，</li><li>l 代表 long</li><li>s代表 short</li><li>b 代表 byte</li><li>c 代表 char</li><li>f 代表 float</li><li>d 代表 double</li></ul><p>也有一些指令的助记符中没有明确地指明操作类型的字母，如 arraylength 指令，它没有代表数据类型的特殊字符，但操作数永远只能是一个数组类型的对象。</p><p>还有另外一些指令，如无条件跳转指令 goto 则是与<strong>数据类型无关的</strong>。</p><p>大部分的指令都没有支持整数类型 byte、char 和 short，甚至没有任何指令支持boolean类型。编译器会在编译期或运行期将 byte 和 short 类型的数据带符号扩展 (Sign-Extend) 为相应的 int 类型数据，将 boolean 和 char 类型数据零位扩展 (Zero-Extend) 为相应的 int 类型数据。与之类似，在处理 boolean、byte、short 和 char 类型的数组时，也会转换为使用对应的 int 类型的字节码指令来处理。因此，大多数对于 boolean、byte、short 和 char 类型数据的操作，实际上都是使用相应的 int 类型作为运算类型。</p><h3 id="指令分类">指令分类</h3><ul><li>由于完全介绍和学习这些指令需要花费大量时间。为了让大家能更快地熟悉和了解这些基本指令，这里将JVM中的字节码指令集按用途大致分成9类。<ul><li>加载与存储指令</li><li>算术指令</li><li>类型转换指令</li><li>对象的创建与访问指令</li><li>方法调用与返回指令</li><li>操作数栈管理指令</li><li>比较控制指令</li><li>异常处理指令</li><li>同步控制指令</li></ul></li><li>(说在前面) 在做值相关操作时：<ul><li>一个指令，可以从局部变量表、常量池、堆中对象、方法调用、系统调用中等取得数据，这些数据（可能是值，可能是对象的引用)被压入操作数栈。</li><li>一个指令，也可以从操作数栈中取出一到多个值( pop 多次)，完成赋值、加减乘除、方法传参、系统调用等等操作。</li></ul></li></ul><h2 id="02-加载与存储指令">02-加载与存储指令</h2><p><strong>作用</strong></p><p>加载和存储指令用于将数据从栈帧的局部变量表和操作数栈之间来回传递。</p><p><strong>常用指令</strong></p><pre class="line-numbers language-null" data-language="null"><code class="language-null">1、【局变量压栈指令】将一个局部变量加载到操作数栈：xload、xload&lt;n&gt;(其中x为i、l、f、d、a，n 为 0 到 3)------------------------------------------------------------------------------2、【常量入栈指令】将一个常量加载到操作数栈：bipush、sipush、ldc、ldc_w、ldc2_w、aconst_null、iconst_ml、iconst&lt;i&gt;、lconst_&lt;l&gt;、fconst_&lt;f&gt;、dconst&lt;d&gt;-------------------------------------------------------------------------------3、【出栈装入局部变量表指令】将一个数值从操作数栈存储到局部变量表：xstore、xstore_&lt;n&gt;（其中 x 为 i、l、f、d、a，n 为 g 到3)；xastore(其中 x 为 i、l、f、d、a、b、c、s)--------------------------------------------------------------------------------4、扩充局部变量表的访问索引的指令：wide。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面所列举的指令助记符中，有一部分是以尖括号结尾的（例如 <code>iload_&lt;n&gt;</code> )。这些指令助记符实际上代表了一组指令(例如 <code>iload&lt;n&gt;</code> 代表了 <code>iload_0</code> 、<code>iload_1</code>、<code>iload_2</code> 和 <code>iload_3</code> 这几个指令)。这几组指令都是某个带有一个操作数的通用指令（例如 <code>iload</code> )的特殊形式，<strong>对于这若干组特殊指令来说，它们表面上没有操作数，不需要进行取操作数的动作，但操作数都隐含在指令中。</strong></p><blockquote><p>比如:</p><p>iload_0: 将局部变量表中索引为0位置上的数据压入操作数栈中。</p><p>iload 0: 与上条一样。</p><p>iload 4: 将局部变量表中索引为4位置上的数据压入操作数栈中。</p></blockquote><p>除此之外，它们的语义与原生的通用指令完全一致（例如 <code>iload_0</code> 的语义与操作数为 0 时的 <code>iload</code> 指令语义完全一致)。在尖括号之间的字母指定了指令隐含操作数的数据类型，<code>&lt;n&gt;</code> 代表非负的整数，<code>&lt;i&gt;</code> 代表是 int 类型数据，<code>&lt;l&gt;</code> 代表 long 类型，<code>&lt;f&gt;</code>代表 float 类型， <code>&lt;d&gt;</code> 代表 double 类型。操作 byte, char, short 和 boolean 类型数据时, 经常用 int 类型的指令来表示。</p><h3 id="复习-再谈操作数栈与局部变量表">复习: 再谈操作数栈与局部变量表</h3><p><strong>操作数栈(Operand Stacks)</strong></p><ul><li>我们知道，Java 字节码是 Java 虚拟机所使用的指令集。因此，它与 Java 虚拟机基于栈的计算模型是密不可分的。</li><li>在解释执行过程中，每当为 Java 方法分配栈桢时，Java 虚拟机往往需要开辟一块额外的空间作为<strong>操作数栈，来存放计算的操作数以及返回结果。</strong></li><li>具体来说便是：执行每一条指令之前，Java 虚拟机要求该指令的操作数已被压入操作数栈中。在执行指令时，Java 虚拟机会将该指令所需的操作数弹出，并且将指令的结果重新压入栈中。</li></ul><p><img src="./../jvm-class2/image-20240106092421015.png" alt=""></p><blockquote><p>以加法指令 <code>iadd</code> 为例:</p><p>假设在执行该指令前, 栈顶的两个元素分别为 int 值 1 和 int 值 2, 那么 <code>iadd</code> 指令将弹出这两个 int, 并将求得的和 int 值 3 压入栈中</p></blockquote><p><img src="./../jvm-class2/image-20240106092608805.png" alt=""></p><blockquote><p>由于iadd 指令只消耗栈顶的两个元素，因此，对于离栈顶距离为2的元素，即图中的问号，iadd 指令并不关心它是否存在，更加不会对其进行修改。</p></blockquote><p><strong>局部变量表(Local Variables)</strong></p><ul><li>Java 方法栈桢的另外一个重要组成部分则是局部变量区，<strong>字节码程序可以将计算的结果缓存在局部变量区之中</strong>。</li><li>实际上，Java 虚拟机将局部变量区<strong>当成一个数组</strong>，依次存放 this 指针（仅非静态方法），所传入的参数，以及字节码中的局部变量。</li><li>和操作数栈一样，long 类型以及 double 类型的值将占据两个单元，其余类型仅占据一个单元。</li></ul><img src="./../jvm-class2/image-20240106093239190.png" style="zoom:67%;" /><p>举例:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">long</span> l<span class="token punctuation">,</span> <span class="token keyword">float</span> f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"hello, world"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./../jvm-class2/image-20240106093419431.png" alt="对应图示"></p><blockquote><p>在栈帧中，与性能调优关系最为密切的部分就是局部变量表。局部变量表中的变量也是重要的垃圾回收根节点，只要被局部变量表中直接或间接引用的对象都不会被回收。</p><p>在方法执行时，虚拟机使用局部变量表完成方法的传递。</p></blockquote><h3 id="1-局部变量压栈指令">1-局部变量压栈指令</h3><ul><li><p>局部变量压栈指令将给定的局部变量表中的数据压入操作数栈。</p></li><li><p>这类指令大体可以分为：</p></li></ul><blockquote><p><code>xload_&lt;n&gt;</code> (x 为 i、l、f、d、a，n 为 0 到 3)<br><code>xload</code> (x 为 i、l、f、d、a)</p></blockquote><blockquote><p>说明：在这里，x 的取值表示数据类型。</p><p>指令 <code>xload_n</code> 表示将第 n 个局部变量压入操作数栈，比如 <code>iload_1</code>、<code>fload_0</code>、<code>aload_0</code> 等指令。其中<code>aload_n</code> 表示将一个对象引用压栈。<br>指令 <code>xload</code> 通过指定参数的形式，把局部变量压入操作数栈，当使用这个命令时，表示局部变量的数量可能超过了4个，比如指令<code>iload</code>、<code>fload</code> 等。</p></blockquote><p><strong>代码示例:</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 局部变量压入栈</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span> <span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token keyword">long</span> count<span class="token punctuation">,</span> <span class="token keyword">boolean</span> flag<span class="token punctuation">,</span> <span class="token keyword">short</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./../jvm-class2/image-20240106095818409.png" alt=""></p><h3 id="2-常量入栈指令">2-常量入栈指令</h3><p>常量入栈指令的功能是将常数压入操作数栈，根据数据类型和入栈内容的不同，又可以分为 <code>cost</code> 系列、<code>push</code> 系列和 <code>ldc</code> 指令。</p><ul><li>指令 <code>const</code> 系列：<ul><li>用于对特定的常量入栈，入栈的常量隐含在指令本身里。指令有：<code>iconst_&lt;i&gt;</code> (i 从 -1 到 5)、<code>lconst_&lt;1&gt;</code> (1 从 0 到 1)、<code>fconst_&lt;f&gt;</code> (f 从 0 到 2)、<code>dconst_&lt;d&gt;</code>(d 从 0 到 1)、<code>aconst_null</code>。</li><li>比如:<br><code>iconst_m1</code> 将 -1 压入操作数栈;<br><code>iconst_×</code> (x 为 0 到 5)将 x 压入栈;<br><code>lconst_0</code>、<code>lconst_1</code> 分别将长整数 0 和 1 压入栈;<br><code>fconst_0</code>、<code>fconst_1</code>、<code>fconst_2</code> 分别将浮点数 0、1、2压入栈;<br><code>dconst_0</code> 和 <code>dconst_1</code> 分别将 double 型 0 和 1 压入栈;<br><code>aconst_null</code> 将<code>null</code> 压入操作数栈;</li><li>从指令的命名上不难找出规律，指令助记符的第一个字符总是喜欢表示数据类型，i 表示整数，l 表示长整数，f 表示浮点数，d 表示双精度浮点，习惯上用 a 表示对象引用。如果指令隐含操作的参数，会以下划线形式给出。</li></ul></li><li>指令 <code>push</code> 系列:<ul><li>主要包括 <code>bipush</code> 和 <code>sipush</code> 。它们的区别在于接收数据类型的不同，<code>bipush</code> 接收 8 位整数作为参数，<code>sipush</code> 接收 16 位整数，它们都将参数压入栈。</li></ul></li><li>指令 <code>ldc</code> 系列:<ul><li>如果以上指令都不能满足需求，那么可以使用万能的 ldc 指令，它可以接收一个 8 位的参数，该参数指向常量池中的 int、float 或者 String 的索引，将指定的内容压入堆栈。</li><li>类似的还有 <code>ldc_w</code> , 它接收两个 8 位参数, 能支持的索引范围大于 <code>ldc</code>。</li><li>如果要压入的元素是 long 或者 double 类型的, 则使用 <code>ldc2_w</code> 指令, 使用方式都是类似的。</li></ul></li></ul><pre class="line-numbers language-null" data-language="null"><code class="language-null">举例int i &#x3D; 3;const_3int j &#x3D; 6;bipush 6int k &#x3D; 32768 ldc 索引<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>类型</th><th>常数指令</th><th>范围</th></tr></thead><tbody><tr><td>int (boolean, byte, char, short)</td><td>iconst</td><td>[-1, 5]</td></tr><tr><td></td><td>bipush</td><td>[-128, 127]</td></tr><tr><td></td><td>sipush</td><td>[-32768, 32767]</td></tr><tr><td></td><td>ldc</td><td>any int value</td></tr><tr><td>long</td><td>lconst</td><td>0, 1</td></tr><tr><td></td><td>ldc</td><td>any long value</td></tr><tr><td>float</td><td>fconst</td><td>0, 1, 2</td></tr><tr><td></td><td>ldc</td><td>any float value</td></tr><tr><td>double</td><td>dconst</td><td>0, 1</td></tr><tr><td></td><td>ldc</td><td>any double value</td></tr><tr><td>reference</td><td>aconst</td><td>null</td></tr><tr><td></td><td>ldc</td><td>String literal, Class literal</td></tr></tbody></table><p><strong>代码示例:</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pushCounstLdc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> e <span class="token operator">=</span> <span class="token number">12344567</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./../jvm-class2/image-20240106102527127.png" alt=""></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">constLdc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> a1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> a2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> b1 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> b2 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> c1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> c2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token class-name">Date</span> d <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./../jvm-class2/image-20240106103251827.png" alt=""></p><blockquote><p>注意：常量入栈指令中的 n 和局部变量压栈指令中的 n 不一样，本次的 n 代表数值或者对象，而不是局部变量表中的下标</p></blockquote><h3 id="3-出栈装入局部变量表指令">3-出栈装入局部变量表指令</h3><p>出栈装入局部变量表指令用于将操作数栈中栈顶元素弹出后，装入局部变量表的指定位置，用于给局部变量赋值</p><p>这类指令主要以 store 的形式存在，比如 <code>xstore</code> (x 为 i、l、f、d、a)、<code>xstore_n</code>(x 为 i、l、f、d、a，n 为 0 至 3)。</p><ul><li>其中，指令 <code>istore_n</code> 将从操作数栈中弹出一个整数，并把它赋值给局部变量索引 n 位置。</li><li>指令<code>xstore</code> 由于没有隐含参数信息，故需要提供一个 byte 类型的参数类指定目标局部变量表的位置。</li></ul><p><strong>说明:</strong></p><ul><li><p><strong>一般说来，类似像 stor 这样的命令需要带一个参数，用来指明将弹出的元素放在局部变量表的第几个位置</strong>。但是，为了尽可能压缩指令大小，使用专门的 <code>istore_1</code> 指令表示将弹出的元素放置在局部变量表第 1 个位置。类似的还有 <code>istore_0</code>、<code>istore_2</code>、<code>istore_3</code>，它们分别表示从操作数栈顶弹出一个元素，存放在局部变量表第 0、2、3 个位置。</p></li><li><p>由于局部变量表前几个位置总是非常常用，因此<strong>这种做法虽然增加了指令数量，但是可以大大压缩生成的字节码的体积</strong>。</p></li><li><p>如果局部变量表很大，需要存储的槽位大于 3，那么可以使用 <code>istore</code> 指令，外加一个参数，用来表示需要存放的槽位位置。</p></li></ul><p><strong>代码示例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//3.出栈装入局部变量表指令</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">store</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">double</span> d<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> k <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"dee"</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token number">10.0F</span><span class="token punctuation">;</span>    d <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./../jvm-class2/image-20240106105001697.png" alt=""></p><p><img src="./../jvm-class2/image-20240106105603987.png" alt="槽位复用"></p><h2 id="03-算数指令">03-算数指令</h2><p><strong>1、作用：</strong></p><p>算术指令用于对两个操作数栈上的值进行某种特定运算，并把结果重新压入操作数栈。<br><strong>2、分类：</strong></p><p>大体上算术指令可以分为两种：对<strong>整型数据</strong>进行运算的指令与对<strong>浮点类型数据</strong>进行运算的指令。<br><strong>3、byte、short、char和boolean:类型说明</strong></p><p>在每一大类中，都有针对 Java 虚拟机具体数据类型的专用算术指令。但没有直接支持 byte、short、char 和 boolean 类型的算术指令，对于这些数据的运算，都使用 int 类型的指令来处理。此外，在处理boolean、byte、short 和 char 类型的数组时，也会转换为使用对应的 int 类型的字节码指令来处理。</p><p><strong>Java虚拟机中的实际类型与运算类型</strong></p><table><thead><tr><th>实际类型</th><th>运算类型</th><th>分类</th></tr></thead><tbody><tr><td>boolean</td><td>int</td><td>一</td></tr><tr><td>byte</td><td>int</td><td>一</td></tr><tr><td>char</td><td>int</td><td>一</td></tr><tr><td>short</td><td>int</td><td>一</td></tr><tr><td>int</td><td>int</td><td>一</td></tr><tr><td>float</td><td>float</td><td>一</td></tr><tr><td>reference</td><td>reference</td><td>一</td></tr><tr><td>returnAddress</td><td>returnAddress</td><td>一</td></tr><tr><td>long</td><td>long</td><td>二</td></tr><tr><td>double</td><td>double</td><td>二</td></tr></tbody></table><p><strong>4、运算时的溢出</strong></p><p>数据运算可能会导致溢出，例如两个很大的正整数相加，结果可能是一个负数。其实 Java 虚拟机规范并无明确规定过整型数据溢出的具体结果，仅规定了在处理整型数据时，只有除法指令以及求余指令中当出现除数为 0 时会导致虚拟机抛出异常 ArithmeticException。<br><strong>5、运算模式</strong></p><ul><li>向最接近数舍入模式：JVM 要求在进行浮点数计算时，所有的运算结果都必须舍入到适当的精度，非精确结果必须舍入为可被表示的最接近的精确值，如果有两种可表示的形式与该值一样接近，将优先选择最低有效位为零的;</li><li>向零舍入模式：将浮点数转换为整数时，采用该模式，该模式将在目标数值类型中选择一个最接近但是不大于原值的数字作为最精确的舍入结果;</li></ul><p><strong>6、NaN值使用</strong><br>当一个操作产生溢出时，将会使用有符号的无穷大表示，如果某个操作结果没有明确的数学定义的话，将会使用 NaN 值来表示。而且所有使用 NaN 值作为操作数的算术操作，结果都会返回NaN;</p><p><img src="./../jvm-class2/image-20240106112039355.png" alt=""></p><h3 id="所有算术指令">所有算术指令</h3><pre class="line-numbers language-null" data-language="null"><code class="language-null">加法指令: iadd、ladd、fadd、dadd减法指令: isub、lsub、fsub、dsub乘法指令: imul、lmul、fmul、dmul除法指令: idiv、ldiv、fdiv、ddiv求余指令: irem、lrem、frem、drem&#x2F;&#x2F;remainder: 余数取反指令: ineg、lneg、fneg、dnge&#x2F;&#x2F;negation: 取反自增指令: iinc&#x2F;&#x2F;注意: iinc 1 by 1 是指对局部变量表slot[1]的数据自增, 不是操作数栈位运算指令, 又可分为:- 位移指令: ishl、ishr、iushr、lshl、lshr、lushr- 按位或指令: ior、lor- 按位与指令: iand、land- 按位异或指令: ixor、lxor比较指令: dcmpg、dcmpl、fcmpg、fcmpl、lcmp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>代码举例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">float</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> j <span class="token operator">=</span> <span class="token operator">-</span>i<span class="token punctuation">;</span>    i <span class="token operator">=</span> <span class="token operator">-</span>j<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>    i <span class="token operator">+=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">method4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">method5</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">+</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./../jvm-class2/image-20240106114334466.png" alt=""></p><p>👍**++运算符**</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method6</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token operator">++</span>i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method7</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token operator">++</span>j<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method8</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    i <span class="token operator">=</span> i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./../jvm-class2/image-20240106120727259.png" alt=""></p><h3 id="比较指令的说明">比较指令的说明</h3><ul><li>比较指令的作用是比较栈顶两个元素的大小，并将比较结果入栈。</li><li>比较指令有：<code>dcmpg</code>、<code>dcmpl</code>、<code>fcmpg</code>、<code>fcmpl</code>、<code>lcmp</code>。<ul><li>与前面讲解的指令类似，首字符 d 表示 double 类型，f 表示 float , l 表示 long。</li></ul></li><li>对于 double 和 float 类型的数字，由于 NaN 的存在，各有两个版本的比较指令。以 float 为例，有 <code>fcmpg</code> 和 <code>fcmpl</code> 两个指令，它们的区别在于在数字比较时，若遇到NaN值，处理结果不同。</li><li>指令 <code>dcmpl</code> 和 <code>dcmpg</code> 也是类似的，根据其命名可以推测其含义，在此不再赘述。</li><li>指令 <code>lcmp</code> 针对 long 型整数，由于 long 型整数没有 NaN 值，故无需准备两套指令。</li></ul><p><strong>举例：</strong><br>指令 <code>fcmpg</code> 和 <code>fcmpl</code> 都从栈中弹出两个操作数，并将它们做比较，设栈顶的元素为 v2，栈顶顺位第 2 位的元素为 v1(v2在上, v1在下)</p><ul><li>若 <code>v1 = v2</code>，则压入 0;</li><li>若 <code>v1 &gt; v2</code> 则压入 1；</li><li>若 <code>v1 &lt; v2</code> 则压入-1。<br>两个指令的不同之处在于，如果遇到 NaN 值，<code>fcmpg</code> 会压入 1，而 <code>Fcmpl</code> 会压入 -1。</li></ul><blockquote><p>数值类型的数据，才以谈大小！(byte\short\char\int; long\float\double)<br>boolean、引用数据类型不能比较大小。</p><p>注意：NaN(Not a Number) 表示不是一个数字，比如 0.0/0.0 得到的可能是1.0（两个数相等），也可能是0.0（0.0是分子），也可能是无穷大（0.0是分母），所以老师给出的解释是 NaN 代表无法确定是什么数字，只有 double 和 float 类型中可能出现 NaN 的情况，而 long 类型不会出现 NaN ，所以只有 lcmp ，而没有 lcml</p></blockquote><h2 id="04-类型转换指令">04-类型转换指令</h2><p><strong>类型转换指令说明</strong></p><ol><li>类型转换指令可以将两种不同的数值类型进行相互转换。</li><li>这些转换操作一般用于实现用户代码中的显式类型转换操作，或者用来处理字节码指令集中数据类型相关指令无法与数据类型一一对应的问题。</li></ol><h3 id="1-宽化类型转换">1-宽化类型转换</h3><p><strong>宽化类型转换(Widening Numeric Conversions)</strong></p><p><strong>1、转换规则：</strong><br>Java虚拟机直接支持以下数值的宽化类型转换(widening numeric conversion, 小范围类型向大范围类型的安全转换)。也就是说，并不需要指令执行，包括：</p><ul><li>从 int 类型到 long、float 或者 double 类型。对应的指令为：i2l、i2f、i2d</li><li>从 long 类型到float、double类型。对应的指令为：12f、12d</li><li>从 float 类型到 double 类型。对应的指令为：f2d</li></ul><blockquote><p>简化为：int --&gt; long --&gt; float --&gt; double</p></blockquote><p><strong>2、精度损失问题</strong></p><ol><li><p>宽化类型转换是不会因为超过目标类型最大值而丢失信息的，例如，从 int 转换到 long, 或者从 int 转换到 double , 都不会丢失任何信息，转换前后的值是精确相等的。</p></li><li><p>从int、long 类型数值转换到 float , 或者 long 类型数值转换到 double 时，将可能发生精度丢失——可能丢失掉几个最低有效位上的值，转换后的浮点数值是根据 IEEE754 最接近舍入模式所得到的正确整数值。</p><p>尽管宽化类型转换实际上是可能发生精度丢失的，但是这种转换永远不会导致 Java 虚拟机抛出运行时异常。</p></li></ol><p><strong>3、补充说明</strong></p><ul><li><p><strong>从 byte、char 和 short 类型到 int 类型的宽化类型转换实际上是不存在</strong>的。对于 byte 类型转为 int, 虚拟机并没有做实质性的转化处理，只是简单地通过操作数栈交换了两个数据。而将 byte 转为 long 时，使用的是 i2l , 可以看到在内部 byte 在这里已经等同于 int 类型处理，类似的还有 short 类型，这种处理方式有两个特点：</p></li><li><p>一方面可以减少实际的数据类型，如果为 short 和 byte 都准备一套指令，那么指令的数量就会大增，<strong>而虚拟机目前的设计上，只愿意使用一个字节表示指令，因此指令总数不能超过256个，为了节省指令资源，将 short 和 byte 当做 int 处理也在情理之中。</strong></p></li><li><p>另一方面，由于局部变量表中的槽位固定为32位，无论是 byte 或者 short 存入局部变量表，都会占用32位空间。从这个角度说，也没有必要特意区分这几种数据类型。</p></li></ul><p><strong>代码示例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 针对于宽化类型转换的基本测试</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">upCast1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> l <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">float</span> f <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">double</span> d <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">float</span> f1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> d1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> d2 <span class="token operator">=</span> f1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 精度损失案例</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">upCast2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">111222333</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> f <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1.23123120 出现精度丢失</span>    <span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token number">111222333444555666L</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> d <span class="token operator">=</span> l<span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1.11222333444555664E17</span><span class="token punctuation">&#125;</span><span class="token comment">// byte, char, short类型到int类型的宽化类型转换实际上是不存在的</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cpCast3</span><span class="token punctuation">(</span><span class="token keyword">byte</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token keyword">long</span> l <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token keyword">double</span> d <span class="token operator">=</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">upCast4</span><span class="token punctuation">(</span><span class="token keyword">short</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token keyword">long</span> l <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token keyword">float</span> f <span class="token operator">=</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./../jvm-class2/image-20240106133833047.png" alt=""></p><h3 id="2-窄化类型转换">2-窄化类型转换</h3><p><strong>窄化类型转换(Narrowing Numeric Conversion)</strong><br><strong>1、转换规则</strong><br>Java虚拟机也直接支持以下窄化类型转换:</p><ul><li>从 int 类型至 byte, short 或者 char 类型. 对应的指令有：i2b、i2c、i2s</li><li>从 long 类型到 int 类型. 对应的指令有：l2i</li><li>从 float 类型到 int 或者 long 类型。对应的指令有：f2i、f2l</li><li>从 double 类型到 int、long 或者 float 类型。对应的指令有：d2i、d2l、d2f</li></ul><p><strong>2、精度损失问题</strong></p><p>窄化类型转换可能会导致转换结果具备不同的正负号、不同的数量级，因此，转换过程很可能会导致数值丢失精度</p><p>尽管数据类型窄化转换可能会发生上限溢出、下限溢出和精度丢失等情况，但是Java虚拟机规范中明确规定数值类型的窄化转换指令水远不可能导致虚拟机抛出运行时异常</p><blockquote><p>注意：从float、double、long等类型往byte、short、char类型转换的时候，需要先把前面几种类型转换成int类型，然后在从int类型转换到后面这几种类型，所以int类型相等于一种过渡类型</p></blockquote><p><strong>3、补充说明</strong></p><ul><li><p>当将一个浮点值窄化转换为整数类型 T (T 限于 int 或 long 类型之一)的时候，将遵循以下转换规则：</p><ul><li>如果浮点值是 NaN, 那转换结果就是 int 或 long 类型的 0</li><li>如果浮点值不是无穷大的话，浮点值使用 IEEE 754 的向零舍入模式取整，获得整数值 v ,如果 v 在目标类型 T(int 或 long) 的表示范围之内，那转换结果就是v。否则，将根据 v 的符号，转换为 T 所能表示的最大或者最小正数</li></ul></li><li><p>当将一个 double 类型窄化转换为 float 类型时，将遵循以下转换规则：</p><p>通过向最接近数舍入模式舍入一个可以使用 float 类型表示的数字。最后结果根据下面这3条规则判断：</p><ul><li>如果转换结果的绝对值太小而无法使用 float 来表示，将返回 float 类型的正负零。</li><li>如果转换结果的绝对值太大而无法使用 float 来表示，将返回 float 类型的正负无穷大。</li><li>对于 double 类型的 NaN 值将按规定转换为 float 类型的 NaN 值。</li></ul></li></ul><p><strong>代码示例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">downCast5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> d1 <span class="token operator">=</span> <span class="token class-name">Double<span class="token punctuation">.</span>NaN</span><span class="token punctuation">;</span> <span class="token comment">//0.0 / 0.0</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> d1<span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//NaN</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//0</span>    <span class="token keyword">double</span> d2 <span class="token operator">=</span>  <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token constant">POSITIVE_INFINITY</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> d2<span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> d2<span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//9223372036854775807</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//9223372036854775807</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2147483647</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2147483647</span>    <span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> d1<span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//NaN</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="05-对象的创建于访问指令">05-对象的创建于访问指令</h2><p>Java是面向对象的程序设计语言，虚拟机平台从字节码层面就对面向对象做了深层次的支持。有一系列指令专门用于对象操作，可进一步细分为创建指令、字段访问指令、数组操作指令、类型检查指令。</p><h3 id="1-创建指令">1-创建指令</h3><p>虽然类实例和数组都是对象，但]ava虚拟机对类实例和数组的创建与操作使用了不同的字节码指令：</p><ol><li>创建类实例的指令：<ul><li>创建类实例的指令：<code>new</code><ul><li>它接收一个操作数，为指向常量池的索引，表示要创建的类型，执行完成后，将对象的引用压入栈。</li></ul></li></ul></li></ol><p><img src="./../jvm-class2/image-20240106142557664.png" alt="new的字节码指令"></p><ol start="2"><li>创建数组的指令：<ul><li>创建数组的指令：<code>newarray</code>、<code>anewarray</code>、<code>multianewarray</code><ul><li><code>newarray</code>: 创建基本类型数组</li><li><code>anewarray</code>: 创建引用类型数组</li><li><code>multianewarray</code>: 创建多维数组</li></ul></li></ul></li></ol><p><img src="./../jvm-class2/image-20240106143336444.png" alt="new arr"></p><p><img src="./../jvm-class2/image-20240106143421808.png" alt="new multianewarray"></p><p>上述创建指令可以用于创建对象或者数组，由于对象和数组在 Java 中的广泛使用，这些指令的使用频率也非常高。</p><h3 id="2-字段访问指令">2-字段访问指令</h3><p>对象创建后，就可以通过对象访问指令获取对象实例或数组实例中的字段或者数组元素。</p><ul><li>访问类字段(static 字段，或者称为类变量)的指令：<ul><li><code>getstatic</code>: 将当前用 static 修饰的字段压入操作数栈中</li><li><code>putstatic</code>: 将数据弹栈</li></ul></li><li>访问类实例字段（非 static 字段，或者称为实例变量）的指令：<ul><li><code>getfield</code>: 压栈</li><li><code>putfield</code>: 弹栈</li></ul></li></ul><p><strong>举例：</strong><br>以 <code>getstatic</code> 指令为例，它含有一个操作数，为指向常量池的 <code>Fieldref</code> 索引，它的作用就是获取 <code>Fieldref</code> 指定的<br>对象或者值，并将其压入操作数栈。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="./../jvm-class2/image-20240106144117955.png" alt=""></p><p><img src="./../jvm-class2/image-20240106154017401.png" alt="稍微复杂demo"></p><h3 id="3-数组操作指令">3-数组操作指令</h3><p>数组操作指令主要有：<code>xastore</code> 和 <code>xaload</code> 指令。具体为：</p><ul><li>把一个数组元素加载到操作数栈的指令：<code>baload</code>、<code>caload</code>、<code>saload</code>、<code>iaload</code>、<code>laload</code>、<code>faload</code>、<code>daload</code>、<code>aaload</code></li><li>将一个操作数栈的值存储到数组元素中的指令：<code>bastore</code>、<code>castore</code>、<code>sastore</code>、 <code>iastore</code>、<code>lastore</code>、<code>fastore</code>、<code>dastore</code>、<code>aastore</code></li></ul><table><thead><tr><th>数组类型</th><th>加载指令</th><th>存储指令</th></tr></thead><tbody><tr><td>byte(boolean)</td><td>baload</td><td>bastore</td></tr><tr><td>char</td><td>caload</td><td>castore</td></tr><tr><td>short</td><td>saload</td><td>sastore</td></tr><tr><td>int</td><td>iaload</td><td>iastore</td></tr><tr><td>long</td><td>laload</td><td>lastore</td></tr><tr><td>float</td><td>faload</td><td>fastore</td></tr><tr><td>double</td><td>daload</td><td>dastore</td></tr><tr><td>reference</td><td>aaload</td><td>aastore</td></tr></tbody></table><ul><li>取数组长度的指令: <code>arraylength</code><ul><li>该指令弹出栈顶的数组元素，获取数组的长度，将长度压入栈</li></ul></li></ul><p><strong>说明</strong></p><ul><li>指令 <code>xaload</code> 表示将数组的元素压栈，比如 <code>saload</code>、<code>caload</code> 分别表示压入 <code>short</code> 数组和 <code>char</code> 数组。指令 <code>xaload</code> 在执行时，要求操作数中栈顶元素为数组索引 i ，栈顶顺位第 2 个元素为数组引用 a ，该指令会弹出栈顶这两个元素，并将 a[i] 重新压入栈。</li><li><code>xastore</code> 则专门针对数组操作，以 <code>iastore</code> 为例，它用于给一个 int 数组的给定索引赋值。在 <code>iastore</code> 执行前，操作数栈顶需要以此准备 3 个元素：值、索引、数组引用，<code>iastore</code> 会弹出这 3 个值，并将值赋给数组中指定索引的位置。</li></ul><p><img src="./../jvm-class2/image-20240106160141019.png" alt="数组操作指令示例"></p><h3 id="4-类型检查指令">4-类型检查指令</h3><p>检查类实例或数组类型的指令：<code>instanceof</code>、<code>checkcast</code>。</p><ul><li>指令 <code>checkcast</code> 用于检查类型强制转换是否可以进行。如果可以进行，那么 <code>checkcast</code> 指令不会改变操作数栈，否则它会抛出 ClassCastException 异常。</li><li>指令 <code>instanceof</code> 用来判断给定对象是否是某一个类的实例，它会将判断结果压入操作数栈。</li></ul><h2 id="06-方法调用与返回指令">06-方法调用与返回指令</h2><h3 id="方法调用指令">方法调用指令</h3><ul><li><code>invokevirtual</code> 指令用于调用对象的实例方法，根据对象的实际类型进行分派（虚方法分派），支持多态。这也是 Java 语言中<strong>最常见的方法分派方式</strong>。</li><li><code>invokeinterface</code> 指令用于<strong>调用接口方法</strong>，它会在运行时搜索由特定对象所实现的这个接口方法，并找出适合的方法进行调用。</li></ul><p><img src="./../jvm-class2/image-20240106163409683.png" alt="invokeinterface 指令"></p><p><img src="./../jvm-class2/image-20240106182137779.png" alt="static 情况下"></p><ul><li><code>invokespecial</code> 指令用于调用一些需要特殊处理的实例方法，包括**实例初始化方法（构造器）、私有方法和父类方法。**这些方法都是静态类型绑定的，不会在调用时进行动态派发。</li></ul><p><img src="./../jvm-class2/image-20240106162611730.png" alt="invokespecial 指令"></p><ul><li><code>invokestatic</code> 指令用于调用命名类中的<strong>类中的类方法(static方法)</strong>。这是静态绑定的。</li></ul><p><img src="./../jvm-class2/image-20240106162933197.png" alt="invokestatic 指令"></p><ul><li><code>invokedynamic</code> 调用动态绑定的方法，这个是 JDK1.7 后新加入的指令。用于在运行时动态解析出调用点限定符所引用的方法，并执行该方法。前面4条调用指令的分派逻辑都固化在 Java 虚拟机内部，而 <code>invokedynamic</code> 指令的分派逻辑是由用户所设定的引导方法决定的。</li></ul><h3 id="方法返回指令">方法返回指令</h3><p>方法调用结束前，需要进行返回。方法返回指令是<strong>根据返回值的类型区分</strong>的。</p><ul><li>包括 <code>ireturn</code> (当返回值是boolean、byte、char、short 和 int 类型时使用)、lreturn、freturn、dreturn 和 areturn</li><li>另外还有一条return指令供声明为void的方法、实例初始化方法以及类和接口的类初始化方法使用。</li></ul><table><thead><tr><th>返回类型</th><th>返回指令</th></tr></thead><tbody><tr><td>void</td><td>return</td></tr><tr><td>int (boolean, byte, char, short)</td><td>ireturn</td></tr><tr><td>long</td><td>lreturn</td></tr><tr><td>float</td><td>freturn</td></tr><tr><td>double</td><td>dreturn</td></tr><tr><td>reference</td><td>areturn</td></tr></tbody></table><p><strong>举例：</strong></p><p>通过 <code>ireturn</code> 指令，将当前函数操作数栈的顶层元素弹出，并将这个元素压入调用者函数的操作数栈中（因为调用者非常关心函数的返回值)，所有在当前函数操作数栈中的其他元素都会被丢弃。</p><p>如果当前返回的是 synchronized 方法，那么还会执行一个隐含的 monitorexit 指令，退出临界区。</p><p>最后，会丢弃当前方法的整个帧，恢复调用者的帧，并将控制权转交给调用者。</p><h2 id="07-操作数栈管理指令">07-操作数栈管理指令</h2><p>如同操作一个普通数据结构中的堆栈那样，JVM 提供的操作数栈管理指令，可以用于直接操作操作数栈的指令。</p><p>这类指令包括如下内容：</p><ul><li>将一个或两个元素从栈顶弹出，并且直接废弃：<code>pop</code>, <code>pop2</code> ;</li></ul><p><img src="./../jvm-class2/image-20240106184820442.png" alt="pop 字节码指令"></p><p><img src="./../jvm-class2/image-20240106184953305.png" alt="pop2 字节码指令"></p><ul><li>复制栈顶一个或两个数值并将复制值或双份的复制值重新压入栈顶：<code>dup</code>, <code>dup2</code>, <code>dup_x1</code>, <code>dup2_x1</code>, <code>dup_x2</code>, <code>dup2_x2</code> ;</li></ul><p><img src="./../jvm-class2/image-20240106190045604.png" alt="👍dup_x2 字节码指令"></p><p><img src="./../jvm-class2/image-20240106191239053.png" alt="流程示例"></p><ul><li>将栈最顶端的两个 Slot 数值位置交换：<code>swap</code>。Java 虚拟机没有提供交换两个64位数据类型(long、double)数值的指令。</li><li>指令 <code>nop</code> ，是一个非常特殊的指令，它的字节码为 0x00。和汇编语言中的 <code>nop</code> 一样，它表示什么都不做。这条指令一般可用于调试、占位等。</li></ul><p>这些指令属于通用型，对栈的压入或者弹出无需指明数据类型。</p><p><strong>说明</strong></p><ul><li>不带 <code>_x</code> 的指令是复制栈顶数据并压入栈顶。包括两个指令，<code>dup</code> 和 <code>dup2</code>。<code>dup</code>的系数代表要复制的 Slot 个数。<ul><li><code>dup</code> 开头的指令用于复制 1 个 Slot 的数据。例如 1 个 int 或 1 个 reference 类型数据</li><li><code>dup2</code> 开头的指令用于复制 2 个 Slot 的数据。例如 1 个 long ,或 2 个 int ,或 1 个 int+1 个 float 类型数据</li></ul></li><li>带 <code>_x</code> 的指令是复制栈顶数据并插入栈顶以下的某个位置。共有 4 个指令，<code>dup_×1</code> , <code>dup2_×1</code>, <code>dup_x2</code>, <code>dup2_x2</code>。对于带 <code>_x</code> 的复制插入指令，只要将指令的 <code>dup</code> 和 x 的系数相加，结果即为需要插入的位置。因此<ul><li><code>dup_×1</code> 插入位置：1+1=2，即栈顶 2 个 Slot 下面</li><li><code>dup_×2</code> 插入位置：1+2=3，即栈顶 3 个 Slot 下面</li><li><code>dup2_×1</code> 插入位置：2+1=3，即栈顶 3 个 Slot 下面</li><li><code>dup2_×2</code> 插入位置：2+2=4，即栈顶 4 个 Slot 下面</li></ul></li><li><code>pop</code>: 将栈顶的 1 个 Slot 数值出栈。例如 1 个 short 类型数值</li><li><code>pop2</code>: 将栈顶的 2 个 Slot 数值出栈。例如 1 个 double 类型数值，或者 2 个 int 类型数值</li></ul><h2 id="08-控制转义指令">08-控制转义指令</h2><p>程序流程离不开条件控制，为了支持条件跳转，虚拟机提供了大量字节码指令，大体上可以分为:</p><ol><li>比较指令</li><li>条件跳转指令</li><li>比较条件跳转指令</li><li>多条件分支跳转指令</li><li>无条件跳转指令等</li></ol><h3 id="1-条件跳转指令">1-条件跳转指令</h3><p>条件跳转指令通常和比较指令结合使用。在条件跳转指令执行前，一般可以先用比较指令进行栈顶元素的准备，然后进行条件跳转。</p><ul><li><p>条件跳转指令有：</p><p><code>ifeq</code>、<code>iflt</code>、<code>ifle</code>、<code>ifne</code>、<code>ifgt</code>、<code>ifge</code>、<code>ifnull</code>、<code>ifnonnull</code>。这些指令都接收两个字节的操作数，用于计算跳转的位置(16位符号整数作为当前位置的offset)。</p></li><li><p>它们的统一含义为：弹出栈顶元素，测试它是否满足某一条件，如果满足条件，则跳转到给定位置。</p></li></ul><p><strong>具体说明</strong></p><table><thead><tr><th>指令</th><th>说明</th></tr></thead><tbody><tr><td><code>ifeq</code></td><td>当栈顶 int 类型数值等于( == ) 0 时跳转</td></tr><tr><td><code>ifne</code></td><td>当栈顶 int 类型数值不等于( != ) 0 时跳转</td></tr><tr><td><code>iflt</code></td><td>当栈顶 int 类型数值小于( &lt; ) 0 时跳转</td></tr><tr><td><code>ifle</code></td><td>当栈顶 int 类型数值小于等于( &lt;= ) 0 时跳转</td></tr><tr><td><code>ifgt</code></td><td>当栈顶 int 类型数值大于( &gt; ) 0 时跳转</td></tr><tr><td><code>ifge</code></td><td>当栈顶 int 类型数值大于等于( &gt;= ) 0 时跳转</td></tr><tr><td><code>ifnull</code></td><td>为 null 时跳转</td></tr><tr><td><code>ifnonnull</code></td><td>不为 null 时跳转</td></tr></tbody></table><p><img src="./../jvm-class2/image-20240106200908309.png" alt="控制转移指令 字节码示例"></p><p><strong>注意</strong></p><ol><li>与前面运算规则一致：<ul><li>对于boolean、byte、char、short 类型的条件分支比较操作，都是使用 int 类型的比较指令完成</li><li>对于long、float、double 类型的条件分支比较操作，则会先执行相应类型的比较运算指令，运算指令会返回一个整型值到操作数栈中，随后再执行 int 类型的条件分支比较操作来完成整个分支跳转</li></ul></li><li>由于各类型的比较最终都会转为 int 类型的比较操作，所以 Java 虚拟机提供的 int 类型的条件分支指令是最为丰富和强大的。</li></ol><h3 id="2-比较条件跳转指令">2-比较条件跳转指令</h3><p>比较条件跳转指令类似于比较指令和条件跳转指令的结合体，它将比较和跳转两个步骤合二为一。</p><ul><li><p>这类指令有：</p><p><code>if_icmpeq</code>、<code>if_icmpne</code>、<code>if_icmplt</code>、<code>if_icmpgt</code>、<code>if_icmple</code>、<code>if_icmpge</code>、<code>if_acmpeq</code> 和 <code>if_acmpne</code></p></li><li><p>其中指令助记符加上 <code>if_</code> 后，以字符 “i” 开头的指令针对 int 型整数操作（也包括 short 和 byte 类型），以字符 “a” 开头的指令表示对象引用的比较。</p></li></ul><p><strong>具体说明</strong></p><table><thead><tr><th>指令</th><th>说明</th></tr></thead><tbody><tr><td>if_icmpeq</td><td>比较栈顶两 int 类型数值大小, 当前者等于( == )后者时跳转</td></tr><tr><td>if_icmpne</td><td>比较栈顶两 int 类型数值大小, 当前者不等于( != )后者时跳转</td></tr><tr><td>if_icmplt</td><td>比较栈顶两 int 类型数值大小, 当前者小于( &lt; )后者时跳转</td></tr><tr><td>if_icmple</td><td>比较栈顶两 int 类型数值大小, 当前者小于等于( &lt;= )后者时跳转</td></tr><tr><td>if_icmpgt</td><td>比较栈顶两 int 类型数值大小, 当前者大于( &gt; )后者时跳转</td></tr><tr><td>if_icmpge</td><td>比较栈顶两 int 类型数值大小, 当前者大于等于( &gt;= )后者时跳转</td></tr><tr><td>if_acmpeq</td><td>比较栈顶两引用类型数值, 当结果相等( == )时跳转</td></tr><tr><td>if_acmpne</td><td>比较栈顶两引用类型数值, 当结果不相等( != )时跳转</td></tr></tbody></table><p>这些指令都接收两个字节的操作数作为参数，用于计算跳转的位置。同时在执行指令时，栈顶需要准备两个元素进行比较。</p><p>指令执行完成后，栈顶的这两个元素被清空，且没有任何数据入栈。<strong>如果预设条件成立，则执行跳转，否则，继续执行下一条语句。</strong></p><p><img src="./../jvm-class2/image-20240106203044098.png" alt="比较条件跳转指令 字节码示例"></p><h3 id="3-多条件分支跳转">3-多条件分支跳转</h3><p>多条件分支跳转指令是专为 switch-case 语句设计的，主要有 <code>tableswitch</code> 和 <code>lookupswitch</code>。</p><table><thead><tr><th>指令名称</th><th>描述</th></tr></thead><tbody><tr><td>tableswitch</td><td>用于 switch 条件跳转, case 值连续</td></tr><tr><td>lookupswitch</td><td>用于 switch 条件跳转, case 值不连续</td></tr></tbody></table><p>从助记符上看，两者都是 switch 语句的实现，它们的区别：</p><ul><li><code>tableswitch</code> 要求<strong>多个条件分支值是连续的</strong>，它内部只存放起始值和终止值，以及若干个跳转偏移量，通过给定的操作数 index ,可以立即定位到跳转偏移量位置，因此效率比较高。</li><li>指令 <code>lookupswitch</code> 内部<strong>存放着各个离散的 case-offset 对</strong>，每次执行都要搜索全部的case-offset对，找到匹配的 case 值，并根据对应的 offset 计算跳转地址，因此<strong>效率较低</strong>。</li></ul><p>指令 <code>tableswitch</code> 的示意图如下图所示。由于 tableswitch 的 case 值是连续的，因此只需要记录最低值和最高值，以及每一项对应的 offset 偏移量，根据给定的 index 值通过简单的计算即可直接定位到 offset。</p><p><img src="./../jvm-class2/image-20240106205131253.png" alt=""></p><p>指令 <code>lookupswitch</code> 处理的是离散的 case 值，但是出于效率考虑，<strong>将 case-offset 对按照 case 值大小排序</strong>，给定 index 时，需要查找与 index 相等的 case，获得其 offset，如果找不到则跳转到 default。指令 <code>lookupswitch</code> 如下图所示:</p><p><img src="./../jvm-class2/image-20240106205707776.png" alt=""></p><p><img src="./../jvm-class2/image-20240106214520880.png" alt="多条件分支跳转 int类型"></p><p><img src="./../jvm-class2/image-20240106214843775.png" alt="多条件分支跳转 String类型"></p><h3 id="4-无条件跳转">4-无条件跳转</h3><p>目前主要的无条件跳转指令为 <code>goto</code>。指令 <code>goto</code> 接收两个字节的操作数，共同组成一个带符号的整数，<strong>用于指定指令的偏移量，指令执行的目的就是跳转到偏移量给定的位置处。</strong></p><p>如果指令偏移量太大，超过双字节的带符号整数的范围，则可以使用指令 <code>goto_w</code>,它和 <code>goto</code> 有相同的作用，但是它接收4个字节的操作数，可以表示更大的地址范围。</p><p>指令 <code>jsr</code>、<code>jsr_w</code>、<code>ret</code> 虽然也是无条件跳转的，但主要用于 try-finally 语句，且己经被虚拟机逐渐废弃，故不在这里介绍这两个指令。</p><table><thead><tr><th>指令名称</th><th>描述</th></tr></thead><tbody><tr><td>goto</td><td>无条件跳转</td></tr><tr><td>goto_w</td><td>无条件跳转(宽索引)</td></tr><tr><td>jsr</td><td>跳转至指定16位 offset 位置, 并将 jsr 下一条指令地址压入栈顶</td></tr><tr><td>jsr_w</td><td>跳转至指定32位 offset 位置, 并将 jsr_w 下一条指令地址压入栈顶</td></tr><tr><td>ret</td><td>返回至由指定的局部变量所给出的指令位置(一般与 jsr、jsr_w 联合使用)</td></tr></tbody></table><p><img src="./../jvm-class2/image-20240106223005785.png" alt="无条件跳转 字节码示例"></p><p><img src="./../jvm-class2/image-20240106223332201.png" alt="无条件跳转 字节码示例"></p><h2 id="09-异常处理指令">09-异常处理指令</h2><h3 id="1-抛出异常指令">1-抛出异常指令</h3><ol><li><p><code>athrow</code> 指令</p><p>在 Java 程序中显示抛出异常的操作(throw 语句)都是由 <code>athrow</code> 指令来实现</p><p>除了使用 throw 语句显示抛出异常情况之外，<strong>JVM 规范还规定了许多运行时异常会在其他Java虚拟机指令检测到异常状况时自动抛出。</strong></p><ul><li>例如，在之前介绍的整数运算时，当除数为零时，虚拟机会在 <code>idiv</code> 或 <code>ldiv</code> 指令中抛出 ArithmeticException 异常。</li></ul></li><li><p><strong>注意</strong></p><p>正常情况下，操作数栈的压入弹出都是一条条指令完成的。唯一的例外情况是<strong>在抛异常时，Java 虚拟机会清除操作数栈上的所有内容，而后将异常实例压入调用者操作数栈上。</strong></p></li></ol><blockquote><p>异常及异常的处理:</p><p>过程一: 异常对象的生成过程 —&gt; thorw(手动 / 自动) —&gt; 指令: <code>athrow</code></p><p>过程二: 异常的处理: 抓抛模型. try-catch-finally —&gt; 使用异常表</p></blockquote><p><img src="./../jvm-class2/image-20240106225108694.png" alt="抛出异常指令"></p><h3 id="2-异常处理与异常表">2-异常处理与异常表</h3><p><strong>1、处理异常</strong></p><p>在 Java 虚拟机中，处理异常(catch 语句)不是由字节码指令来实现的（早期使用jsr、ret 指令），而是<strong>采用异常表来完成的</strong>。</p><p><strong>2、异常表</strong></p><p>如果一个方法定义了一个 try-catch 或者 try-finally 的异常处理，就会创建一个异常表。它包含了每个异常处理或者 finally 块的信息。异常表保存了每个异常处理信息。比如：</p><ul><li>起始位置</li><li>结束位置</li><li>程序计数器记录的代码处理的偏移地址</li><li>被捕获的异常类在常量池中的索引</li></ul><p><strong>当一个异常被抛出时，JVM 会在当前的方法里寻找一个匹配的处理，如果没有找到，这个方法会强制结束并弹出当前栈帧</strong>，并且异常会重新抛给上层调用的方法（在调用方法栈帧）。如果在所有栈帧弹出前仍然没有找到合适的异常处理，这个线程将终止。如果这个异常在最后一个非守护线程里抛出，将会导致 JVM 自己终止，比如这个线程是个 main 线程。</p><p><strong>不管什么时候抛出异常，如果异常处理最终匹配了所有异常类型，代码就会继续执行</strong>。在这种情况下，如果方法结束后没有抛出异常，仍然执行 finally 块，在 return 前，它直接跳到 finally 块来完成目标。</p><p><img src="./../jvm-class2/image-20240106230756279.png" alt="异常处理 字节码示例"></p><p><img src="./../jvm-class2/image-20240106232311847.png" alt="思考题"></p><h2 id="10-同步控制指令">10-同步控制指令</h2><p><strong>组成</strong></p><p>Java 虚拟机支持两种同步结构：<strong>方法级的同步</strong>和<strong>方法内部一段指令序列的同步</strong>，这两种同步都是使用 monitor 来支持的。</p><h3 id="1-方法级的同步">1-方法级的同步</h3><p>方法级的同步：<strong>是隐式的</strong>，即无须通过字节码指令来控制，它实现在方法调用和返回操作之中。虚拟机可以从方法常量池的方法表结构中的 ACC_SYNCHRONIZED 访问标志得知一个方法是否声明为同步方法；</p><p>当调用方法时，调用指令将会检查方法的 ACC_SYNCHRONIZED 访问标志是否设置。</p><ul><li>如果设置了，执行线程将先持有同步锁，然后执行方法。最后在方法完成（无论是正常完成还是非正常完成）时<strong>释放同步锁</strong>。</li><li>在方法执行期间，执行线程持有了同步锁，其他任何线程都无法再获得同一个锁。</li><li>如果一个同步方法执行期间抛出了异常，并且在方法内部无法处理此异常，那这个同步方法所持有的锁将在异常抛到同步方法之外时自动释放。</li></ul><p><img src="./../jvm-class2/image-20240106233448740.png" alt=""></p><p><strong>说明：</strong><br>这段代码和普通的无同步操作的代码没有什么不同，没有使用 monitorenter 和 monitorexit 进行同步区控制。这是因为，对于同步方法而言，<strong>当虚拟机通过方法的访问标示符判断是一个同步方法时，会自动在方法调用前进行加锁</strong>，当同步方法执行完毕后，不管方法是正常结束还是有异常抛出，均会由虚拟机释放这个锁。因此，对于同步方法而言，monitorenter 和<br>monitorexit 指令是隐式存在的，并未直接出现在字节码中。</p><h3 id="2-方法内指定指令序列的同步">2-方法内指定指令序列的同步</h3><p>同步一段指令集序列：通常是由 Java 中的 synchronized 语句块来表示的。JVM 的指令集有 <code>monitorenter</code> 和 <code>monitorexit</code> 两条指令来支持 <code>synchronized</code> 关键字的语义。</p><p>当一个线程进入同步代码块时，它使用 <code>monitorenter</code> 指令请求进入。如果当前对象的监视器计数器为0，则它会被准许进入，若为1，则判断持有当前监视器的线程是否为自己，如果是，则进入，否则进行等待，直到对象的监视器计数器为0，才会被允许进入同步块。</p><p>当线程退出同步块时，需要使用 monitorexit 声明退出。在 Java 虚拟机中，任何对象都有一个监视器与之相关联，用来判断对象是否被锁定，当监视器被持有后，对象处于锁定状态。</p><p>指令 monitorenter 和 monitorexit 在执行时，都需要在操作数栈顶压入对象，之后 monitorenter 和 monitorexit 的锁定和释放都是针对这个对象的监视器进行的。</p><p>下图展示了监视器如何保护临界区代码不同时被多个线程访问，只有当线程4离开临界区后，线程1、2、3才有可能进入。</p><p><img src="./../jvm-class2/image-20240106233717918.png" alt=""></p><p><img src="./../jvm-class2/image-20240106234904022.png" alt="指定指令序列同步 字节码示例"></p>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM-Class-01-class文件结构</title>
      <link href="/2024/01/02/jvm-class1/"/>
      <url>/2024/01/02/jvm-class1/</url>
      
        <content type="html"><![CDATA[<h1>Class文件结构</h1><h2 id="01-概述">01-概述</h2><h3 id="字节码文件的跨平台性">字节码文件的跨平台性</h3><p><strong>1. Java语言: 跨平台的语言</strong></p><ul><li>当Java源代码成功编译成字节码后, 如果想在不同的平台上面运行, 则无序再次编译</li><li>这个又是不再那么吸引人了. Python、PHP、Perl、Ruby、Lisp等有强大的解释器.</li><li>跨平台似乎已经成为一门语言必选的特性</li></ul><p><strong>2. Java虚拟机: 跨语言的平台</strong></p><p><strong>Java虚拟机不和包括Java在内的任何语言绑定，它只与&quot;Class文件&quot;这种特定的二进制文件格式所关联</strong>。无论使用何种语言进行软件开发，只要能将源文件编译为正确的Class文件，那么这种语言就可以在Java虚拟机上执行。可以说，统一而强大的Class文件结构，就是)ava虚拟机的基石、桥梁。</p><p><img src="./../jvm-class1/image-20240102211419534.png" alt=""></p><ul><li>所有的JVM全部遵守Java虚拟机规范，也就是说所有的JVM环境都是一样的, 这样一来字节码文件可以在各种JVM上运行。</li></ul><p><strong>3. 想要让一个Java程序正确地运行在JVM中，Java源码就必须要被编译为符合JVM规范的字节码。</strong></p><ul><li>前端编译器的主要任务就是负责将符合Java语法规范的Java代码转换为符合JVM规范的字节码文件。</li><li>javac是一种能够将Java源码编译为字节码的前端编译器。</li><li>Javac编译器在将Java源码编译为一个有效的字节码文件过程中经历了4个步骤，分别是<strong>词法解析、语法解析、语义解析以及生成字节码</strong>。</li></ul><p><img src="./../jvm-class1/02.jpg" alt=""></p><p>Oracle的JDK软件包括两部分内容:</p><ul><li>一部分是将Java源代码编译成Java虚拟机的指令集的编译器</li><li>另一部分是用于实现Java虚拟机的运行时环境</li></ul><h3 id="Java的前端编译器">Java的前端编译器</h3><p><img src="./../jvm-class1/03.jpg" alt=""></p><p>前端编译器 VS 后端编译器</p><ul><li>Java源代码的编译结果是字节码，那么肯定需要有一种编译器能够将Java源码编译为字节码，承担这个重要责任的就是配置在path环境变量中的<strong>javac编译器</strong>。javac是一种能够将Java源码编译为字节码的<strong>前端编译器</strong>。</li><li>HotSpot VM并没有强制要求前端编译器只能使用javac:来编译字节码，其实只要编译结果符合JVM规范都可以被JVM所识别即可。在Java的前端编译器领域，除了javac, 之外，还有一种被大家经常用到的前端编译器，那就是内置在Eclipse中的ECJ**(Eclipse Compiler for Java)编译器**。和Javac的全量式编译不同，ECJ是一种增量式编译器。<ul><li>在Eclipse中，当开发人员编写完代码后，使用<code>ctrl+S</code>快捷键时，ECJ编译器所采取的<strong>编译方案</strong>是把未编译部分的源码逐行进行编译，而非每次都全量编译。因此ECJ的编译效率会比javac更加迅速和高效，当然编译质量和javac相比大致还是一样的</li><li>ECJ不仅是Eclipse的默认内置前端编译器，在Tomcat中同样也是使用Ec]编译器来编译jsp文件。由于ECJ编译器是采用GPLv2的开源协议进行源代码公开，所以，大家可以登录eclipse官网下载ECJ编译器的源码进行二次开发。</li><li>默认情况下，Intelli]IDEA使用javac编译器。（还可以自己设置为AspectJ编译器ajc)</li></ul></li><li>前端编译器并不会直接涉及编译优化等方面的技术，而是将这些具体优化细节移交给HotSpot的]IT编译器负责。<br>复习：A0T(静态提前编译器，Ahead of Time Compiler)</li></ul><h3 id="透过字节码指令看代码细节">透过字节码指令看代码细节</h3><p><strong>面试题</strong></p><ol><li>类文件结构有几个部分</li><li>知道字节码吗? 字节码都有哪些? <code>Integer x = 5; int y = 5; 比较 x == y</code> 都经过哪些步骤</li></ol><p><strong>代码举例</strong></p><p>demo1</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Integer</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Integer</span> i1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token class-name">Integer</span> i2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1 <span class="token operator">==</span> i2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>    <span class="token class-name">Integer</span> i3 <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>    <span class="token class-name">Integer</span> i4 <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i3 <span class="token operator">==</span> i4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>demo2</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"helloworld"</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str <span class="token operator">==</span> str1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"helloworld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str <span class="token operator">==</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>demo3👍</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        x <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Father.x = "</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token comment">//    float x = 30.1F;</span>    <span class="token keyword">public</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        x <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Son.x = "</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SonTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Father</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>成员变量（非静态的）的赋值过程：</strong></p><ol><li>默认初始化</li><li>显式初始化 /代码块中初始化</li><li>构造器中初始化</li><li>有了对象之后，可以&quot;对象.属性&quot;或&quot;对象.方法&quot;<br>的方式对成员变量进行赋值。</li></ol><p><img src="./../jvm-class1/image-20240102223451407.png" alt=""></p><h2 id="02-虚拟机的基石：Class文件">02-虚拟机的基石：Class文件</h2><p><strong>字节码文件里是什么?</strong></p><ul><li>源代码经过编译器编译之后便会生成一个字节码文件, 字节码是一种二进制的类文件, 它的内容是JVM的指令, 而不像C、C++经由编译器直接生成<strong>机器码</strong></li></ul><p><strong>什么是字节码指令(byte code)?</strong></p><ul><li>Java虚拟机的指令由一个字节长度的、代表着某种特定操作含义的<strong>操作码</strong>(opcode)以及跟随其后的零至多个代表次操作所需参数的<strong>操作数</strong>(operand)所构成. 虚拟机中许多指令并不包含操作数, 只有一个操作码.</li></ul><p>比如: 操作码 (操作数)</p><p><img src="./../jvm-class1/image-20240102224120690.png" alt=""></p><p><strong>如何解读供虚拟机解释执行的二进制字节码？</strong></p><ul><li>一个一个二进制的看。这里用到的是Notepad+.+,需要安装一个HEX-Editor插件，或者使用Binary Viewer</li><li>使用javap指令: jdk自带的反解析工具</li><li>使用IDEA插件: jclasslib 或 jclasslib bytecode viewer客户端工具</li></ul><h2 id="03-Class文件结构">03-Class文件结构</h2><p><a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html">官方文档</a></p><p><strong>Class类的本质</strong></p><p>任何一个Class文件都对应着唯一一个类或接口的定义信息，但反过来说，Class文件实际上它并不一定以磁盘文件的形式存在。Class文件是一组以8位字节为基础单位的<strong>二进制流</strong>。</p><p><strong>Class文件格式</strong></p><p>Class的结构不像XML等描述语言，由于它没有任何分隔符号。所以在其中的数据项，无论是字节顺序还是数量，都是被严格限定的，哪个字节代表什么含义，长度是多少，先后顺序如何，都不允许改变。</p><p>Class文件格式采用一种类似于C语言结构体的方式进行数据存储，这种结构中只有两种数据类型：<strong>无符号数</strong>和<strong>表</strong>。</p><ul><li>无符号数属于基本的数据类型，以u1、u2、u4、u8来分别代表1个字节、2个字节、4个字节和8个字节的无符号数，无符号数可以用来描述数字、索引引用、数量值或者按照UTF-8编码构成字符串值。</li><li>表是由多个无符号数或者其他表作为数据项构成的复合数据类型，所有表都习惯性地以&quot;_ifo&quot;结尾。表用于描述有层次关系的复合结构的数据，整个Class文件本质上就是一张表。由于表没有固定长度，所以通常会在其前面加上个数说明</li></ul><p><strong>代码举例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        num <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> num<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Class 文件结构概述</strong></p><p>Class文件的结构并不是一成不变的, 随着Java虚拟机的不断发展, 总是不可避免地对Class文件结构做出一些调整, 但是其基本结构和框架是非常稳定的.</p><p>Class文件的总体结构如下:</p><ul><li>魔数 magic</li><li>Class文件版本 minor_version + major_version</li><li>常量池 constant_pool_count + constant_pool[constant_pool_count-1]</li><li>访问标志 access_flags</li><li>类索引, 父类索引, 接口索引集合 this_class + super_class + interfaces_count interfaces[interfaces_count]</li><li>字段表集合 fields_count + fields[fields_count]</li><li>方法表集合 methods_count + methods[methods_count]</li><li>属性表集合 attributes_count + attributes[attributes_count]</li></ul><p><img src="./../jvm-class1/image-20240103221148437.png" alt="The ClassFile Structure"></p><table><thead><tr><th>类型</th><th>名称</th><th>说明</th><th>长度</th><th>数量</th></tr></thead><tbody><tr><td>u4</td><td>magic</td><td>魔数,识别Class文件格式</td><td>4个字节</td><td>1</td></tr><tr><td>u2</td><td>minor_version</td><td>副版本号(小版本)</td><td>2个字节</td><td>1</td></tr><tr><td>u2</td><td>major_version</td><td>主版本号(大版本)</td><td>2个字节</td><td>1</td></tr><tr><td>u2</td><td>constant_pool_count</td><td>常量池计数器</td><td>2个字节</td><td>1</td></tr><tr><td>cp_info</td><td>constant_pool</td><td>常量池表</td><td>n个字节</td><td>constant_pool_count-1</td></tr><tr><td>u2</td><td>access_flags</td><td>访问标识</td><td>2个字节</td><td>1</td></tr><tr><td>u2</td><td>this_class</td><td>类索引</td><td>2个字节</td><td>1</td></tr><tr><td>u2</td><td>super_class</td><td>父类索引</td><td>2个字节</td><td>1</td></tr><tr><td>u2</td><td>interfaces_count</td><td>接口计数器</td><td>2个字节</td><td>1</td></tr><tr><td>u2</td><td>interfaces</td><td>接口索引集合</td><td>2个字节</td><td>interfaces_count</td></tr><tr><td>u2</td><td>fields_count</td><td>字段计数器</td><td>2个字节</td><td>1</td></tr><tr><td>field_info</td><td>fields</td><td>字段表</td><td>n个字节</td><td>fields_count</td></tr><tr><td>u2</td><td>methods_count</td><td>方法计数器</td><td>2个字节</td><td>1</td></tr><tr><td>method_info</td><td>methods</td><td>方法表</td><td>n个字节</td><td>methods_count</td></tr><tr><td>u2</td><td>attributes_count</td><td>属性计数器</td><td>2个字节</td><td>1</td></tr><tr><td>attribute_info</td><td>attributes</td><td>属性表</td><td>n个字节</td><td>attributes_count</td></tr></tbody></table><h3 id="魔数-Class文件的标志">魔数: Class文件的标志</h3><p><strong>Magic Number(魔数)</strong></p><ul><li>每个Class文件开头的4个字节的无符号整数称为魔数(Magic Number)</li><li>它的唯一作用是确定这个文件是否为一个能被虚拟机接受的有效合法的Class文件。即：魔数是Class文件的标识符。</li><li>魔数值固定为0XCAFEBABE。不会改变。</li><li>如果一个Class文件不以0xCAFEBABE开头，虚拟机在进行文件校验的时候就会直接抛出以下错误：</li></ul><blockquote><p>Error: A JNI error has occurred,please check your installation and try again Exception in thread “main” java.lang.ClassFormatError:Incompatible magic value 1885430635 in class file StringTest</p></blockquote><ul><li>使用魔数而不是扩展名来进行识别主要是基于安全方面的考虑，因为文件扩展名可以随意地改动。</li></ul><h3 id="Class文件版本号">Class文件版本号</h3><ul><li>紧接着魔数的4个字节存储的是Class文件的版本号。同样也是4个字节。第5个和第6个字节所代表的含义就是编译的副版本号minor_version, 而第7个和第8个字节就是编译的主版本号major_version。</li><li>它们共同构成了class文件的格式版本号。譬如某个Class文件的主版本号为M,副版本号为m,那么这个Class文件的格式版本号就确定为M.m。</li><li>版本号和Java编译器的对应关系如下表：</li></ul><table><thead><tr><th>主版本(十进制)</th><th>副版本(十进制)</th><th>编译器版本</th></tr></thead><tbody><tr><td>45</td><td>3</td><td>1.1</td></tr><tr><td>46</td><td>0</td><td>1.2</td></tr><tr><td>47</td><td>0</td><td>1.3</td></tr><tr><td>48</td><td>0</td><td>1.4</td></tr><tr><td>49</td><td>0</td><td>1.5</td></tr><tr><td>50</td><td>0</td><td>1.6</td></tr><tr><td>51</td><td>0</td><td>1.7</td></tr><tr><td>52</td><td>0</td><td>1.8</td></tr><tr><td>53</td><td>0</td><td>1.9</td></tr><tr><td>54</td><td>0</td><td>1.10</td></tr><tr><td>55</td><td>0</td><td>1.11</td></tr></tbody></table><ul><li>Java的版本号是从45开始的，JDK1.1之后的每个JDK大版本发布主版本号向上加1。</li><li><strong>不同版本的Java编译器编译的Class文件对应的版本是不一样的。目前，高版本的们ava虚拟机可以执行由低版本编译器生成的Class文件，但是低版本的Java虚拟机不能执行由高版本编译器生成的Class文件。否则JVM会抛出java.lang.UnsupportedClassVersionError异常。（向下兼容）</strong></li><li>在实际应用中，由于开发环境和生产环境的不同，可能会导致该问题的发生。因此，需要我们在开发时，特别注意开发编译的<br>JDK版本和生产环境中的]DK版本是否一致。<ul><li>虚拟机JDK版本为<code>1.k(k&gt;=2)</code>时，对应的Class文件格式版本号的范围为<code>45.0-44+k.0</code>(含两端)。</li></ul></li></ul><h3 id="常量池：存放所有常量">常量池：存放所有常量</h3><ul><li>常量池是Class文件中内容最为丰富的区域之一。常量池对于Class文件中的字段和方法解析也有着至关重要的作用。</li><li>随着Java虚拟机的不断发展，常量池的内容也日渐丰富。可以说，常量池是整个Class文件的基石。</li><li>在版本号之后，紧跟着的是常量池的数量，以及若干个常量池表项。</li><li>常量池中常量的数量是不固定的，所以在常量池的入口需要放置一项u2类型的无符号数，代表常量池容量计数值(constant_pool_count)。与Java中语言习惯不一样的是，这个容量计数是从1而不是0开始的。</li></ul><table><thead><tr><th>类型</th><th>名称</th><th>数量</th></tr></thead><tbody><tr><td>u2(无符号数)</td><td>constant_pool_count</td><td>1</td></tr><tr><td>cp_info(表)</td><td>constant_pool</td><td>constant_pool_count-1</td></tr></tbody></table><p>由上表可见，Class文件使用了一个前置的容量计数器(constant_pool_count)加若干个连续的数据项(constant_pool)的形式来描述常量池内容。我们把这一系列连续常量池数据称为常量池集合。</p><ul><li><strong>常量池表项</strong>中，用于存放编译时期生成的各种<strong>字面量</strong>和<strong>符号引用</strong>，这部分内容将在类加载后进入方法区的<strong>运行时常量池</strong>中存放。</li></ul><h4 id="常量池计数器">常量池计数器</h4><p><strong>constant_pool count(常量池计数器)</strong></p><ul><li>由于常量池的数量不固定，时长时短，所以需要放置两个字节来表示常量池容量计数值。</li><li>常量池容量计数值(u2类型)：从1开始，表示常量池中有多少项常量。即constant_poo1_count=1表示常量池中有0个常量项</li><li>Demo的值为：</li></ul><p><img src="./../jvm-class1/image-20240103225157121.png" alt="字节码解析"></p><p>其值为0x0016 = 22。<br>需要注意的是，这实际上只有21项常量。索引为范围是1-21。为什么呢？</p><blockquote><p>通常我们写代码时都是从0开始的，但是这里的常量池却是从1开始，因为它把第0项常量空出来了。这是为了满足后面某些指向常量池的索引值的数据在特定情况下需要表达“不引用任何一个常量池项目”的含义，这种情况可用索引值0来表示。</p></blockquote><h4 id="常量池表">常量池表</h4><p><strong>constant_pool [] (常量池表)</strong></p><ul><li>constant_pool是一种表结构，以1 ~ constant_pool_count - 1为索引。表明了后面有多少个常量项。</li><li>常量池主要存放两大类常量：<strong>字面量(Literal)<strong>和</strong>符号引用(Symbolic References)</strong></li><li>它包含了Class文件结构及其子结构中引用的所有字符串常量、类或接口名、字段名和其他常量。常量池中的每一项都具备相同的特征。第1个字节作为类型标记，用于确定该项的格式，这个字节称为tag byte(标记字节、标签字节)。</li></ul><table><thead><tr><th>类型</th><th>标志(或标识)</th><th>0x16</th><th>描述</th></tr></thead><tbody><tr><td>CONSTANT_utf8_info</td><td>1</td><td>01</td><td>UTF-8编码的字符串</td></tr><tr><td>CONSTANT_Integer_info</td><td>3</td><td>03</td><td>整形字面量</td></tr><tr><td>CONSTANT_Float_info</td><td>4</td><td>04</td><td>浮点型字面量</td></tr><tr><td>CONSTANT_Long_info</td><td>5</td><td>05</td><td>长整型字面量</td></tr><tr><td>CONSTANT_Double_info</td><td>6</td><td>06</td><td>双精度浮点型字面量</td></tr><tr><td>CONSTANT_Class_info</td><td>7</td><td>07</td><td>类或接口的符号引用</td></tr><tr><td>CONSTANT_String_info</td><td>8</td><td>08</td><td>字符串类型字面量</td></tr><tr><td>CONSTANT_Fieldref_info</td><td>9</td><td>09</td><td>字段的符号引用</td></tr><tr><td>CONSTANT_Methodref_info</td><td>10</td><td>0a</td><td>类中方法的符号引用</td></tr><tr><td>CONSTANT_InterfaceMethodref_info</td><td>11</td><td>0b</td><td>接口中方法的符号引用</td></tr><tr><td>CONSTANT_NameAndType_info</td><td>12</td><td>0c</td><td>字段或方法的符号引用</td></tr><tr><td>CONSTANT_MethodHandle_info</td><td>15</td><td>0f</td><td>表示方法句柄</td></tr><tr><td>CONSTANT_MethodType_info</td><td>16</td><td>10</td><td>标志方法类型</td></tr><tr><td>CONSTANT_InvokeDynamic_info</td><td>18</td><td>12</td><td>表示一个动态方法调用点</td></tr></tbody></table><p><strong>字面量和符号引用</strong></p><p>在对这些常量解读前，我们需要搞清楚几个概念。<br>常量池主要存放两大类常量：字面量(Literal)和符号引用(Symbolic References)。如下表：</p><table><thead><tr><th>常量</th><th>具体的常量</th><th>举例</th></tr></thead><tbody><tr><td>字面量</td><td>文本字符串</td><td>String str = “dee”;</td></tr><tr><td></td><td>声明为final的常量值</td><td>final int NUM = 10;</td></tr><tr><td>符号引用</td><td>类和接口的全限定名</td><td>cn/saddyfire/test/Demo</td></tr><tr><td></td><td>字段的名称和描述符</td><td>add</td></tr><tr><td></td><td>方法的名称和描述符</td><td></td></tr></tbody></table><ul><li>全限定名</li></ul><p><code>cn/saddyfire/test/Demo</code>这个就是类的全限定名，仅仅是把包名的&quot;.“替换成”/“，为了使连续的多个全限定名之间不产生混淆，在使用时最后一般会加入一个”;&quot;表示全限定名结束。</p><ul><li>简单名称</li></ul><p>简单名称是指没有类型和参数修饰的方法或者字段名称，上面例子中的类的add()方法和num字段的简单名称分别是add和num。</p><ul><li>描述符</li></ul><p>**描述符的作用是用来描述字段的数据类型、方法的参数列表（包括数量、类型以及顺序）和返回值。**根据描述符规则，基本数据类型<br>(byte、char、double、float、int、long、short、boolean)以及代表无返回值的void类型都用一个大写字符来表示，而对<br>象类型则用字符L加对象的全限定名来表示，详见下表：(数据类型: 基本数据类型、引用数据类型)</p><table><thead><tr><th>标识符</th><th>含义</th></tr></thead><tbody><tr><td>B</td><td>基本数据类型byte</td></tr><tr><td>C</td><td>基本数据类型char</td></tr><tr><td>D</td><td>基本数据类型double</td></tr><tr><td>F</td><td>基本数据类型float</td></tr><tr><td>I</td><td>基本数据类型int</td></tr><tr><td>J</td><td>基本数据类型long</td></tr><tr><td>S</td><td>基本数据类型short</td></tr><tr><td>Z</td><td>基本数据类型boolean</td></tr><tr><td>V</td><td>代表void类型</td></tr><tr><td>L</td><td>对象类型, 比如: Ljava/lang/Object</td></tr><tr><td>[</td><td>数组类型, 代表一维数组. 比如: <code>double[][][] is [[[D</code></td></tr></tbody></table><p>用描述符来描述方法时，按照先参数列表，后返回值的顺序描述，参数列表按照参数的严格顺序放在一组小括号&quot;()&quot;之内。如方法<br><code>java.lang.String toString()</code>的描述符为<code>() Ljava/lang/String;</code>,方法<code>int abc(int[]x,inty)</code>的描述符为<code>([II)I</code>。</p><blockquote><p><strong>补充说明:</strong></p><p>虚拟机在加截Cla55文件时才会进行动态接，也就是说，Class文件中不会保存各个方法和字段的最终内存布局信息，因此，这些字段和方法的符号引用不经过转换是无法直接被虚拟机使用的。<strong>当虚拟机运行时，需要从常量池中获得对应的符号引用，再在类加载过程中的解析阶段将其替换为直接引用，并译到具体的内存地址中。</strong><br>这里说明下符号引用和直接引用的区别与关联：</p><ul><li>符号引用：符号引用以<strong>一组符号</strong>来述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可。<strong>符号引用与虚拟机实现的内存布局无关</strong>，引用的目标并不一定己经加载到了内存中。</li><li>直接引用：直接引用可以是直接<strong>指向目标的指针、相对偏移量或是一个能间接定位到目标的向句柄。直接引用是与虚拟机实现的内存布局相关的</strong>，同一个符号引用在不同虚拟机实例上翻译出来的直接引用一般不会相同。如果有了直接引用，那说明引用的目标必定己经存在于内存之中了。</li></ul></blockquote><h5 id="常量类型和结构">常量类型和结构</h5><ul><li>常量类型和结构</li></ul><p>常量池中每一项常量都是一个表, JDK1.7之后共有14种不通的表结构数据. 如下表格所示</p><p><img src="./../jvm-class1/image-20240104201834430.png" alt=""></p><p><img src="./../jvm-class1/image-20240104211232941.png" alt="字节码解析"></p><h4 id="总结">总结</h4><ul><li>这14种表(或者常量项结构)的共同点是: 表开始的第一位是一个u1类型的标志位(tag), 代表当前这个常量项使用的是那种表结构, 即哪种常量类型。</li><li>在常量池列表中, CONSTANT_Utf8_info常量项时一种使用改进过的UTF-8编码格式来存储诸如文字字符串、类或者接口的全限定名、字段或者方法的简单名称以及描述符等常量字符串信息。</li><li>这14种常量项结构还有一个特点是，其中13个常量项占用的字节固定，只有CONSTANT_Utf8_info占用字节不固定，其大小由length决定。为什么呢？<strong>因为从常量池存放的内容可知，其存放的是字面量和符号引用，最终这些内容都会是一个字符串，这些字符串的大小是在编写程序时才确定</strong>，比如你定义一个类，类名可以取长取短，所以在没编译前，大小不固定，编译后，通过utf-8编码，就可以知道其长度。</li><li>常量池：可以理解为Class文件之中的资源仓库，它是Class文件结构中与其他项目关联最多的数据类型（后面的很多数据类<br>型都会指向此处)，也是占用Class文件空间最大的数据项目之一。</li><li>常量池中为什么要包含这些内容<ul><li>Java代码在进行Javac编译的时候，并不像C和C++那样有&quot;连接&quot;这一步骤，而是在虚拟机加载Class文件的时候进行动态链接。也就是说，<strong>在Class文件中不会保存各个方法、字段的最终内存布局信息，因此这些字段、方法的符号引用不经过运行期转换的话无法得到真正的内存入口地址，也就无法直接被虚拟机使用</strong>。当虚拟机运行时，需要从常量池获得对应的符号引用，再在类创建时或运行时解析、翻译到具体的内存地址之中。关于类的创建和动态链接的内容，在虚拟机类加载过程时再进行详细讲解。</li></ul></li></ul><h3 id="访问标识">访问标识</h3><p><strong>访问标识(access_flag、访问标志、访问标记)</strong></p><ul><li>在常量池后，紧跟着访问标记。该标记使用两个字节表示，用于识别一些类或者接口层次的访问信息，包括：这个Class是类还是接口；是否定义为public类型；是否定义为abstract类型；如果是类的话，是否被声明为final等。各种访问标记如下所示：</li></ul><table><thead><tr><th>标志名称</th><th>标志值</th><th>含义</th></tr></thead><tbody><tr><td>ACC_PUBLIC</td><td>0x0001</td><td>标志为public类型</td></tr><tr><td>ACC_FINAL</td><td>0x0010</td><td>标志被声明为final，只有类可以设置</td></tr><tr><td>ACC_SUPER</td><td>0x0020</td><td>标志允许使用invokespecial字节码指令的新语义，JDK1.0.2之后编译出来的类的这个标志默认为真。（使用增强的方法调用父类方法）</td></tr><tr><td>ACC_INTERFACE</td><td>0x0200</td><td>标志这是一个接口</td></tr><tr><td>ACC_ABSTRACT</td><td>0x0400</td><td>是否为abstract类型，对于接口或者抽象类来说，次标志值为真，其他类型为假</td></tr><tr><td>ACC_SYNTHETIC</td><td>0x1000</td><td>标志此类并非由用户代码产生（即：由编译器产生的类，没有源码对应）</td></tr><tr><td>ACC_ANNOTATION</td><td>0x2000</td><td>标志这是一个注解</td></tr><tr><td>ACC_ENUM</td><td>0x4000</td><td>标志这是一个枚举</td></tr></tbody></table><ul><li>类的访问权限通常为ACC_开头的常量。</li><li>每一种类型的表示都是通过设置访问标记的32位中的特定位来实现的。比如，若是pub1 ic final的类，则该标记为ACC_PUBLIC | ACC_FINAL</li><li>使用 ACC_SUPER 可以让类更准确地定位到父类的方法<code>super.method()</code>,现代编译器都会设置并且使用这个标记。</li></ul><p><img src="./../jvm-class1/image-20240104214507444.png" alt="字节码解析"></p><p><strong>补充说明：</strong></p><ol><li><p>带有 ACC_INTERFACE 标志的class文件表示的是接口而不是类，反之则表示的是类而不是接口。</p><ol><li>如果一个class文件被设置了 ACC_INTERFACE 标志，那么同时也得设置 ACC_ABSTRACT 标志。同时它不能再设置ACC_FINAL、<br>ACC_SUPER 或 ACC_ENUM 标志。</li><li>如I果没有设置ACC INTERFACE标志，那么这个class文件可以具有上表中除ACC_ANNOTATION外的其他所有标志。当然， ACC_FINAL 和 ACC_ABSTRACT 这类互斥的标志除外。这两个标志不得同时设置。</li></ol></li><li><p>ACC_SUPER 标志用于确定类或接口里面的 <em>invokespecial</em> 指令使用的是哪一种执行语义。<strong>针对门ava虚拟机指令集的编译器</strong><br><strong>都应当设置这个标志</strong>。对于Java SE 8及后续版本来说，无论class文件中这个标志的实际值是什么，也不管class文件的版本<br>号是多少，Java虚拟机都认为每个class文件均设置了 ACC_SUPER 标志。</p><ol><li>ACC_SUPER 标志是为了向后兼容由旧Java编译器所编译的代码而设计的。目前的ACC SUPER标志在由JDK1.0.2之前的<br>编译器所生成的access_flags中是没有确定含义的，如果设置了该标志，那么Oracle的Java虚拟机实现会将其忽略。</li></ol></li><li><p>ACC_SYNTHETIC 标志意味着该类或接口是由编译器生成的，而不是由源代码生成的。</p></li><li><p>注解类型必须设置 ACC_ANNOTATION 标志。如果设置了 ACC_ANNOTATION 标志，那么也必须设置 ACC_INTERFACE 标志。</p></li><li><p>ACC_ENUM 标志表明该类或其父类为枚举类型。</p></li></ol><h3 id="类索引、父类索引、接口索引集合">类索引、父类索引、接口索引集合</h3><ul><li>在访问标记后，会指定该类的类别、父类类别以及实现的接口，格式如下:</li></ul><table><thead><tr><th>长度</th><th>含义</th></tr></thead><tbody><tr><td>u2</td><td>this_class</td></tr><tr><td>u2</td><td>super_class</td></tr><tr><td>u2</td><td>interfaces_count</td></tr><tr><td>u2</td><td>interfaces[interfaces_count]</td></tr></tbody></table><ul><li>这三项数据来确定这个类的继承关系。<ul><li>类索引用于确定这个类的全限定名</li><li>父类索引用于确定这个类的父类的全限定名。由于 Java 语言不允许多重继承，所以父类索引只有一个，除了 java.lang.Object 之外，所有的Java类都有父类，因此除了 java.lang.Object 外，所有Java类的父类索引都不为0。</li><li>接口索引集合就用来描述这个类实现了哪些接口，这些被实现的接口将按 implements 语句（如果这个类本身是一个<br>接口，则应当是 extends 语句）后的接口顺序从左到右排列在接口索引集合中。</li></ul></li></ul><ol><li>this_class(类索引)<ul><li>2字节无符号整数，指向常量池的索引。它提供了类的全限定名，如com/atguigu/java1/Demo。this_class的值必须是对常量池表中某项的一个有效索引值。常量池在这个索引处的成员必须为CONSTANT_Class,_info类型结构体，该结构体表示这个Class文件所定义的类或接口。</li></ul></li><li>super_class(父类索引)<ul><li>2字节无符号整数，指向常量池的索引。它提供了当前类的父类的全限定名。如果我们没有继承任何类，其默认继承的是java/lang/Object类。同时，由于Java不支持多继承，所以其父类只有一个。</li><li>superclass指向的父类不能是final。</li></ul></li><li>interfaces<ul><li>指向常量池索引集合，它提供了一个符号引用到所有己实现的接口</li><li>由于一个类可以实现多个接口，因此需要以数组形式保存多个接口的索引，表示接口的每个索引也是一个指向常量池的<br>CONSTANT_Class(当然这里就必须是接口，而不是类)。</li></ul><ol><li>interfaces_count (接口计数器)<ul><li>interfaces_count:项的值表示当前类或接口的直接超接口数量。</li></ul></li><li>interfaces[ ] (接口索引集合)<ul><li>interfaces[] 中每个成员的值必须是对常量池表中某项的有效索引值，它的长度为interfaces_count.。每个成员interfaces[i]必须为 CONSTANT_Class_info 结构，其中 <code>0 &lt;= i &lt; interfaces_count</code>。在 interfaces[ ] 中，各成员所表示的接口顺序和对应的源代码中给定的接口顺序（从左至右）一样，即 interfaces[0] 对应的是源代码中最左边的接口。</li></ul></li></ol></li></ol><p><img src="./../jvm-class1/image-20240104230941036.png" alt="字节码解析"></p><h3 id="字段表集合">字段表集合</h3><p><strong>fields</strong></p><ul><li>用于描述接口或类中声明的变量。字段(field)包括<strong>类级变量以及实例级变量</strong>，但是不包括方法内部、代码块内部声明的局部变量(local variables)。</li><li>字段叫什么名字、字段被定义为什么数据类型，这些都是无法固定的，只能引用常量池中的常量来描述。</li><li>它指向常量池索引集合，它描述了每个字段的完整信息。比如**字段的标识符、访问修饰符(public、private 或 protected)、是类变量还是实例变量(static修饰符)、是否是常量(final修饰符)**等。</li></ul><p><strong>注意事项</strong></p><ul><li>字段表集合中不会列出从父类或者实现的接口中继承而来的字段，但有可能列出原本Java代码之中不存在的字段。譬如在内部类中为了保持对外部类的访问性，会自动添加指向外部类实例的字段。</li><li>在了Java语言中字段是无法重载的，两个字段的数据类型、修饰符不管是否相同，都必须使用不一样的名称，但是对于字节码来讲，如果两个字段的描述符不一致，那字段重名就是合法的。</li></ul><h4 id="fields-count-字段计数器">fields_count (字段计数器)</h4><ul><li>fields_count的值表示当前class文件fields表的成员个数。使用两个字节来表示。</li><li>fields表中每个成员都是一个field_info结构，用于表示该类或接口所声明的所有类字段或者实例字段，不包括方法内部声明<br>的变量，也不包括从父类或父接口继承的那些字段。</li></ul><h4 id="fields-字段表">fields [ ] (字段表)</h4><ul><li><p>fields表中的每个成员都必须是一个fields_info结构的数据项，用于表示当前类或接口中某个字段的完整描述。</p></li><li><p>一个字段的信息包括如下这些信息。这些信息中，<strong>各个修饰符都是布尔值，要么有，要么没有</strong>。</p><blockquote><p>作用域(public、private、protected修饰符)<br>是实例变量还是类变量(static修饰符)<br>可变性(fina1)<br>并发可见性(volatile修饰符，是否强制从主内存读写)<br>可否序列化(transient修饰符)<br>字段数据类型（基本数据类型、对象、数组）<br>字段名称</p></blockquote></li><li><p>字段表结构</p></li></ul><p>字段表作为一个表，同样有他自己的结构：</p><table><thead><tr><th>类型</th><th>名称</th><th>含义</th><th>数量</th></tr></thead><tbody><tr><td>u2</td><td>access_flags</td><td>访问标志</td><td>1</td></tr><tr><td>u2</td><td>name_index</td><td>字段名索引</td><td>1</td></tr><tr><td>u2</td><td>descriptor_index</td><td>描述符索引</td><td>1</td></tr><tr><td>u2</td><td>attributes_count</td><td>属性计数器</td><td>1</td></tr><tr><td>attribute_info</td><td>attributes</td><td>属性集合</td><td>attributes_count</td></tr></tbody></table><ul><li>字段表访问标识<ul><li>我们知道，一个字段可以被各种关键字去修饰，比如：作用域修饰符(public、private、protected)、static修饰符、final修饰符、volatile修饰符等等。因此，其可像类的访问标志那样，使用一些标志来标记字段。字段的访问标志有如下这些:</li></ul></li></ul><table><thead><tr><th>标志名称</th><th>标志值</th><th>含义</th></tr></thead><tbody><tr><td>ACC_PUBLIC</td><td>0x0001</td><td>字段是否为public</td></tr><tr><td>ACC_PRIVATE</td><td>0x0002</td><td>字段是否为private</td></tr><tr><td>ACC_PROTECTED</td><td>0x0004</td><td>字段是否为protected</td></tr><tr><td>ACC_STATIC</td><td>0x0008</td><td>字段是否为static</td></tr><tr><td>ACC_FINAL</td><td>0x0010</td><td>字段是否为final</td></tr><tr><td>ACC_VOLATILE</td><td>0x0040</td><td>字段是否为volatile</td></tr><tr><td>ACC_TRANSTENT</td><td>0x0080</td><td>字段是否为transient</td></tr><tr><td>ACC_SYNCHETIC</td><td>0x1000</td><td>字段是否为由编译器自动产生</td></tr><tr><td>ACC_ENUM</td><td>0x4000</td><td>字段是否为enum</td></tr></tbody></table><ul><li>字段名索引</li></ul><p>根据字段名索引的值, 查询常量池中的指定索引项即可</p><ul><li>描述符索引</li></ul><p>描述符的作用是用来描述字段的数据类型、方法的参数列表（包括数量、类型以及顺序）和返回值。根据描述符规则，基本数据类型(byte,char,double,float,int,1ong,short,boolean)及代表无返回值的void类型都用一个大写字符来表示，而对象则用字符L加对象的全限定名来表示，如下所示：</p><table><thead><tr><th>字符</th><th>类型</th><th>含义</th></tr></thead><tbody><tr><td>B</td><td>byte</td><td>有符号字节型数</td></tr><tr><td>C</td><td>char</td><td>Unicode字符, UTF-16 编码</td></tr><tr><td>D</td><td>double</td><td>双精度浮点数</td></tr><tr><td>F</td><td>float</td><td>单精度浮点数</td></tr><tr><td>I</td><td>int</td><td>整型数</td></tr><tr><td>J</td><td>long</td><td>长整数</td></tr><tr><td>S</td><td>short</td><td>有符号短整数</td></tr><tr><td>Z</td><td>boolean</td><td>布尔值 true/false</td></tr><tr><td>L Classname;</td><td>reference</td><td>一个名为Classname的实例</td></tr><tr><td>[</td><td>reference</td><td>一个一维数组</td></tr></tbody></table><p><img src="./../jvm-class1/image-20240104231010344.png" alt="字节码解析"></p><ul><li>属性表集合</li></ul><p>一个字段还可能拥有一些属性，用于存储更多的额外信息。比如初始化值、一些注释信息等。属性个数存放在attribute_count中，属性具体内容存放在attributes数组中。</p><p>以常量属性为例, 结构为:</p><pre class="line-numbers language-null" data-language="null"><code class="language-null">ConstantValue_attribute &#123;u2 attribute name_index;u4 attribute_length;u2 constantvalue index;&#125;说明: 对于常量属性而言, attribute_length值恒为2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法表集合">方法表集合</h3><p>methods: 指向常量池扉引集合，它完整描述了每个方法的签名。</p><ul><li>在字节码文件中，每一个method_info项都对应着一个类或者接口中的方法信息。比如方法的访问修饰符(public、private或protected),方法的返回值类型以及方法的参数信息等。</li><li>如果这个方法不是抽象的或者不是native的，那么字节码中会体现出来。</li><li>一方面，methods表只描述当前类或接口中声明的方法，不包括从父类或父接口继承的方法。另一方面，methods表有可能<br>会出现由编译器自动添加的方法，最典型的便是编译器产生的方法信息（比如：类（接口）初始化方法<code>&lt;clinit&gt;()</code>和实例初<br>始化方法<code>&lt;init&gt;()</code>)。</li></ul><p><strong>使用注意事项：</strong><br>在Java语言中，要重载(Overload)一个方法，除了要与原方法具有相同的简单名称之外，还要求必须拥有一个与原方法不同的特征签名，特征签名就是一个方法中各个参数在常量池中的字段符号引用的集合，也就是因为返回值不会包含在特征签名之中，因此Java语言里无法仅仅依靠返回值的不同来对一个已有方法进行重载。但在Class文件格式中，特征签名的范围更大一些，只要描述符不是完全一致的两个方法就可以共存。也就是说，如果两个方法有相同的名称和特征签名，但返回值不同，那么也是可以合法共存于同一个class文件中。</p><p>也就是说，尽管Java语法规范并不允许在一个类或者接口中声明多个方法签名相同的方法，但是和Java语法规范相反，字节码文件中却恰恰允许存放多个方法签名相同的方法，唯一的条件就是这些方法之间的返回值不能相同。</p><h4 id="methods-count-方法计数器">methods_count (方法计数器)</h4><p>methods_count的值表示当前class文件methods表的成员个数。使用两个字节来表示。</p><p>methods 表中每个成员都是一个method_info结构。</p><h4 id="methods-方法表">methods [ ] (方法表)</h4><ul><li>methods表中的每个成员都必须是一个method_info结构，用于表示当前类或接口中某个方法的完整描述。如果某个method_info结构的access_flags项既没有设置 ACC_NATIVE 标志也没有设置 ACC_ABSTRACT 标志，那么该结构中也应包含实现这个方法所用的Java虚拟机指令。</li><li>method_info结构可以表示类和接口中定义的所有方法，包括实例方法、类方法、实例初始化方法和类或接口初始化方法</li><li>方法表的结构实际跟字段表是一咩的，方法表结构如下：</li></ul><table><thead><tr><th>类型</th><th>名称</th><th>含义</th><th>数量</th></tr></thead><tbody><tr><td>u2</td><td>access_flags</td><td>访问标志</td><td>1</td></tr><tr><td>u2</td><td>name_index</td><td>方法名索引</td><td>1</td></tr><tr><td>u2</td><td>descriptor_index</td><td>描述符索引</td><td>1</td></tr><tr><td>u2</td><td>attributes_count</td><td>属性计数器</td><td>1</td></tr><tr><td>attribute_info</td><td>attributes</td><td>属性集合</td><td>attributes_count</td></tr></tbody></table><h4 id="方法表访问标志">方法表访问标志</h4><p>跟字段表一样, 方法表也有访问标志, 而且他们的标志有部分相同, 部分则不同, 放发表的具体访问标志如下:</p><table><thead><tr><th>标志名称</th><th>标志值</th><th>含义</th></tr></thead><tbody><tr><td>ACC_PUBLIC</td><td>0x0001</td><td>public, 方法可以从包外访问</td></tr><tr><td>ACC_PRIVATE</td><td>0x0002</td><td>private, 方法只能本类中访问</td></tr><tr><td>ACC_PROTECTED</td><td>0x0004</td><td>protected, 方法在自身和子类可以访问</td></tr><tr><td>ACC_STATIC</td><td>0x0008</td><td>static, 静态方法</td></tr></tbody></table><p><img src="./../jvm-class1/image-20240104233558080.png" alt="字节码解析"></p><h3 id="属性表集合">属性表集合</h3><p><strong>属性表集合(attributes)</strong></p><p>方法表集合之后的属性表集合，<strong>指的是Class文件所携带的辅助信息</strong>，比如该Class文件的源文件的名称。以及任何带有RetentionPolicy.CLASS 或者 RetentionPolicy.RUNTIME 的注解。这类信息通常被用于 Java 虚拟机的验证和运行，以及 Java 程序的调试，<strong>一般无须深入了解</strong>。</p><p>此外，字段表、方法表都可以有自己的属性表。用于描述某些场景专有的信息。</p><p>属性表集合的限制没有那么严格，不再要求各个属性表具有严格的顺序，并且只要不与已有的属性名重复，任何人实现的编译器<br>都可以向属性表中写入自己定义的属性信息，但 Java 虚拟机运行时会忽略掉它不认识的属性。</p><h4 id="attributes-count-属性计数器">attributes_count (属性计数器)</h4><p>attributes_count 的值表示当前 Class 文件属性表的成员个数. 属性表中每一项都是一个attribute_info结构</p><h4 id="attributes-属性表">attributes [ ] (属性表)</h4><p>属性表的每个项的值必须是attribute_info结构, 属性表的结构比较灵活, 各种不同的属性只要满足以下结构即可.</p><ul><li>属性的通用格式</li></ul><table><thead><tr><th>类型</th><th>名称</th><th>数量</th><th>含义</th></tr></thead><tbody><tr><td>u2</td><td>attribute_name_index</td><td>1</td><td>属性名索引</td></tr><tr><td>u4</td><td>attribute_length</td><td>1</td><td>属性长度</td></tr><tr><td>u1</td><td>info</td><td>attribute_length</td><td>属性表</td></tr></tbody></table><ul><li>属性类型</li></ul><p>属性表实际上可以有很多类型, 上面看到的Code属性只是其中一种, Java8里面定义了23中属性.</p><p>下面这些事虚拟机中预定义的属性:</p><table><thead><tr><th>属性名称</th><th>使用位置</th><th>含义</th></tr></thead><tbody><tr><td>Code</td><td>方法表</td><td>Java代码编译成的字节码指令</td></tr><tr><td>ConstantValue</td><td>字段表</td><td>final关键字定义的常量池</td></tr><tr><td>Deprecated</td><td>类、方法、字段表</td><td>被声明为deprecated的方法和字段</td></tr><tr><td>Exceptions</td><td>方法表</td><td>方法抛出的异常</td></tr><tr><td>EnclosingMethod</td><td>类文件</td><td>仅当一个类为局部类或者匿名类是才能拥有这个属性, 这个属性用于标识这个类所在的外圈方法</td></tr><tr><td>InnerClass</td><td>类文件</td><td>内部类列表</td></tr><tr><td>LineNumberTable</td><td>Code属性</td><td>Java源码的行号与字节码指令的对应关系</td></tr><tr><td>LocalVariableTable</td><td>Code属性</td><td>方法的局部变量描述</td></tr><tr><td>StackMapTable</td><td>Code属性</td><td>JDK1.6中新增的属性, 供新的类型检查检验器检查和处理目标方法的局部变量和操作数有所需要的类是否匹配</td></tr><tr><td>Signature</td><td>类、方法表、字段表</td><td>用于支持泛型情况下的方法签名</td></tr><tr><td>SourceFile</td><td>类文件</td><td>记录源文件名称</td></tr><tr><td>SourceDebugExtension</td><td>类文件</td><td>用于存储额外的调试信息</td></tr><tr><td>Synthetic</td><td>类、方法表、字段表</td><td>标志方法或字段为编译器自动生成的</td></tr><tr><td>LocalVariableTypeTable</td><td>类</td><td>使用特征签名代替描述符, 是为了引入泛型语法之后能描述泛型参数化类型而添加</td></tr><tr><td>RuntimeVisibleAnnotations</td><td>类、方法表、字段表</td><td>为动态注解提供支持</td></tr><tr><td>RuntimeInvisibleAnotations</td><td>类、方法表、字段表</td><td>用于指明哪些注解是运行时不可见的</td></tr><tr><td>RuntimeVisibleParameterAnnotation</td><td>方法表</td><td>作用与RuntimeVisibleAnnotations属性类似, 只不过作用对象为方法</td></tr><tr><td>RuntimeInvisibleParameterAnnotation</td><td>方法表</td><td>作用与RuntimeInvisibleAnotations属性类似, 作用对象哪个为方法参数</td></tr><tr><td>AnnotationDefault</td><td>方法表</td><td>用于记录注解类元素的默认值</td></tr><tr><td>BootstrapMethods</td><td>类文件</td><td>用于保存invokeddynamic指令引用的引导方式限定符</td></tr></tbody></table><p>部分属性详解</p><ol><li>ConstantValue 属性<br>ConstantValue 属性表示一个常量字段的值, 位于 field_info 结构的属性表中</li></ol><pre class="line-numbers language-null" data-language="null"><code class="language-null">ConstantValue_attribute &#123;u2 attribute_name_index;u4 attribute_length;u2 constantvalue_index; &#x2F;&#x2F; 字段值在常量池中的索引, 常量池在该索引处的项给出该属性表示的常量值 (例如, 值是long型的, 在常量池中便是 CONSTANT_Long)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>Deprecated 属性<br>Deprecated 属性是在 JDK1.1 为了支持注解中的关键词<code>@deprecated</code> 而引入的</li></ol><pre class="line-numbers language-null" data-language="null"><code class="language-null">Deprecated_attribute &#123;u2 attribute_name_index;u4 attribute_length;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><p>Code 属性<br>Code 属性就是存放方法体里面的代码. 但是, 并非所有方法表都有 Code 属性. 像接口或者抽象方法, 他们没有具体的方法体, 因此也就不会有 Code 属性了.</p><p>Code 属性表的结构, 如下图:</p></li></ol><table><thead><tr><th>类型</th><th>名称</th><th>数量</th><th>含义</th></tr></thead><tbody><tr><td>u2</td><td>attrubute_name_index</td><td>1</td><td>属性名索引</td></tr><tr><td>u4</td><td>attribute_length</td><td>1</td><td>属性长度</td></tr><tr><td>u2</td><td>max_stack</td><td>1</td><td>操作数栈深度的最大值</td></tr><tr><td>u2</td><td>max_locals</td><td>1</td><td>局部变量表所需的存续空间</td></tr><tr><td>u4</td><td>code_length</td><td>1</td><td>字节码指令的长度</td></tr><tr><td>u1</td><td>code</td><td>code_length</td><td>存储字节码指令</td></tr><tr><td>u2</td><td>exception_table_length</td><td>1</td><td>异常表长度</td></tr><tr><td>exception_info</td><td>exception_table</td><td>exception_length</td><td>异常表</td></tr><tr><td>u2</td><td>attributes_count</td><td>1</td><td>属性集合计数器</td></tr><tr><td>attribute_info</td><td>attributes</td><td>attributes_count</td><td>属性集合</td></tr></tbody></table><p>可以看到: Code 属性表的前两项跟属性表是一致的, 即 Code 属性表遵循属性表的结构, 后面那些则是他自己定义的结构</p><ol start="4"><li><p>InnerClasses 属性<br>为了方便说明特别定义一个表示类或接口的 Class 格式为 C 。如果 C 的常量池中包含某个CONSTANT_Class_info成员，且这个成员所表示的类或接口不属于任何一个包，那么 C 的 ClassFile 结构的属性表中就必须含有对应的 InnerClasses 属性。InnerClasses 属性是在 JDK1.1 中为了支持内部类和内部接口而引入的，位于ClassFile结构的属性表。</p></li><li><p>LineNumberTable 属性</p><p>LineNumberTable 属性是可选变长属性, 位于 Code 结构的属性表</p><p>LineNumberTable 属性是**用来描述 Java 源码行号与字节码行号之间的对应关系. **这个属性可以用来在调试的时候定位代码执行行的行数</p><ul><li><p>start_pc, 即字节码行号; line_number, 即 Java 源代码行号</p><p>在 Code 属性的属性表中, LineNumberTable 属性可以按照认意顺序出现, 此外, 多个LineNumberTable 属性可以共同表示一个行号在源文件中表示的内容, 即 LineNumberTable 属性不需要与源文件的行一一对应</p></li></ul></li></ol><p>​LineNuberTable属性表结构</p><pre class="line-numbers language-null" data-language="null"><code class="language-null">LineNumberTable_attribute &#123;u2 attribute_name_inex;u4 attribute_length;u2 line_number_table_length:&#123;u2 start_pc;u2 line_number;&#125; line_number_table[line_number_table_length]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li><p>LocalVariableTable 属性</p><p>LocalVariableTable 是可选变长属性, 位于 Code 属性的属性表中. 它被调试器<strong>用于确定方法在执行过程中局部变量的而信息</strong></p><p>在 Code 属性的属性表中, LocalVariableTable 属性可以按照任意顺序出现. Code 属性中的每个局部变量最多只能有一个 LocalVariableTable 属性</p><ul><li><code>start pc + length</code> 表示这个变量在字节码中的生命周期起始和结束的偏移位置 (this声明周期从头 0 到结尾 10)</li><li>index 就是这个变量在局部变量表中的槽位 (槽位可复用)</li><li>name 就是变量名称</li><li>Descriptor 表示局部变量类型描述</li></ul><p>LocalVariabletable 属性表结构:</p></li></ol><pre class="line-numbers language-null" data-language="null"><code class="language-null">LocalVariabletable_atribute &#123;u2 attribute_name_index;u4 attribute_length;u2 local_variable_table_length:&#123;u2 start_pc;u2 length;u2 name_index;u2 descriptor_index;u2 index;&#125; local_variable_table[local_variable_table_length];&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li><p>Signature 属性</p><p>Signature 属性是可选的定长属性, 位于 ClassFile, field_info 或 method_info 结构的属性表中. 在 Java 语言中, 任何类、接口、初始化方法或成员的泛型签名如果包含了类型变量 (Type Variables) 或参数化类型 (Parameterized Types), 则 Signature 属性会为它记录泛型签名信息.</p></li><li><p>SourceFile 属性</p><p>SourceFile 属性结构</p></li></ol><table><thead><tr><th>类型</th><th>名称</th><th>数量</th><th>含义</th></tr></thead><tbody><tr><td>u2</td><td>attribute_name_index</td><td>1</td><td>属性名索引</td></tr><tr><td>u4</td><td>attribute_length</td><td>1</td><td>属性长度</td></tr><tr><td>u2</td><td>sourcefile_index</td><td>1</td><td>源文件索引</td></tr></tbody></table><ol start="9"><li><p>其他属性</p><p>Java 虚拟机中预定义的属性有20多个, 这里不一一介绍, 通过上面几个属性的介绍, 只要领会其精髓, 其他属性的解读也是易如反掌</p></li></ol><h3 id="小结">小结</h3><p>本章主要介绍了c1ass文件的基本格式。</p><p>随着Java平台的不断发展，在将来，c1ass文件的内容也一定会做进一步的扩充，但是其基本的格式和结构不会做重大调整。</p><p>从Java虚拟机的角度看，通过Class文件，可以让更多的计算机语言支持Java虚拟机平台。因此，Class文件结构不仅仅<br>是Java虚拟机的执行入口，更是Java生态圈的基础和核心。</p><h2 id="04-使用javap指令解析Class文件">04-使用javap指令解析Class文件</h2><p><strong>解析字节码的作用</strong></p><ul><li><p>通过反编译生成的字节码文件，我们可以深入的了解jva代码的工作机制。但是，自己分析类文件结构太麻烦了！除了使用第三方的jclasslib 工具之外，oracle 官方也提供了工具：javap。</p></li><li><p>javap 是 jdk 自带的反解析工具。它的作用就是根据 class 字节码文件，反解析出当前类对应的 code 区（字节码指令）局部变量表、异常表和代码行偏移量映射表、常量池等信息。</p></li><li><p>通过局部变量表，我们可以查看局部变量的作用域范围、所在槽位等信息，甚至可以看到槽位复用等信息。</p></li></ul><p><strong><code>javac -g</code> 操作</strong></p><ul><li><p>解析字节码文件得到的信息中，有些信息（如局部变量表、指令和代码行偏移量映射表、常量池中方法的参数名称等<br>等)需要在使用 javac 编译成 class 文件时，指定参数才能输出。</p></li><li><p>比如，你直接 javac xx.java，就不会在生成对应的局部变量表等信息，如果你使用 <code>javac -g xx.java</code> 就可以生成<br>所有相关信息了。如果你使用的 eclipse 或 IDEA，则默认情况下，eclipse、IDEA在编译时会帮你生成局部变量表、指令和代码行移量映射表等信息的。</p></li></ul><p><strong>javap 的用法</strong></p><p><code>javap &lt;option&gt; &lt;classes&gt;</code></p><p>其中, classes 就是要反编译的class文件.</p><p>参数介绍:</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-version</td><td>版本信息, 其实是当前 javap 所在 jdk 的版本信息, 不是 class 在哪个 jdk 下生成的</td></tr><tr><td>-public</td><td>仅显示公共类和成员</td></tr><tr><td>-protected</td><td>显示受保护的/公共类和成员</td></tr><tr><td>-p -private (常用)</td><td>显示所有类和成员</td></tr><tr><td>-package</td><td>显示程序包/受保护的/公共类 和成员(默认)</td></tr><tr><td>-sysinfo</td><td>显示正在处理的类的系统信息(路径, 大小, 日期, MD5 散列, 源文件名)</td></tr><tr><td>-constants</td><td>显示静态最终常量</td></tr><tr><td>-s</td><td>输出内部类型签名</td></tr><tr><td>-l</td><td>输出行号和本地变量表</td></tr><tr><td>-c</td><td>对代码进行反汇编</td></tr><tr><td>-v -verbose (常用)</td><td>输出附加信息(包括行号、本地变量表、反汇编等详细信息)</td></tr></tbody></table><p><strong>代码举例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavapTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> flag<span class="token punctuation">;</span>    <span class="token keyword">protected</span>  <span class="token keyword">char</span> gender<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> info<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">COUNTS</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"www.saddyfire.cn"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#123;</span>        info <span class="token operator">=</span> <span class="token string">"java"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">JavapTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">JavapTest</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>flag <span class="token operator">=</span> flag<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">methodPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">char</span> <span class="token function">showGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> gender<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>info <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./../jvm-class1/image-20240105232801444.png" alt="javap说明-1"></p><p><img src="./../jvm-class1/image-20240105232949979.png" alt="javap说明-2"></p><p><img src="./../jvm-class1/image-20240105233645915.png" alt="javap说明-3"></p><p><strong>总结</strong></p><ol><li>通过javapt命令可以查看一个java类反汇编得到的Class.文件版本号、常量池、访问标识、变量表、指令代码行号表等等信息。不显示类索引、父类索引、接口索引集合、<code>&lt;c1iTit&gt;()</code>、<code>&lt;init&gt;()</code> 等结构</li><li>通过对前面例子代码反汇编文件的简单分析，可以发现，一个方法的执行通常会涉及下面几块内存的操作：<ol><li>java栈中：局部变量表、操作数栈。</li><li>java堆。通过对象的地址引用去操作。</li><li>常量池。</li><li>其他如帧数据区、方法区的剩余部分等情况，测试中没有显示出来，这里说明一下。</li></ol></li><li>平常，我们比较关注的是 java 类中每个方法的反汇编中的指令操作过程，这些指令都是顺序执行的，可以参考官方文<br>档查看每个指令的含义，很简单：<br><a href="https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-6.html">https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-6.html</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM-12-垃圾回收器</title>
      <link href="/2023/12/27/jvm-sgg12/"/>
      <url>/2023/12/27/jvm-sgg12/</url>
      
        <content type="html"><![CDATA[<h1>垃圾回收器</h1><h2 id="GC-分类与性能指标">GC 分类与性能指标</h2><ul><li><p>垃圾收集器没有在规范中进行过多的规定，可以由不同的厂商、不同版本的JVM来实现。</p></li><li><p>由于JDK的版本处于高速迭代过程中，因此Java发展至今已经衍生了众多的GC版本。</p></li><li><p>从不同角度分析垃圾收集器，可以将GC分为不同的类型。</p></li></ul><p><strong>Java不同版本新特性</strong></p><ul><li>语法层面：Lambda表达式、switch、自动拆箱装箱、enum、泛型</li><li>API层面：Stream API、新的日期时间、Optional、String、集合框架</li><li>底层优化：JVM优化、GC的变化、元空间、静态域、字符串常量池等</li></ul><h3 id="垃圾回收器分类">垃圾回收器分类</h3><p><strong>按线程数分（垃圾回收线程数），可以分为串行垃圾回收器和并行垃圾回收器。</strong></p><p><img src="./../jvm-sgg12/image-20231228202447472.png" alt=""></p><ul><li><p>串行回收指的是在同一时间段内只允许有一个CPU用于执行垃圾回收操作，此时工作线程被暂停，直至垃圾收集工作结束。</p><ul><li><p>在诸如单CPU处理器或者较小的应用内存等硬件平台不是特别优越的场合，串行回收器的性能表现可以超过并行回收器和并发回收器。所以，<strong>串行回收默认被应用在客户端的Client模式下的JVM中</strong></p></li><li><p>在并发能力比较强的CPU上，并行回收器产生的停顿时间要短于串行回收器</p></li></ul></li><li><p>和串行回收相反，并行收集可以运用多个CPU同时执行垃圾回收，因此提升了应用的吞吐量，不过并行回收仍然与串行回收一样，采用独占式，使用了&quot;Stop-the-Worl&quot;机制。</p></li></ul><p><strong>按照<em>工作模式</em>分，可以分为并发式垃圾回收器和独占式垃圾回收器</strong></p><ul><li>并发式垃圾回收器与应用程序线程交替工作，以尽可能减少应用程序的停顿时间。</li><li>独占式垃圾回收器（Stop the World）一旦运行，就停止应用程序中的所有用户线程，直到垃圾回收过程完全结束。</li></ul><p><img src="./../jvm-sgg12/image-20231228202849855.png" alt=""></p><p><strong>按<em>碎片处理方式</em>分，可分为压缩式垃圾回收器和非压缩式垃圾回收器。</strong></p><ul><li>压缩式垃圾回收器会在回收完成后，对存活对象进行压缩整理，消除回收后的碎片。<ul><li>再分配对象空间使用: 指针碰撞</li></ul></li><li>非压缩式的垃圾回收器不进行这步操作，<ul><li>分配对象空间使用: 空闲列表</li></ul></li></ul><p><strong>按<em>工作的内存区间</em>分，又可分为年轻代垃圾回收器和老年代垃圾回收器。</strong></p><h3 id="评估-GC-的性能指标">评估 GC 的性能指标</h3><ul><li><p><strong>吞吐量：运行用户代码的时间占总运行时间的比例</strong></p><ul><li>（总运行时间 = 程序的运行时间 + 内存回收的时间）a/(a+b)</li></ul></li><li><p>垃圾收集开销：吞吐量的补数，垃圾收集所用时间与总运行时间的比例。b/(a+b)</p></li><li><p><strong>暂停时间：执行垃圾收集时，程序的工作线程被暂停的时间。</strong></p></li><li><p>收集频率：相对于应用程序的执行，收集操作发生的频率。</p></li><li><p><strong>内存占用：Java堆区所占的内存大小。</strong></p></li><li><p>快速：一个对象从诞生到被回收所经历的时间。</p></li><li><p>&lt;吞吐量、暂停时间、内存占用&gt;这三者共同构成一个“不可能三角”。三者总体的表现会随着技术进步而越来越好。一款优秀的收集器通常最多同时满足其中的两项。</p></li><li><p>这三项里，暂停时间的重要性日益凸显。因为随着硬件发展，内存占用多些越来越能容忍，硬件性能的提升也有助于降低收集器运行时对应用程序的影响，即提高了吞吐量。而内存的扩大，对延迟反而带来负面效果。</p></li><li><p>简单来说，主要抓住两点：</p><ul><li>吞吐量</li><li>暂停时间</li></ul></li></ul><h3 id="吞吐量-throughput">吞吐量(throughput)</h3><ul><li>吞吐量就是CPU用于运行用户代码的时间与CPU总消耗时间的比值，即吞吐量=运行用户代码时间 /（运行用户代码时间+垃圾收集时间）<ul><li>比如：虚拟机总共运行了100分钟，其中垃圾收集花掉1分钟，那吞吐量就是99%。</li></ul></li><li>这种情况下，应用程序能容忍较高的暂停时间，因此，高吞吐量的应用程序有更长的时间基准，快速响应是不必考虑的</li><li>吞吐量优先，意味着在单位时间内，STW的时间最短：0.2+0.2=0.4</li></ul><p><img src="./../jvm-sgg12/image-20231228204813437.png" alt=""></p><h3 id="暂停时间（pause-time）">暂停时间（pause time）</h3><ul><li>“暂停时间”是指一个时间段内应用程序线程暂停，让GC线程执行的状态。<ul><li>例如，GC期间100毫秒的暂停时间意味着在这100毫秒期间内没有应用程序线程是活动的</li></ul></li><li>暂停时间优先，意味着尽可能让单次STW的时间最短：0.1+0.1 + 0.1+ 0.1+ 0.1=0.5，但是总的GC时间可能会长</li></ul><p><img src="./../jvm-sgg12/image-20231228204946960.png" alt=""></p><h3 id="吞吐量-vs-暂停时间">吞吐量 vs 暂停时间</h3><ul><li><p><strong>高吞吐量较好</strong>因为这会让应用程序的最终用户感觉只有应用程序线程在做“生产性”工作。直觉上，吞吐量越高程序运行越快。</p></li><li><p>低暂停时间（低延迟）较好，是从最终用户的角度来看，不管是GC还是其他原因导致一个应用被挂起始终是不好的。这取决于应用程序的类型，有时候甚至短暂的200毫秒暂停都可能打断终端用户体验。因此，具有较低的暂停时间是非常重要的，特别是对于一个交互式应用程序（就是和用户交互比较多的场景）。</p></li><li><p>不幸的是”高吞吐量”和”低暂停时间”是一对相互竞争的目标（矛盾）。</p><ul><li>因为如果选择以吞吐量优先，那么<strong>必然需要降低内存回收的执行频率</strong>，但是这样会导致GC需要更长的暂停时间来执行内存回收。</li><li>相反的，如果选择以低延迟优先为原则，那么为了降低每次执行内存回收时的暂停时间，也只能频繁地执行内存回收，但这又引起了年轻代内存的缩减和导致程序吞吐量的下降。</li></ul></li><li><p>在设计（或使用）GC算法时，我们必须确定我们的目标：一个GC算法只可能针对两个目标之一（即只专注于较大吞吐量或最小暂停时间），或尝试找到一个二者的折衷。</p></li><li><p>现在标准：<strong>在最大吞吐量优先的情况下，降低停顿时间</strong></p></li></ul><h2 id="不同的垃圾回收器概述">不同的垃圾回收器概述</h2><ul><li>垃圾收集机制是Java的招牌能力，极大地提高了开发效率。这当然也是面试的热点。</li><li>那么，Java常见的垃圾收集器有哪些？(面试)</li></ul><h3 id="垃圾收集器发展史">垃圾收集器发展史</h3><p>有了虚拟机，就一定需要收集垃圾的机制，这就是Garbage Collection，对应的产品我们称为Garbage Collector。</p><ul><li>1999年随JDK1.3.1一起来的是串行方式的Serial GC，它是第一款GC。ParNew垃圾收集器是Serial收集器的多线程版本</li><li>2002年2月26日，Parallel GC和Concurrent Mark Sweep GC跟随JDK1.4.2一起发布·</li><li>Parallel GC在JDK6之后成为HotSpot默认GC。</li><li>2012年，在JDK1.7u4版本中，G1可用。</li><li>2017年，JDK9中G1变成默认的垃圾收集器，以替代CMS。</li><li>2018年3月，JDK10中G1垃圾回收器的并行完整垃圾回收，实现并行性来改善最坏情况下的延迟。</li><li>2018年9月，JDK11发布。引入Epsilon 垃圾回收器，又被称为 &quot;No-Op(无操作)“ 回收器。同时，引入ZGC：可伸缩的低延迟垃圾回收器（Experimental）</li><li>2019年3月，JDK12发布。增强G1，自动返回未用堆内存给操作系统。同时，引入Shenandoah GC：低停顿时间的GC（Experimental）。</li><li>2019年9月，JDK13发布。增强ZGC，自动返回未用堆内存给操作系统。</li><li>2020年3月，JDK14发布。删除CMS垃圾回收器。扩展ZGC在macOS和Windows上的应用</li></ul><h3 id="7款经典的垃圾收集器">7款经典的垃圾收集器</h3><ul><li>串行回收器：Serial、Serial old</li><li>并行回收器：ParNew、Parallel Scavenge、Parallel old</li><li>并发回收器：CMS、G1</li></ul><p><img src="./../jvm-sgg12/image-20231228210058640.png" alt=""></p><p><img src="./../jvm-sgg12/image-20231228210155372.png" alt="7款经典回收器与垃圾分代之间的关系👍"></p><ul><li><p>新生代收集器：Serial、ParNew、Parallel Scavenge；</p></li><li><p>老年代收集器：Serial old、Parallel old、CMS；</p></li><li><p>整堆收集器：G1；</p></li></ul><p><img src="./../jvm-sgg12/image-20231228210348873.png" alt="垃圾回收器的组合关系👍"></p><ol><li>两个收集器间有连线，表明它们可以搭配使用：<ul><li>Serial/Serial old</li><li>Serial/CMS    （JDK9废弃）</li><li>ParNew/Serial Old （JDK9废弃）</li><li>ParNew/CMS</li><li>Parallel Scavenge/Serial Old  （预计废弃）</li><li>Parallel Scavenge/Parallel Old</li><li>G1</li></ul></li><li>其中Serial Old作为CMS出现&quot;Concurrent Mode Failure&quot;失败的后备预案。</li><li>（红色虚线）由于维护和兼容性测试的成本，在JDK 8时将Serial+CMS、ParNew+Serial Old这两个组合声明为废弃（JEP173），并在JDK9中完全取消了这些组合的支持（JEP214），即：移除。</li><li>（绿色虚线）JDK14中：弃用Parallel Scavenge和Serial Old GC组合（JEP366）</li><li>（青色虚线）JDK14中：删除CMS垃圾回收器（JEP363）</li></ol><ul><li>为什么要有很多收集器，一个不够吗？因为Java的使用场景很多，移动端，服务器等。所以就需要针对不同的场景，提供不同的垃圾收集器，提高垃圾收集的性能。</li><li>虽然我们会对各个收集器进行比较，但并非为了挑选一个最好的收集器出来。没有一种放之四海皆准、任何场景下都适用的完美收集器存在，更加没有万能的收集器。所以<strong>我们选择的只是对具体应用最合适的收集器</strong>。</li></ul><h3 id="查看默认垃圾收集器">查看默认垃圾收集器</h3><ul><li><p><code>-XX:+PrintCommandLineFlags</code>：查看命令行相关参数（包含使用的垃圾收集器）</p></li><li><p>使用命令行指令：<code>jinfo -flag</code> 相关垃圾回收器参数 进程ID</p></li></ul><p><strong>JDK8</strong></p><p><code>-XX:+PrintCommandLineFlags</code></p><p><img src="./../jvm-sgg12/image-20231229150948063.png" alt=""></p><p><strong>命令行查看</strong></p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">jpsjinfo -flag UseParallelGC 进程idjinfo -flag UseParallelOldGC 进程id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="./../jvm-sgg12/image-20231229151217018.png" alt=""></p><h2 id="Serial-回收器：串行回收">Serial 回收器：串行回收</h2><ul><li><p>Serial收集器是最基本、历史最悠久的垃圾收集器了。JDK1.3之前回收新生代唯一的选择。</p></li><li><p>Serial收集器作为HotSpot中Client模式下的默认新生代垃圾收集器。</p></li><li><p><strong>Serial收集器采用复制算法、串行回收和&quot;Stop-the-World&quot;机制的方式执行内存回收。</strong></p></li><li><p>除了年轻代之外，Serial收集器还提供用于执行老年代垃圾收集的Serial Old收集器。<strong>Serial Old收集器同样也采用了串行回收和&quot;Stop the World&quot;机制，只不过内存回收算法使用的是标记-压缩算法。</strong></p><ul><li>Serial Old是运行在Client模式下默认的老年代的垃圾回收器</li><li>Serial Old在Server模式下主要有两个用途：①与新生代的Parallel Scavenge配合使用 ②作为老年代CMS收集器的后备垃圾收集方案</li></ul></li></ul><p><img src="./../jvm-sgg12/image-20231229151604228.png" alt=""></p><p>这个收集器是一个单线程的收集器，&quot;单线程&quot;的意义：它<strong>只会使用一个CPU（串行）或一条收集线程去完成垃圾收集工作</strong>。更重要的是在它进行垃圾收集时，<strong>必须暂停其他所有的工作线程</strong>，直到它收集结束（Stop The World）</p><p><strong>Serial 回收器的优势</strong></p><ul><li>优势：<strong>简单而高效</strong>（与其他收集器的单线程比），对于限定单个CPU的环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程收集效率。<ul><li>运行在Client模式下的虚拟机是个不错的选择。</li></ul></li><li>在用户的桌面应用场景中，可用内存一般不大（几十MB至一两百MB），可以在较短时间内完成垃圾收集（几十ms至一百多ms），只要不频繁发生，使用串行回收器是可以接受的。</li><li>在HotSpot虚拟机中，使用<code>-XX:+UseSerialGC</code>参数可以指定年轻代和老年代都使用串行收集器。<ul><li>等价于新生代用Serial GC，且老年代用Serial Old GC</li></ul></li></ul><p><strong>总结</strong></p><ul><li>这种垃圾收集器大家了解，现在已经不用串行的了。而且在限定单核CPU才可以用。现在都不是单核的了。</li><li>对于交互较强的应用而言，这种垃圾收集器是不能接受的。一般在Java Web应用程序中是不会采用串行垃圾收集器的。</li></ul><h2 id="ParNew-回收器：并行回收">ParNew 回收器：并行回收</h2><ul><li>如果说Serial GC是年轻代中的单线程垃圾收集器，那么ParNew收集器则是Serial收集器的多线程版本。<ul><li>Par是Parallel的缩写，New：只能处理新生代</li></ul></li><li>ParNew 收集器除了采用<strong>并行回收</strong>的方式执行内存回收外，两款垃圾收集器之间几乎没有任何区别。ParNew收集器在年轻代中同样也是**采用复制算法、“Stop-the-World”**机制。</li><li>ParNew 是很多JVM运行在Server模式下新生代的默认垃圾收集器。</li></ul><p><img src="./../jvm-sgg12/image-20231229152324645.png" alt=""></p><ul><li>对于新生代，回收次数频繁，使用并行方式高效。</li><li>对于老年代，回收次数少，使用串行方式节省资源。（CPU并行需要切换线程，串行可以省去切换线程的资源）</li></ul><p><strong>ParNew 回收器与 Serial 回收器比较</strong></p><blockquote><p>Q：由于ParNew收集器基于并行回收，那么是否可以断定ParNew收集器的回收效率在任何场景下都会比Serial收集器更高效？</p><p>A：<strong>不能</strong></p></blockquote><ul><li>ParNew收集器运行在多CPU的环境下，由于可以充分利用多CPU、多核心等物理硬件资源优势，可以更快速地完成垃圾收集，提升程序的吞吐量。</li><li>但是<strong>在单个CPU的环境下，ParNew收集器不比Serial收集器更高效</strong>。虽然Serial收集器是基于串行回收，但是由于CPU不需要频繁地做任务切换，因此可以有效避免多线程交互过程中产生的一些额外开销。</li><li>除Serial外，目前只有ParNew GC能与CMS收集器配合工作</li></ul><p><strong>设置 ParNew 垃圾回收器</strong></p><ul><li>在程序中，开发人员可以通过选项<code>-XX:+UseParNewGC</code>手动指定使用ParNew收集器执行内存回收任务。它表示年轻代使用并行收集器，不影响老年代。</li><li><code>-XX:ParallelGCThreads</code>限制线程数量，默认开启和CPU数据相同的线程数。</li></ul><h2 id="Parallel-回收器：吞吐量优先">Parallel 回收器：吞吐量优先</h2><ul><li><p>HotSpot的年轻代中除了拥有ParNew收集器是基于并行回收的以外，Parallel Scavenge收集器同样也采用了复制算法、并行回收和&quot;Stop the World&quot;机制。</p></li><li><p>那么Parallel收集器的出现是否多此一举？</p><ul><li>和ParNew收集器不同，Parallel Scavenge收集器的目标则是达到一个<strong>可控制的吞吐量</strong>（Throughput），它也被称为吞吐量优先的垃圾收集器。</li><li>自适应调节策略也是Parallel Scavenge与ParNew一个重要区别。（动态调整内存分配情况，以达到一个最优的吞吐量或低延迟）</li></ul></li><li><p>高吞吐量则可以高效率地利用CPU时间，尽快完成程序的运算任务，<strong>主要适合在后台运算而不需要太多交互的任务</strong>。因此，常见在服务器环境中使用。<strong>例如，那些执行批量处理、订单处理、工资支付、科学计算的应用程序。</strong></p></li><li><p>Parallel收集器在JDK1.6时提供了用于执行老年代垃圾收集的Parallel Old收集器，用来代替老年代的Serial Old收集器。</p></li><li><p>Parallel Old收集器采用了<strong>标记-压缩算法</strong>，但同样也是基于<strong>并行回收和&quot;Stop-the-World&quot;机制。</strong></p></li></ul><p><img src="./../jvm-sgg12/image-20231229153901516.png" alt=""></p><ul><li>在程序吞吐量优先的应用场景中，Parallel收集器和Parallel Old收集器的组合，在server模式下的内存回收性能很不错。</li><li><strong>在Java8中，默认是此垃圾收集器。</strong></li></ul><h4 id="Parallel-参数设置">Parallel 参数设置</h4><ul><li><p><code>-XX:+UseParallelGC</code> 手动指定年轻代使用Parallel并行收集器执行内存回收任务。</p></li><li><p><code>-XX:+UseParallelOldGC</code>：手动指定老年代都是使用并行回收收集器。</p><ul><li><p>分别适用于新生代和老年代</p></li><li><p>上面两个参数分别适用于新生代和老年代。默认jdk8是开启的。默认开启一个，另一个也会被开启。（互相激活）</p></li></ul></li><li><p><code>-XX:ParallelGCThreads</code>：设置年轻代并行收集器的线程数。一般地，最好与CPU数量相等，以避免过多的线程数影响垃圾收集性能。</p><ul><li><p>在默认情况下，当CPU数量小于8个，ParallelGCThreads的值等于CPU数量。</p></li><li><p>当CPU数量大于8个，ParallelGCThreads的值等于3+[5*CPU_Count]/8]</p></li></ul></li><li><p><code>-XX:MaxGCPauseMillis</code> 设置垃圾收集器最大停顿时间（即STW的时间）。单位是毫秒。</p><ul><li><p>为了尽可能地把停顿时间控制在XX:MaxGCPauseMillis 以内，收集器在工作时会调整Java堆大小或者其他一些参数。</p></li><li><p>对于用户来讲，停顿时间越短体验越好。但是在服务器端，我们注重高并发，整体的吞吐量。所以服务器端适合Parallel，进行控制。</p></li><li><p><strong>该参数使用需谨慎</strong>。</p></li></ul></li><li><p><code>-XX:GCTimeRatio</code>垃圾收集时间占总时间的比例，即等于 1 / (N+1) ，用于衡量吞吐量的大小。</p><ul><li><p>取值范围(0, 100)。默认值99，也就是垃圾回收时间占比不超过1。</p></li><li><p>与前一个-XX:MaxGCPauseMillis参数有一定矛盾性，STW暂停时间越长，Radio参数就容易超过设定的比例。</p></li></ul></li><li><p><code>-XX:+UseAdaptiveSizePolicy</code> 设置Parallel Scavenge收集器具有<strong>自适应调节策略</strong></p><ul><li><p>在这种模式下，年轻代的大小、Eden和Survivor的比例、晋升老年代的对象年龄等参数会被自动调整，已达到在堆大小、吞吐量和停顿时间之间的平衡点。</p></li><li><p>在手动调优比较困难的场合，可以直接使用这种自适应的方式，仅指定虚拟机的最大堆、目标的吞吐量（GCTimeRatio）和停顿时间（MaxGCPauseMillis），让虚拟机自己完成调优工作。</p></li></ul></li></ul><h2 id="CMS-回收器：低延迟">CMS 回收器：低延迟</h2><ul><li><p>在JDK1.5时期，Hotspot推出了一款在**强交互应用中（就是和用户打交道的引用）**几乎可认为有划时代意义的垃圾收集器：CMS（Concurrent-Mark-Sweep）收集器，<strong>这款收集器是HotSpot虚拟机中第一款真正意义上的并发收集器，它第一次实现了让垃圾收集线程与用户线程同时工作。</strong></p></li><li><p>CMS收集器的关注点是尽可能缩短垃圾收集时用户线程的停顿时间。停顿时间越短（低延迟）就越适合与用户交互的程序，良好的响应速度能提升用户体验。</p><ul><li>目前很大一部分的Java应用集中在互联网站或者B/S系统的服务端上，这类应用尤其重视服务的响应速度，希望系统停顿时间最短，以给用户带来较好的体验。CMS收集器就非常符合这类应用的需求。</li></ul></li><li><p>CMS的垃圾收集算法采用<strong>标记-清除</strong>算法，并且也会&quot;Stop-the-World&quot;</p></li><li><p>不幸的是，CMS作为老年代的收集器，却无法与JDK1.4.0中已经存在的新生代收集器Parallel Scavenge配合工作（因为实现的框架不一样，没办法兼容使用），所以在JDK1.5中使用CMS来收集老年代的时候，新生代只能选择ParNew或者Serial收集器中的一个。</p></li><li><p>在G1出现之前，CMS使用还是非常广泛的。一直到今天，仍然有很多系统使用CMS GC。</p></li></ul><h3 id="CMS的工作原理">CMS的工作原理</h3><p><img src="./../jvm-sgg12/image-20240101201308269.png" alt=""></p><p>CMS整个过程比之前的收集器要复杂，整个过程分为4个主要阶段，即初始标记阶段、并发标记阶段、重新标记阶段和并发清除阶段。(涉及STW的阶段主要是：初始标记 和 重新标记)</p><ul><li>初始标记（Initial-Mark）阶段：在这个阶段中，程序中所有的工作线程都将会因为&quot;Stop-the-World&quot;机制而出现短暂的暂停，<strong>这个阶段的主要任务仅仅只是标记出GC Roots能直接关联到的对象</strong>。一旦标记完成之后就会恢复之前被暂停的所有应用线程。由于直接关联对象比较小，所以这里的<strong>速度非常快</strong>。</li><li>并发标记（Concurrent-Mark）阶段：从GC Roots的直接关联对象开始遍历整个对象图的过程，这个过程耗时较长但是<strong>不需要停顿用户线程</strong>，<strong>可以与垃圾收集线程一起并发运行</strong>。</li><li>重新标记（Remark）阶段：由于在并发标记阶段中，程序的工作线程会和垃圾收集线程同时运行或者交叉运行，**因此为了修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，**这个阶段的停顿时间通常会比初始标记阶段稍长一些，并且也会导致&quot;Stop-the-World&quot;的发生，但也远比并发标记阶段的时间短。</li><li>并发清除（Concurrent-Sweep）阶段：此阶段<strong>清理删除掉标记阶段判断的已经死亡的对象，释放内存空间</strong>。由于不需要移动存活对象，所以这个阶段也是可以与用户线程同时并发的</li></ul><h3 id="CMS分析">CMS分析</h3><ul><li>尽管CMS收集器采用的是并发回收（非独占式），<strong>但是在其初始化标记和再次标记这两个阶段中仍然需要执行“Stop-the-World”机制</strong>暂停程序中的工作线程，不过暂停时间并不会太长，因此可以说明目前所有的垃圾收集器都做不到完全不需要“Stop-the-World”，只是尽可能地缩短暂停时间。</li><li><strong>由于最耗费时间的并发标记与并发清除阶段都不需要暂停工作，所以整体的回收是低停顿的</strong>。</li><li>另外，由于在垃圾收集阶段用户线程没有中断，所以<strong>在CMS回收过程中，还应该确保应用程序用户线程有足够的内存可用</strong>。因此，CMS收集器不能像其他收集器那样等到老年代几乎完全被填满了再进行收集，<strong>而是当堆内存使用率达到某一阈值时，便开始进行回收</strong>，以确保应用程序在CMS工作过程中依然有足够的空间支持应用程序运行。要是CMS运行期间预留的内存无法满足程序需要，就会出现一次**“Concurrent Mode Failure”** 失败，这时虚拟机将启动后备预案：临时启用Serial old收集器来重新进行老年代的垃圾收集，这样停顿时间就很长了。</li><li>CMS收集器的垃圾收集算法采用的是<strong>标记-清除算法</strong>，这意味着每次执行完内存回收后，由于被执行内存回收的无用对象所占用的内存空间极有可能是不连续的一些内存块，<strong>不可避免地将会产生一些内存碎片</strong>。那么CMS在为新对象分配内存空间时，将无法使用指针碰撞（Bump the Pointer）技术，而只能够选择空闲列表（Free List）执行内存分配。</li></ul><p><img src="./../jvm-sgg12/image-20240101201947523.png" alt=""></p><p><strong>为什么 CMS 不采用标记-压缩算法呢？</strong></p><p>答案其实很简答，因为当并发清除的时候，用Compact整理内存的话，原来的用户线程使用的内存还怎么用呢？要保证用户线程能继续执行，前提的它运行的资源不受影响嘛。Mark Compact更适合&quot;stop the world&quot;这种场景下使用</p><h3 id="CMS-的优点与弊端">CMS 的优点与弊端</h3><p><strong>优点</strong></p><ol><li>并发收集</li><li>低延迟</li></ol><p><strong>弊端</strong></p><ol><li><strong>会产生内存碎片</strong>，导致并发清除后，用户线程可用的空间不足。在无法分配大对象的情况下，不得不提前触发Full GC。</li><li><strong>CMS收集器对CPU资源非常敏感</strong>。在并发阶段，它虽然不会导致用户停顿，但是会因为占用了一部分线程而导致应用程序变慢，总吞吐量会降低。</li><li><strong>CMS收集器无法处理浮动垃圾</strong>。可能出现“Concurrent Mode Failure&quot;失败而导致另一次Full GC的产生。在并发标记阶段由于程序的工作线程和垃圾收集线程是同时运行或者交叉运行的，**那么在并发标记阶段如果产生新的垃圾对象，CMS将无法对这些垃圾对象进行标记，最终会导致这些新产生的垃圾对象没有被及时回收，**从而只能在下一次执行GC时释放这些之前未被回收的内存空间。</li></ol><h3 id="CMS-参数配置">CMS 参数配置</h3><h2 id="G1-回收器：区域化分代式">G1 回收器：区域化分代式</h2><ul><li><p><code>-XX:+UseConcMarkSweepGC</code>：手动指定使用CMS收集器执行内存回收任务。</p><p>开启该参数后会自动将<code>-XX:+UseParNewGC</code>打开。即：ParNew（Young区）+CMS（Old区）+Serial Old（Old区备选方案）的组合。</p></li><li><p><code>-XX:CMSInitiatingOccupanyFraction</code>：设置堆内存使用率的阈值，一旦达到该阈值，便开始进行回收。</p><ul><li><p>JDK5及以前版本的默认值为68，即当老年代的空间使用率达到68%时，会执行一次CMS回收。JDK6及以上版本默认值为92%</p></li><li><p>如果内存增长缓慢，则可以设置一个稍大的值，大的阀值可以有效降低CMS的触发频率，减少老年代回收的次数可以较为明显地改善应用程序性能。反之，如果应用程序内存使用率增长很快，则应该降低这个阈值，以避免频繁触发老年代串行收集器。因此通过该选项便可以有效降低Full GC的执行次数。</p></li></ul></li></ul><h2 id="垃圾回收器总结">垃圾回收器总结</h2><h2 id=""></h2>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM-11-垃圾回收相关概念</title>
      <link href="/2023/12/26/jvm-sgg11/"/>
      <url>/2023/12/26/jvm-sgg11/</url>
      
        <content type="html"><![CDATA[<h1>垃圾回收相关概念</h1><h2 id="1-System-gc-的理解">1-System.gc()的理解</h2><ul><li><p>在默认情况下，通过<code>System.gc()</code>或者<code>Runtime.getRuntime().gc()</code> 的调用，<strong>会显式触发Full GC</strong>，同时对老年代和新生代进行回收，尝试释放被丢弃对象占用的内存。</p></li><li><p>然而<code>System.gc()</code>调用附带一个免责声明，无法保证对垃圾收集器的调用(不能确保立即生效)</p></li><li><p>JVM实现者可以通过<code>System.gc()</code>调用来决定JVM的GC行为。而一般情况下，垃圾回收应该是自动进行的，**无须手动触发，否则就太过于麻烦了。**在一些特殊情况下，如我们正在编写一个性能基准，我们可以在运行之间调用<code>System.gc()</code></p></li></ul><h3 id="手动GC-demo">手动GC demo</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// -XX:+PrintGCDetails</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocalVarGC</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">localvarGC1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//10MB</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">localvarGC2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        buffer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">localvarGC3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">localvarGC4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">localvarGC5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">localvarGC1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">LocalVarGC</span> local <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalVarGC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通过在main方法调用这几个方法进行测试</span>        local<span class="token punctuation">.</span><span class="token function">localvarGC1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./../jvm-sgg11/image-20231227203849177.png" alt="情况1"></p><p><img src="./../jvm-sgg11/image-20231227204128068.png" alt="情况2"></p><p><img src="./../jvm-sgg11/image-20231227204605184.png" alt="情况三"></p><p><img src="./../jvm-sgg11/image-20231227205040175.png" alt="情况三分析"></p><p><img src="./../jvm-sgg11/image-20231227205533911.png" alt="情况四"></p><p><img src="./../jvm-sgg11/image-20231227205838709.png" alt="情况五"></p><h2 id="2-内存溢出与内存泄漏">2-内存溢出与内存泄漏</h2><ul><li>内存溢出相对于内存泄漏来说，尽管更容易被理解，但是同样的，内存溢出也是引发程序崩溃的罪魁祸首之一。</li><li>由于 GC 一直在发展，所有一般情况下，除非应用程序占用的内存增长速度非常快，造成垃圾回收已经跟不上内存消耗的速度，否则不太容易出现 OOM 的情况。</li><li>大多数情况下，GC会进行各种年龄段的垃圾回收，实在不行了就放大招，来一次独占式的 Full GC 操作，这时候会回收大量的内存，供应用程序继续使用。</li><li>Javadoc中对OutofMemoryError的解释是，没有空闲内存，并且垃圾收集器也无法提供更多内存。</li></ul><h3 id="内存溢出-OOM">内存溢出(OOM)</h3><p>首先说没有空闲内存的情况：说明Java虚拟机的堆内存不够。原因有二：</p><ol><li><strong>Java虚拟机的堆内存设置不够</strong><ul><li>比如：可能存在内存泄漏问题；也很有可能就是堆的大小不合理，比如我们要处理比较可观的数据量，但是没有显式指定JVM堆大小或者指定数值偏小。我们可以通过参数-Xms 、-Xmx来调整。</li></ul></li><li><strong>代码中创建了大量大对象，并且长时间不能被垃圾收集器收集</strong>（存在被引用）<ul><li>对于老版本的 Oracle JDK，因为永久代的大小是有限的，并且JVM对永久代垃圾回收（如，常量池回收、卸载不再需要的类型）非常不积极，所以当我们不断添加新类型的时候，永久代出现 OutOfMemoryError 也非常多见。尤其是在运行时存在大量动态类型生成的场合；类似 intern 字符串缓存占用太多空间，也会导致 OOM 问题。对应的异常信息，会标记出来和永久代相关：“java.lang.OutOfMemoryError:PermGen space&quot;。</li><li>随着元数据区的引入，方法区内存已经不再那么窘迫，所以相应的OOM有所改观，出现OOM，异常信息则变成了：“java.lang.OutofMemoryError:Metaspace&quot;。直接内存不足，也会导致 OOM。</li></ul></li></ol><ul><li>这里面隐含着一层意思是，在抛出 OutofMemoryError 之前，通常垃圾收集器会被触发，尽其所能去清理出空间。<ul><li>例如：在引用机制分析中，涉及到JVM会去尝试<strong>回收软引用指向的对象</strong>等。</li><li>在 java.nio.Bits.reserveMemory() 方法中，我们能清楚的看到，System.gc() 会被调用，以清理空间。</li></ul></li><li>当然，也不是在任何情况下垃圾收集器都会被触发的<ul><li>比如，我们去分配一个超大对象，类似一个超大数组超过堆的最大值，JVM 可以判断出垃圾收集并不能解决这个问题，所以直接抛出 OutofMemoryError。</li></ul></li></ul><h3 id="内存泄漏">内存泄漏</h3><p>(Memory Leak)</p><ul><li><p>也称作“存储渗漏”。<em>严格来说</em>，<strong>只有对象不会再被程序用到了，但是GC又不能回收他们的情况，才叫内存泄漏。</strong></p></li><li><p>但实际情况很多时候一些不太好的实践（或疏忽）会导致对象的生命周期变得很长甚至导致OOM，也可以叫做<strong>宽泛意义上的&quot;内存泄漏&quot;</strong>。</p></li><li><p>尽管内存泄漏并不会立刻引起程序崩溃，但是一旦发生内存泄漏，程序中的可用内存就会被逐步蚕食，直至耗尽所有内存，最终出现 OutofMemory 异常，导致程序崩溃。</p></li><li><p>注意，这里的存储空间并不是指物理内存，而是指虚拟内存大小，这个虚拟内存大小取决于磁盘交换区设定的大小。</p></li></ul><p><img src="./../jvm-sgg11/image-20231227210814042.png" alt=""></p><h4 id="内存泄漏常见举例👍">内存泄漏常见举例👍</h4><ol><li>单例模式</li></ol><p>单例的生命周期和应用程序是一样长的，所以在单例程序中，如果持有对外部对象的引用的话，那么这个外部对象是不能被回收的，则会导致内存泄漏的产生。</p><ol start="2"><li>一些提供 close() 的资源未关闭导致内存泄漏</li></ol><p>数据库连接 dataSourse.getConnection()，网络连接 socket 和 io 连接必须手动 close，否则是不能被回收的。</p><h2 id="3-Stop-The-World">3-Stop The World</h2><ul><li><p>Stop-the-World，简称 STW，指的是 GC 事件发生过程中，会产生应用程序的停顿。<strong>停顿产生时整个应用程序线程都会被暂停，没有任何响应</strong>，有点像卡死的感觉，这个停顿称为 STW。</p><ul><li>可达性分析算法中枚举根节点（GC Roots）会导致所有Java执行线程停顿，为什么需要停顿所有 Java 执行线程呢？<ul><li><p>分析工作必须在一个能确保一致性的快照中进行</p></li><li><p>一致性指整个分析期间整个执行系统看起来像被冻结在某个时间点上</p></li><li><p><strong>如果出现分析过程中对象引用关系还在不断变化，则分析结果的准确性无法保证</strong></p></li></ul></li></ul></li><li><p>被 STW 中断的应用程序线程会在完成 GC 之后恢复，频繁中断会让用户感觉像是网速不快造成电影卡带一样，所以我们需要减少 STW 的发生。</p></li><li><p>STW事件和采用哪款 GC 无关，所有的 GC 都有这个事件。</p></li><li><p>哪怕是G1也不能完全避免 Stop-the-world 情况发生，只能说垃圾回收器越来越优秀，回收效率越来越高，尽可能地缩短了暂停时间。</p></li><li><p>STW 是 JVM 在<strong>后台自动发起和自动完成</strong>的。在用户不可见的情况下，把用户正常的工作线程全部停掉。</p></li><li><p>开发中不要用 System.gc() ，这会导致 Stop-the-World 的发生。</p></li></ul><h2 id="4-垃圾回收的并行与并发">4-垃圾回收的并行与并发</h2><p><strong>并发(Concurrent)</strong></p><ul><li>在操作系统中，是指<strong>一个时间段</strong>中有几个程序都处于已启动运行到运行完毕之间，且这几个程序都是在同一个处理器上运行</li><li>并发不是真正意义上的“同时进行”，只是 CPU 把一个时间段划分成几个时间片段（时间区间），然后在这几个时间区间之间来回切换。由于 CPU 处理的速度非常快，只要时间间隔处理得当，即可让用户感觉是多个应用程序同时在进行</li></ul><p><img src="./../jvm-sgg11/image-20231227212116970.png" alt=""></p><p><strong>并行(Parallel)</strong></p><ul><li><p>当系统有一个以上 CPU 时，当一个 CPU 执行一个进程时，另一个 CPU 可以执行另一个进程，两个进程互不抢占 CPU 资源，可以<strong>同时</strong>进行，我们称之为并行（Parallel）</p></li><li><p>其实决定并行的因素不是 CPU 的数量，而是 CPU 的核心数量，比如一个 CPU 多个核也可以并行</p></li><li><p>适合科学计算，后台处理等弱交互场景</p></li></ul><p><img src="./../jvm-sgg11/image-20231227212342306.png" alt=""></p><p><strong>并行 VS 并发</strong></p><ul><li>并发，指的是多个事情，在同一时间段内同时发生了。</li><li>并行，指的是多个事情，在同一时间点上（或者说同一时刻）同时发生了。</li><li>并发的多个任务之间是互相抢占资源的。并行的多个任务之间是不互相抢占资源的。</li><li>只有在多 CPU 或者一个 CPU 多核的情况中，才会发生并行。否则，看似同时发生的事情，其实都是并发执行的。</li></ul><h3 id="垃圾回收的并发与并行">垃圾回收的并发与并行</h3><ul><li>并行（Parallel）：指多条垃圾收集线程并行工作，但此时用户线程仍处于等待状态。<ul><li>如ParNew、Parallel Scavenge、Parallel Old</li></ul></li><li>串行（Serial）<ul><li>相较于并行的概念，单线程执行。</li><li>如果内存不够，则程序暂停，启动JVM垃圾回收器进行垃圾回收（单线程）</li></ul></li></ul><p><img src="./../jvm-sgg11/image-20231227212625189.png" alt=""></p><p>并发和并行，在谈论垃圾收集器的上下文语境中，它们可以解释如下：</p><ul><li>并发（Concurrent）：指<strong>用户线程与垃圾收集线程同时执行</strong>（但不一定是并行的，可能会交替执行），垃圾回收线程在执行时不会停顿用户程序的运行。<ul><li>比如用户程序在继续运行，而垃圾收集程序线程运行于另一个CPU上；</li></ul></li><li>典型垃圾回收器：CMS、G1</li></ul><p><img src="./../jvm-sgg11/image-20231227212740412.png" alt=""></p><h2 id="5-安全点与安全区域">5-安全点与安全区域</h2><p><strong>安全点（Safepoint）</strong></p><ul><li>程序执行时并非在所有地方都能停顿下来开始GC，只有在特定的位置才能停顿下来开始GC，这些位置称为“安全点（Safepoint）”。</li><li>Safe Point 的选择很重要，<strong>如果太少可能导致GC等待的时间太长，如果太频繁可能导致运行时的性能问题</strong>。大部分指令的执行时间都非常短暂，通常会根据“<strong>是否具有让程序长时间执行的特征</strong>”为标准。比如：选择一些执行时间较长的指令作为 Safe Point，<strong>如方法调用、循环跳转和异常跳转等</strong>。</li></ul><p><strong>如何在 GC 发生时，检查所有线程都跑到最近的安全点停顿下来呢？</strong></p><ul><li><strong>抢先式中断</strong>：（目前没有虚拟机采用了）首先中断所有线程。如果还有线程不在安全点，就恢复线程，让线程跑到安全点。</li><li><strong>主动式中断</strong>：设置一个中断标志，各个线程运行到 Safe Point 的时候<strong>主动轮询</strong>这个标志，如果中断标志为真，则将自己进行中断挂起。</li></ul><p><strong>安全区域（Safe Region）</strong></p><ul><li>Safepoint 机制保证了程序执行时，在不太长的时间内就会遇到可进入GC的Safepoint。但是，程序“不执行”的时候呢？</li><li>例如线程处于 Sleep 状态或 Blocked 状态，这时候线程无法响应 JVM 的中断请求，“走”到安全点去中断挂起，JVM 也不太可能等待线程被唤醒。对于这种情况，就需要安全区域（Safe Region）来解决。</li><li><strong>安全区域是指在一段代码片段中，对象的引用关系不会发生变化，在这个区域中的任何位置开始 GC 都是安全的</strong>。我们也可以把 Safe Region 看做是被扩展了的 Safepoint。</li></ul><p><strong>安全区域的执行流程</strong></p><ol><li>当线程运行到 Safe Region 的代码时，首先标识已经进入了 Safe Region，如果这段时间内发生 GC，JVM 会忽略标识为 Safe Region 状态的线程</li><li>当线程即将离开 Safe Region 时，会检查JVM是否已经完成根节点枚举（即GC Roots的枚举），如果完成了，则继续运行，否则线程必须等待直到收到可以安全离开 Safe Region 的信号为止；</li></ol><h2 id="6-引用-强软弱虚">6-引用(强软弱虚)</h2><h3 id="概述">概述</h3><ul><li><p>我们希望能描述这样一类对象：当内存空间还足够时，则能保留在内存中；如果内存空间在进行垃圾收集后还是很紧张，则可以抛弃这些对象。</p></li><li><p>既偏门又非常高频的面试题：强引用、软引用、弱引用、虚引用有什么区别？具体使用场景是什么？</p></li><li><p>在 JDK1.2 版之后，Java 对引用的概念进行了扩充，将引用分为：</p><ul><li>强引用（Strong Reference）</li><li>软引用（Soft Reference）</li><li>弱引用（Weak Reference）</li><li>虚引用（Phantom Reference）</li><li><strong>这4种引用强度依次逐渐减弱</strong></li></ul></li><li><p>除强引用外，其他 3 种引用均可以在 java.lang.ref 包中找到它们的身影。如下图，显示了这 3 种引用类型对应的类，开发人员可以在应用程序中直接使用它们。</p></li></ul><p>Reference 子类中只有终结器引用是包内可见的，其他3种引用类型均为public，可以在应用程序中直接使用</p><ul><li><p><strong>强引用（StrongReference）</strong>：最传统的“引用”的定义，是指在程序代码之中普遍存在的引用赋值，即类似<code>object obj=new Object()</code>这种引用关系。无论任何情况下，只要强引用关系还存在，垃圾收集器就永远不会回收掉被引用的对象。宁可报 OOM，也不会 GC 强引用*(死也不回收)*</p></li><li><p><strong>软引用（SoftReference）</strong>：在系统将要发生内存溢出之前，将会把这些对象列入回收范围之中进行第二次回收。如果这次回收后还没有足够的内存，才会抛出内存溢出异常。<em>(内存不足即回收)</em></p></li><li><p><strong>弱引用（WeakReference）</strong>：被弱引用关联的对象只能生存到下一次垃圾收集之前。当垃圾收集器工作时，无论内存空间是否足够，都会回收掉被弱引用关联的对象。<em>(发现即回收)</em></p></li><li><p><strong>虚引用（PhantomReference）</strong>：一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来获得一个对象的实例。为一个对象设置虚引用关联的<strong>唯一目的就是能在这个对象被收集器回收时收到一个系统通知</strong>。</p></li></ul><h3 id="强引用–不回收">强引用–不回收</h3><ul><li><p>在 Java 程序中，最常见的引用类型是强引用（普通系统 99% 以上都是强引用），也就是我们最常见的普通对象引用，<strong>也是默认的引用类型</strong>。</p></li><li><p>当在 Java 语言中使用new操作符创建一个新的对象，并将其赋值给一个变量的时候，这个变量就成为指向该对象的一个强引用。</p></li><li><p>**只要强引用的对象是<a href="/2023/12/24/jvm-sgg10/#生存还是死亡?">可触及的</a>，垃圾收集器就永远不会回收掉被引用的对象。**只要强引用的对象是可达的，jvm 宁可报 OOM，也不会回收强引用。</p></li><li><p>对于一个普通的对象，如果没有其他的引用关系，只要超过了引用的作用域或者显式地将相应（强）引用赋值为 null，就是可以当做垃圾被收集了，当然具体回收时机还是要看垃圾收集策略。</p></li><li><p>相对的，软引用、弱引用和虚引用的对象是软可触及、弱可触及和虚可触及的，在一定条件下，都是可以被回收的。所以，<strong>强引用是造成Java内存泄漏的主要原因之一</strong>。</p></li></ul><p><strong>总结</strong></p><p>强引用具备以下特点：</p><ul><li><p>强引用可以直接访问目标对象。</p></li><li><p>强引用所指向的对象在任何时候都不会被系统回收，虚拟机宁愿抛出 OOM 异常，也不会回收强引用所指向对象。</p></li><li><p>强引用可能导致内存泄漏。</p></li></ul><h3 id="软引用–内存不足即回收">软引用–内存不足即回收</h3><ul><li><p>软引用是用来描述一些还有用，但非必需的对象。<strong>只被软引用关联着的对象，在系统将要发生内存溢出异常前，会把这些对象列进回收范围之中进行第二次回收</strong>，如果这次回收还没有足够的内存，才会抛出内存溢出异常。注意，这里的第一次回收是不可达的对象</p></li><li><p>软引用通常用来实现内存敏感的缓存。比如：<strong>高速缓存</strong>就有用到软引用。如果还有空闲内存，就可以暂时保留缓存，当内存不足时清理掉，这样就保证了使用缓存的同时，不会耗尽内存。</p></li><li><p>垃圾回收器在某个时刻决定回收软可达的对象的时候，会清理软引用，并可选地把引用存放到一个引用队列（Reference Queue）。</p></li><li><p>类似弱引用，只不过 Java 虚拟机会尽量让软引用的存活时间长一些，迫不得已才清理。</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 声明强引用</span><span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> sf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>obj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//销毁强引用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>demo</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// -Xmx10m -XX:+PrintGCDetails</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SoftReferenceTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token string">"[id="</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">", name="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"] "</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建对象，建立软引用</span>        <span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> userSoftRef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"dee"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//从软引用中重新获得强引用对象</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userSoftRef<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---目前内存还不紧张---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"After GC:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//垃圾回收之后获得软引用中的对象</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userSoftRef<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//由于堆空间内存足够，所有不会回收软引用的可达对象。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---下面开始内存紧张了---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//让系统认为内存资源紧张、不够</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">7168</span> <span class="token operator">-</span> <span class="token number">710</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// heap=10M old=6.6M</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//再次从软引用中获取数据</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userSoftRef<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//在报OOM之前，垃圾回收器会回收软引用的可达对象。</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>f<img src="./../jvm-sgg11/image-20231227223328325.png" alt="数组大小设置思路"></p><h3 id="弱引用–发现即回收">弱引用–发现即回收</h3><ul><li><p>弱引用也是用来描述那些非必需对象，<strong>只被弱引用关联的对象只能生存到下一次垃圾收集发生为止。在系统 GC 时，只要发现弱引用，不管系统堆空间使用是否充足，都会回收掉只被弱引用关联的对象</strong>。</p></li><li><p>但是，由于垃圾回收器的线程通常优先级很低，因此，并不一定能很快地发现持有弱引用的对象。在这种情况下，<strong>弱引用对象可以存在较长的时间</strong>。</p></li><li><p>弱引用和软引用一样，在构造弱引用时，也可以指定一个引用队列，当弱引用对象被回收时，就会加入指定的引用队列，通过这个队列可以跟踪对象的回收情况。</p></li><li><p><strong>软引用、弱引用都非常适合来保存那些可有可无的缓存数据</strong>。如果这么做，当系统内存不足时，这些缓存数据会被回收，不会导致内存溢出。而当内存资源充足时，这些缓存数据又可以存在相当长的时间，从而起到加速系统的作用。</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 声明强引用</span><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> sf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>obj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//销毁强引用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>弱引用对象与软引用对象的最大不同</strong>就在于，当GC在进行回收时，需要通过算法检查是否回收软引用对象，而对于弱引用对象，GC总是进行回收。<strong>弱引用对象更容易、更快被 GC 回收</strong>。</p><p><strong>面试题：你开发中使用过WeakHashMap吗？</strong></p><h3 id="虚引用–对象回收跟踪">虚引用–对象回收跟踪</h3><ul><li><p>也称为&quot;幽灵引用&quot;或者&quot;幻影引用&quot;，是所有引用类型中最弱的一个</p></li><li><p>一个对象是否有虚引用的存在，完全不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它和没有引用几乎是一样的，随时都可能被垃圾回收器回收。</p></li><li><p>它不能单独使用，也无法通过虚引用来获取被引用的对象。当试图通过虚引用的 get() 方法取得对象时，总是 null 。<strong>即通过虚引用无法获取到我们的数据</strong></p></li><li><p><strong>为一个对象设置虚引用关联的唯一目的在于跟踪垃圾回收过程。比如：能在这个对象被收集器回收时收到一个系统通知。</strong></p></li><li><p>虚引用必须和引用队列一起使用。虚引用在创建时必须提供一个引用队列作为参数。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象后，将这个虚引用加入引用队列，以通知应用程序对象的回收情况。</p></li><li><p>由于虚引用可以跟踪对象的回收时间，因此，也可以将一些资源释放操作放置在虚引用中执行和记录。</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 声明强引用</span><span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 声明引用队列</span><span class="token class-name">ReferenceQueue</span> phantomQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 声明虚引用（还需要传入引用队列）</span><span class="token class-name">PhantomReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> sf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhantomReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> phantomQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>obj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>虚引用代码示例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhantomReferenceTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">PhantomReferenceTest</span> obj<span class="token punctuation">;</span><span class="token comment">//当前类对象的声明</span>    <span class="token keyword">static</span> <span class="token class-name">ReferenceQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PhantomReferenceTest</span><span class="token punctuation">></span></span> phantomQueue <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//引用队列</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CheckRefQueue</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>phantomQueue <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">PhantomReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PhantomReferenceTest</span><span class="token punctuation">></span></span> objt <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        objt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">PhantomReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PhantomReferenceTest</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> phantomQueue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>objt <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"追踪垃圾回收过程：PhantomReferenceTest实例被GC了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span> <span class="token comment">//finalize()方法只能被调用一次！</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用当前类的finalize()方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CheckRefQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置为守护线程：当程序中没有非守护线程时，守护线程也就执行结束。</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        phantomQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PhantomReferenceTest</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhantomReferenceTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//构造了 PhantomReferenceTest 对象的虚引用，并指定了引用队列</span>        <span class="token class-name">PhantomReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PhantomReferenceTest</span><span class="token punctuation">></span></span> phantomRef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhantomReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> phantomQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//不可获取虚引用中的对象</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>phantomRef<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第 1 次 gc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//将强引用去除</span>            obj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token comment">//第一次进行GC,由于对象可复活，GC无法回收该对象</span>            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"obj 是 null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"obj 可用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第 2 次 gc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            obj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//一旦将obj对象回收，就会将此虚引用存放到引用队列中。</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"obj 是 null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"obj 可用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./../jvm-sgg11/image-20231227230831048.png" alt="分析图"></p><h2 id="7-终结器引用-了解">7-终结器引用(了解)</h2><p><strong>(Final reference)</strong></p><ul><li><p>它用于实现对象的 finalize() 方法，也可以称为终结器引用</p></li><li><p>无需手动编码，其内部配合引用队列使用</p></li><li><p>在 GC 时，终结器引用入队。由 Finalizer 线程通过终结器引用找到被引用对象调用它的 finalize() 方法，第二次GC时才回收被引用的对象</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM-10-垃圾回收概述和相关算法</title>
      <link href="/2023/12/24/jvm-sgg10/"/>
      <url>/2023/12/24/jvm-sgg10/</url>
      
        <content type="html"><![CDATA[<h1>垃圾回收概述和相关算法</h1><img src="./../jvm-sgg10/image-20231224183056294.png" style="zoom: 50%;" /><img src="./../jvm-sgg10/image-20231224184307909.png" style="zoom: 50%;" /><ul><li><p>垃圾收集，不是 Java 语言的伴生产物。早在1960年，第一门开始使用内存动态分配和垃圾收集技术的Lisp语言诞生。</p></li><li><p>关于垃圾收集有三个经典问题：</p><ul><li>哪些内存需要回收？</li><li>什么时候回收？</li><li>如何回收？</li></ul></li><li><p>垃圾收集机制是Java的招牌能力，<strong>极大地提高了开发效率</strong>。如今，垃圾收集几乎成为现代语言的标配，即使经过如此长时间的发展，Java 的垃圾收集机制仍然在不断的演进中，不同大小的设备、不同特征的应用场景，对垃圾收集提出了新的挑战，这当然也是<strong>面试的热点</strong>。</p></li></ul><p><strong>常见面试题</strong></p><ul><li>你知道哪几种垃圾回收器，各自的优缺点，重点讲一下 CMS 和 G1？</li><li>JVM GC 算法有哪些，目前的 JDK 版本采用什么回收算法？</li><li>G1 回收器讲下回收过程 GC 是什么？为什么要有 GC？</li><li>GC 的两种判定方法？CMS 收集器与 G1 收集器的特点</li><li>说一下 GC 算法，分代回收说下</li><li>垃圾收集策略和算法</li><li>JVM GC 原理，JVM 怎么回收内存</li><li>CMS 特点，垃圾回收算法有哪些？各自的优缺点，他们共同的缺点是什么？</li><li>Java 的垃圾回收器都有哪些，说下 G1 的应用场景，平时你是如何搭配使用垃圾回收器的</li><li>你知道哪几种垃圾收集器，各自的优缺点，重点讲下 CMS 和 G1</li><li>包括原理，流程，优缺点。垃圾回收算法的实现原理</li><li>讲一讲垃圾回收算法。</li><li>什么情况下触发垃圾回收？</li><li>如何选择合适的垃圾收集算法？</li><li>JVM 有哪三种垃圾回收器？</li><li>常见的垃圾回收器算法有哪些，各有什么优劣？</li><li>System.gc() 和 Runtime.gc() 会做什么事情？</li><li>Java GC 机制？GC Roots 有哪些？</li><li>Java 对象的回收方式，回收算法。</li><li>CMS 和 G1 了解么，CMS 解决什么问题，说一下回收的过程。</li><li>CMS 回收停顿了几次，为什么要停顿两次?</li></ul><h2 id="1-概述">1-概述</h2><p><strong>什么是垃圾</strong></p><ul><li>垃圾是指<strong>在运行程序中没有任何指针指向的对象</strong>，这个对象就是需要被回收的垃圾。</li><li>外文：An object is considered garbage when it can no longer be reached from any pointer in the running program.</li><li>如果不及时对内存中的垃圾进行清理，那么，这些垃圾对象所占的内存空间会一直保留到应用程序结束，被保留的空间无法被其他对象使用。甚至可能<strong>导致内存溢出</strong>。</li></ul><p><strong>为什么需要 GC</strong></p><ul><li><p>对于高级语言来说，一个基本认知是如果不进行垃圾回收，<strong>内存迟早都会被消耗完</strong>，因为不断地分配内存空间而不进行回收，就好像不停地生产生活垃圾而从来不打扫一样。</p></li><li><p>除了释放没用的对象，垃圾回收也可以清除内存里的记录碎片。碎片整理将所占用的堆内存移到堆的一端，<strong>以便 JVM 将整理出的内存分配给新的对象</strong>。</p></li><li><p>随着应用程序所应付的业务越来越庞大、复杂，用户越来越多，<strong>没有 GC 就不能保证应用程序的正常进行</strong>。而经常造成 STW 的 GC又跟不上实际的需求，所以才会不断地尝试对GC进行优化。</p></li></ul><p><strong>早期垃圾回收</strong></p><ul><li>在早期的 C/C++ 时代，垃圾回收基本上是手工进行的。开发人员可以使用 new 关键字进行内存申请，并使用 delete 关键字进行内存释放。比如以下代码：</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">MibBridge <span class="token operator">*</span> pBridge<span class="token operator">=</span> new <span class="token function">cmBaseGroupBridge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果注册失败，使用Delete释放该对象所占内存区域</span><span class="token keyword">if</span><span class="token punctuation">(</span>pBridge<span class="token operator">-></span><span class="token function">Register</span><span class="token punctuation">(</span>kDestroy<span class="token punctuation">)</span><span class="token operator">!=</span>NO ERROR<span class="token punctuation">)</span>    delete pBridge<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>这种方式可以灵活控制内存释放的时间，但是会给开发人员带来<strong>频繁申请和释放内存的管理负担</strong>。倘若有一处内存区间由于程序员编码的问题忘记被回收，那么就会产生<strong>内存泄漏</strong>，垃圾对象永远无法被清除，随着系统运行时间的不断增长，垃圾对象所耗内存可能持续上升，直到出现内存溢出并造成<strong>应用程序崩溃</strong>。</li><li>有了垃圾回收机制后，上述代码极有可能变成这样</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">MibBridge <span class="token operator">*</span> pBridge<span class="token operator">=</span>new <span class="token function">cmBaseGroupBridge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pBridge<span class="token operator">-></span><span class="token function">Register</span><span class="token punctuation">(</span>kDestroy<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>现在，除了 Java 以外，C#、Python、Ruby 等语言都使用了自动垃圾回收的思想，也是未来发展趋势，可以说这种自动化的内存分配和来及回收方式已经成为了现代开发语言必备的标准。</li></ul><p><strong>Java 垃圾回收机制</strong></p><p><strong>官网介绍</strong>：<a href="https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/toc.html">https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/toc.html</a></p><ul><li><p>自动内存管理，无需开发人员手动参与内存的分配与回收，这样<strong>降低内存泄漏和内存溢出的风险</strong></p><ul><li>没有垃圾回收器，java 也会和 cpp 一样，各种悬垂指针，野指针，泄露问题让你头疼不已。</li></ul></li><li><p>自动内存管理机制，将程序员从繁重的内存管理中释放出来，可以<strong>更专心地专注于业务开发</strong></p></li></ul><p><strong>自动内存管理的担忧</strong></p><ul><li>对于 Java 开发人员而言，自动内存管理就像是一个黑匣子，如果过度依赖于&quot;自动&quot;，那么这将会是一场灾难，最严重的就会<strong>弱化 Java 开发人员在程序出现内存溢出时定位问题和解决问题的能力</strong>。</li><li>此时，了解 JVM 的自动内存分配和内存回收原理就显得非常重要，只有在真正了解 JVM 是如何管理内存后，我们才能够在遇见 OutofMemoryError 时，快速地根据错误异常日志定位问题和解决问题。</li><li>当需要排查各种内存溢出、内存泄漏问题时，当垃圾收集成为系统达到更高并发量的瓶颈时，我们就必须对这些“自动化”的技术<strong>实施必要的监控和调节</strong>。</li></ul><p><strong>关心区域</strong></p><ul><li><p>垃圾收集器可以对年轻代回收，也可以对老年代回收，甚至是全栈和方法区的回收，</p><ul><li>其中，<strong>Java 堆是垃圾收集器的工作重点</strong></li></ul></li><li><p>从次数上讲：</p><ul><li><p>频繁收集 Young 区</p></li><li><p>较少收集 Old 区</p></li><li><p>基本不收集 Perm 区（元空间）</p></li></ul></li></ul><h2 id="2-标记阶段-引用基数算法">2-标记阶段: 引用基数算法</h2><h3 id="对象存活判断">对象存活判断</h3><ul><li>在堆里存放着几乎所有的 Java 对象实例，在 GC 执行垃圾回收之前，首先<strong>需要区分出内存中哪些是存活对象，哪些是已经死亡的对象。<strong>只有被标记为己经死亡的对象，GC 才会在执行垃圾回收时，释放掉其所占用的内存空间，因此这个过程我们可以称为</strong>垃圾标记阶段</strong>。</li><li>那么在 JVM 中究竟是如何标记一个死亡对象呢？简单来说，当一个对象已经不再被任何的存活对象继续引用时，就可以宣判为已经死亡。</li><li>判断对象存活一般有两种方式：<strong>引用计数算法</strong>和<strong>可达性分析算法</strong>。</li></ul><h3 id="方式一-引用计数算法">方式一: 引用计数算法</h3><ul><li><p>引用计数算法（Reference Counting）比较简单，对每个对象保存一个整型的<strong>引用计数器属性。用于记录对象被引用的情况</strong>。</p></li><li><p>对于一个对象A，只要有任何一个对象引用了 A，则 A 的引用计数器就加 1；当引用失效时，引用计数器就减 1。只要对象A的引用计数器的值为 0，即表示对象 A 不可能再被使用，可进行回收。</p></li><li><p>优点：<strong>实现简单，垃圾对象便于辨识；判定效率高，回收没有延迟性</strong>。</p></li><li><p>缺点：</p><ul><li><p>它需要单独的字段存储计数器，这样的做法增加了<strong>存储空间的开销</strong>。</p></li><li><p>每次赋值都需要更新计数器，伴随着加法和减法操作，这增加了<strong>时间开销</strong>。</p></li><li><p>引用计数器有一个严重的问题，即<strong>无法处理循环引用</strong>的情况。这是一条<strong>致命缺陷</strong>，导致在 Java 的垃圾回收器中没有使用这类算法。</p></li></ul></li></ul><p><img src="./../jvm-sgg10/image-20231224192541616.png" alt="循环引用"></p><p><strong>小结</strong></p><ul><li>引用计数算法，是很多语言的资源回收选择，例如因人工智能而更加火热的 Python，它更是同时支持引用计数和垃圾收集机制。</li><li>具体哪种最优是要看场景的，业界有大规模实践中仅保留引用计数机制，以提高吞吐量的尝试。</li><li>Java 并没有选择引用计数，是因为其存在一个基本的难题，也就是很难处理循环引用关系。</li><li>Python 如何解决循环引用？<ul><li>手动解除：很好理解，就是在合适的时机，解除引用关系。</li><li>使用弱引用 weakref，weakref 是 Python 提供的标准库，旨在解决循环引用。</li></ul></li></ul><h2 id="3-标记阶段-可达性分析算法">3-标记阶段: 可达性分析算法</h2><blockquote><p>根搜索算法、追踪性垃圾收集</p></blockquote><ul><li>相对于引用计数算法而言，可达性分析算法不仅同样具备实现简单和执行高效等特点，更重要的是该算法可以有效地<strong>解决在引用计数算法中循环引用的问题，防止内存泄漏的发生</strong>。</li><li>相较于引用计数算法，这里的可达性分析就是 Java、C# 选择的。这种类型的垃圾收集通常也叫作<strong>追踪性垃圾收集</strong>（Tracing Garbage Collection）</li></ul><h3 id="实现思路">实现思路</h3><ul><li>所谓&quot;GCRoots&quot;根集合就是一组必须活跃的引用</li><li>其基本思路如下：</li></ul><ol><li>可达性分析算法是以根对象集合（GCRoots）为起始点，按照从上至下的方式<strong>搜索被根对象集合所连接的目标对象是否可达。</strong></li><li>使用可达性分析算法后，内存中的存活对象都会被根对象集合直接或间接连接着，搜索所走过的路径称为<strong>引用链</strong>（Reference Chain）</li><li>如果目标对象没有任何引用链相连，则是不可达的，就意味着该对象己经死亡，可以标记为垃圾对象。</li><li>在可达性分析算法中，只有能够被根对象集合直接或者间接连接的对象才是存活对象。</li></ol><p><img src="./../jvm-sgg10/image-20231224193322411.png" alt=""></p><h3 id="GC-Roots">GC Roots</h3><p><strong>在 Java 语言中, GC Roots 包括一下几类元素(面试)</strong></p><ul><li>虚拟机栈中引用的对象<ul><li>比如：各个线程被调用的方法中使用到的参数、局部变量等。</li></ul></li><li>本地方法栈内 JNI（通常说的本地方法）引用的对象</li><li>方法区中类静态属性引用的对象<ul><li>比如：Java 类的引用类型静态变量</li></ul></li><li>方法区中常量引用的对象<ul><li>比如：字符串常量池（StringTable）里的引用</li></ul></li><li>所有被同步锁 synchronized 持有的对象</li><li>Java 虚拟机内部的引用。<ul><li>基本数据类型对应的 Class 对象，一些常驻的异常对象（如：NullPointerException、OutofMemoryError），系统类加载器。</li></ul></li><li>反映 Java 虚拟机内部情况的 JMXBean、JVMTI 中注册的回调、本地代码缓存等。</li></ul><p><img src="./../jvm-sgg10/image-20231225202329883.png" alt=""></p><ul><li>除了这些固定的 GC Roots 集合以外，根据用户所选用的垃圾收集器以及当前回收的内存区域不同，还可以有其他对象&quot;临时性&quot;地加入，共同构成完整 GC Roots 集合。比如：<strong>分代收集</strong>和局部回收（PartialGC）。<ul><li>如果只针对 Java 堆中的某一块区域进行垃圾回收（比如：典型的只针对新生代），必须考虑到内存区域是虚拟机自己的实现细节，更不是孤立封闭的，这个区域的对象完全有可能被其他区域的对象所引用，这时候就需要一并将关联的区域对象也加入 GC Roots 集合中去考虑，才能保证可达性分析的准确性。</li></ul></li></ul><h3 id="GC-Root判断技巧">GC Root判断技巧</h3><p>由于 Root 采用栈方式存放变量和指针，所以如果一个指针，它保存了堆内存里面的对象，但是自己又不存放在堆内存里面，那它就是一个 Root。</p><h3 id="注意">注意</h3><ul><li>如果要使用可达性分析算法来判断内存是否可回收，那么分析工作必须在一个能保障一致性的快照中进行。这点不满足的话分析结果的准确性就无法保证。</li><li>这点也是导致 GC 进行时必须&quot;Stop The World&quot;的一个重要原因。<ul><li>即使是号称（几乎）不会发生停顿的 CMS 收集器中，<strong>枚举根节点时也是必须要停顿的</strong>。</li></ul></li></ul><h2 id="4-对象的finalization机制">4-对象的finalization机制</h2><ul><li><p>Java 语言提供了对象终止（finalization）机制来允许开发人员提供<strong>对象被销毁之前的自定义处理逻辑</strong>。</p></li><li><p>当垃圾回收器发现没有引用指向一个对象，即：垃圾回收此对象之前，总会先调用这个对象的 finalize() 方法。</p></li><li><p>finalize() 方法允许在子类中被重写，<strong>用于在对象被回收时进行资源释放</strong>。通常在这个方法中进行一些资源释放和清理的工作，比如关闭文件、套接字和数据库连接等。</p></li></ul><p><strong>不要主动调用finalize()</strong></p><ul><li><p>永远不要主动调用某个对象的 finalize() 方法，应该交给垃圾回收机制调用。理由包括下面三点：</p><ul><li><p>在 finalize() 时可能会导致对象复活。</p></li><li><p>finalize() 方法的执行时间是没有保障的，它完全由GC线程决定，极端情况下，若不发生 GC，则 finalize() 方法将没有执行机会。</p></li><li><p>一个糟糕的 finalize() 会严重影响 GC 的性能。比如 finalize 是个死循环</p></li></ul></li><li><p>从功能上来说，finalize() 方法与 C++ 中的析构函数比较相似，但是 Java 采用的是基于垃圾回收器的自动内存管理机制，所以finalize() 方法在<strong>本质上不同于 C++ 中的析构函数</strong>。</p></li><li><p>由于 finalize() 方法的存在, <strong>虚拟机种的对象一般处于三种可能的状态</strong>, 接下面</p></li></ul><h3 id="生存还是死亡">生存还是死亡?</h3><ul><li><p>如果从所有的根节点都无法访问到某个对象，说明对象己经不再使用了。一般来说，此对象需要被回收。但事实上，也并非是&quot;非死不可&quot;的，这时候它们暂时处于“缓刑”阶段。<strong>一个无法触及的对象有可能在某一个条件下&quot;复活&quot;自己</strong>，如果这样，那么对它立即进行回收就是不合理的。为此，定义虚拟机中的对象可能的三种状态。如下：(<em>面试</em>)</p><ul><li><p><strong>可触及的</strong>：从根节点开始，可以到达这个对象。</p></li><li><p><strong>可复活的</strong>：对象的所有引用都被释放，但是对象有可能在 finalize() 中复活。</p></li><li><p><strong>不可触及的</strong>：对象的 finalize() 被调用，并且没有复活，那么就会进入不可触及状态。不可触及的对象不可能被复活，<strong>因为 finalize() 只会被调用一次</strong>。</p></li></ul></li><li><p>以上 3 种状态中，是由于 finalize() 方法的存在，进行的区分。只有在对象不可触及时才可以被回收。</p></li></ul><h3 id="具体过程">具体过程</h3><p>判定一个对象 objA 是否可回收，至少要经历两次标记过程：</p><ol><li>如果对象 objA 到 GC Roots 没有引用链，则进行第一次标记。</li><li>进行筛选，判断此对象是否有必要执行 finalize() 方法<ol><li>如果对象 objA 没有重写 finalize() 方法，或者 finalize() 方法已经被虚拟机调用过，则虚拟机视为&quot;没有必要执行&quot;，objA 被判定为不可触及的。</li><li>如果对象 objA 重写了 finalize() 方法，且还未执行过，那么 objA 会被插入到 F-Queue 队列中，由一个虚拟机自动创建的、低优先级的 Finalizer 线程触发其 finalize()方法执行。</li><li><strong>finalize() 方法是对象逃脱死亡的最后机会</strong>，稍后 GC 会对 F-Queue 队列中的对象进行第二次标记。<em>如果 objA 在 finalize() 方法中与引用链上的任何一个对象建立了联系</em>，那么在第二次标记时，objA 会被移出&quot;即将回收&quot;集合。之后，对象会再次出现没有引用存在的情况。在这个情况下，finalize() 方法不会被再次调用，对象会直接变成不可触及的状态，也就是说，一个对象的 finalize() 方法只会被调用一次。</li></ol></li></ol><p><strong>demo</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CanReliveObj</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">CanReliveObj</span> obj<span class="token punctuation">;</span><span class="token comment">//类变量，属于 GC Root</span>    <span class="token comment">//此方法只能被调用一次</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用当前类重写的finalize()方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        obj <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token comment">//当前待回收的对象在finalize()方法中与引用链上的一个对象obj建立了联系</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CanReliveObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 对象第一次成功拯救自己</span>            obj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用垃圾回收器</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第1次 gc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 因为Finalizer线程优先级很低，暂停2秒，以等待它</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"obj is dead"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"obj is still alive"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第2次 gc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 下面这段代码与上面的完全相同，但是这次自救却失败了</span>            obj <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 因为Finalizer线程优先级很低，暂停2秒，以等待它</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"obj is dead"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"obj is still alive"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-MAT与JProfiler的GC-Roots溯源">5-MAT与JProfiler的GC Roots溯源</h2><p>官网: <a href="http://www.eclipse.org/mat/">http://www.eclipse.org/mat/</a></p><ul><li>MAT 是 Memory Analyzer 的简称，它是一款功能强大的 Java 堆内存分析器。用于查找内存泄漏以及查看内存消耗情况。</li><li>MAT 是基于 Eclipse 开发的，是一款免费的性能分析工具。</li></ul><h3 id="获取-dump-文件方式">获取 dump 文件方式</h3><p><strong>方式一: 命令行使用 jmap</strong></p><p><strong>方式二：使用 JVisualVM</strong></p><ul><li>捕获的 heap dump 文件是一个临时文件，关闭 JVisualVM 后自动删除，若要保留，需要将其另存为文件。可通过以下方法捕获heap dump：</li><li>使用MAT打开</li></ul><h3 id="JProfiler-GC-Roots溯源">JProfiler GC Roots溯源</h3><p>略</p><h3 id="Jprofiler-分析-OOM">Jprofiler 分析 OOM</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Jprofiler分析OOM demo * -Xms8m -Xmx8m -XX:+HeapDumpOnOutOfMemoryError  这个参数的意思是当程序出现OOM的时候就会在当前工程目录生成一个dump文件 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeapOOM</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//1MB</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HeapOOM</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HeapOOM</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"count = "</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-清除阶段-标记-清除算法">6-清除阶段: 标记-清除算法</h2><p><strong>(Mark - Sweep)</strong></p><h3 id="垃圾清除阶段">垃圾清除阶段</h3><ul><li><p>当成功区分出内存中存活对象和死亡对象后，GC接下来的任务就是执行垃圾回收，释放掉无用对象所占用的内存空间，以便有足够的可用内存空间为新对象分配内存。</p></li><li><p>目前在JVM中比较常见的三种垃圾收集算法是</p><ul><li><p>标记-清除算法（Mark-Sweep）</p></li><li><p>复制算法（Copying）</p></li><li><p>标记-压缩算法（Mark-Compact）</p></li></ul></li></ul><p><strong>背景</strong></p><p>标记 - 清除算法（Mark-Sweep）是一种非常基础和常见的垃圾收集算法，该算法被 J.McCarthy 等人在1960年提出并并应用于 Lisp 语言。</p><p><strong>执行过程</strong></p><p>当堆中的有效内存空间（available memory）被耗尽的时候，就会停止整个程序（也被称为stop the world），然后进行两项工作，第一项则是标记，第二项则是清除</p><ul><li><p>标记：Collector 从引用根节点开始遍历，标记所有被引用的对象。一般是在对象的 Header 中记录为可达对象。</p><ul><li>注意：标记的是被引用的对象，也就是可达对象，并非标记的是即将被清除的垃圾对象</li></ul></li><li><p>清除：Collector 对堆内存从头到尾进行线性的遍历，如果发现某个对象在其 Header 中没有标记为可达对象，则将其回收</p></li></ul><p><img src="./../jvm-sgg10/image-20231225221123465.png" alt=""></p><p><strong>缺点</strong></p><ul><li><p>效率不算高( 需要进行 2 次遍历, 第二次是全表)</p></li><li><p>在进行 GC 的时候，需要停止整个应用程序，用户体验较差</p></li><li><p>这种方式清理出来的空闲内存是不连续的，产生内碎片，需要维护一个空闲列表</p></li></ul><p><strong>注意：何为清除？</strong></p><p>这里所谓的清除并不是真的置空，而是把需要清除的对象地址保存在空闲的地址列表里。下次有新对象需要加载时，判断垃圾的位置空间是否够，如果够，就存放（也就是覆盖原有的地址）。</p><p>关于空闲列表是在为对象分配内存的时候提过：(<a href="/2023/12/21/jvm-sgg7/#1-对象的实例化">链接</a>)</p><ol><li>如果内存规整<ul><li>采用指针碰撞的方式进行内存分配</li></ul></li><li>如果内存不规整<ul><li>虚拟机需要维护一个空闲列表</li><li>采用空闲列表分配内存</li></ul></li></ol><h2 id="7-清除阶段-复制算法">7-清除阶段: 复制算法</h2><p><strong>(Copying)</strong></p><p><strong>背景</strong></p><p>为了解决标记-清除算法在垃圾收集效率方面的缺陷，M.L.Minsky 于1963年发表了著名的论文，“使用双存储区的Lisp语言垃圾收集器CA LISP Garbage Collector Algorithm Using Serial Secondary Storage）”。M.L.Minsky 在该论文中描述的算法被人们称为复制（Copying）算法，它也被 M.L.Minsky 本人成功地引入到了  Lisp 语言的一个实现版本中。</p><p><strong>核心思想</strong></p><p>将活着的内存空间分为两块，每次只使用其中一块，在垃圾回收时将正在使用的内存中的存活对象复制到未被使用的内存块中，之后清除正在使用的内存块中的所有对象，交换两个内存的角色，最后完成垃圾回收</p><p><img src="./../jvm-sgg10/image-20231225221827337.png" alt=""></p><p>新生代里面就用到了复制算法，Eden区和S0区存活对象整体复制到S1区</p><p><strong>优点</strong></p><ul><li>没有标记和清除过程，实现简单，运行高效</li><li>复制过去以后保证空间的连续性，不会出现“碎片”问题。</li></ul><p><strong>缺点</strong></p><ul><li>此算法的缺点也是很明显的，就是需要两倍的内存空间。</li><li>对于 G1 这种分拆成为大量 region 的 GC，复制而不是移动，意味着 GC 需要维护 region 之间对象引用关系，不管是内存占用或者时间开销也不小(<a href="/2023/12/21/jvm-sgg7/#3-对象的访问定位">链接</a>&gt;)</li></ul><p><strong>特别的(应用场景)</strong></p><ul><li>如果系统中的垃圾对象很多. 复制算法需要复制的存活对象数量并不会太大，或者说非常低才行</li><li>老年代大量的对象存活，那么复制的对象将会有很多，效率会很低</li><li>在新生代，对常规应用的垃圾回收，一次通常可以回收 70% - 99%  的内存空间。回收性价比很高。所以现在的商业虚拟机都是用这种收集算法回收新生代。</li></ul><p><img src="./../jvm-sgg10/image-20231225222857467.png" alt=""></p><h2 id="8-清除阶段-标记-压缩算法">8-清除阶段: 标记-压缩算法</h2><p><strong>（标记-整理、Mark - Compact）</strong></p><p><strong>背景</strong></p><ul><li><p>复制算法的高效性是建立在存活对象少、垃圾对象多的前提下的。这种情况在新生代经常发生，但是在老年代，更常见的情况是大部分对象都是存活对象。如果依然使用复制算法，由于存活对象较多，复制的成本也将很高。因此，<strong>基于老年代垃圾回收的特性，需要使用其他的算法。</strong></p></li><li><p>标记-清除算法的确可以应用在老年代中，但是该算法不仅执行效率低下，而且在执行完内存回收后还会产生内存碎片，所以 JVM 的设计者需要在此基础之上进行改进。标记-压缩（Mark-Compact）算法由此诞生。</p></li><li><p>1970 年前后，G.L.Steele、C.J.Chene 和 D.s.Wise 等研究者发布标记-压缩算法。在许多现代的垃圾收集器中，人们都使用了标记-压缩算法或其改进版本。</p></li></ul><p><strong>执行过程</strong></p><ul><li>第一阶段和标记清除算法一样，从根节点开始标记所有被引用对象</li><li>第二阶段将所有的存活对象压缩到内存的一端，按顺序排放。</li><li>之后，清理边界外所有的空间。</li></ul><p><img src="./../jvm-sgg10/image-20231225223121910.png" alt=""></p><p><strong>标记-压缩算法 <em>VS</em> 标记-清除算法</strong></p><ul><li><p>标记-压缩算法的最终效果等同于标记-清除算法执行完成后，再进行一次内存碎片整理，因此，也可以把它称为<strong>标记-清除-压缩（Mark-Sweep-Compact）算法</strong>。</p></li><li><p>二者的本质差异在于标记-清除算法是一种<strong>非移动式的回收算法</strong>，标记-压缩是<strong>移动式的</strong>。是否移动回收后的存活对象是一项优缺点并存的风险决策。</p></li><li><p>可以看到，标记的存活对象将会被整理，按照内存地址依次排列，而未被标记的内存会被清理掉。如此一来，当我们需要给新对象分配内存时，JVM 只需要持有一个内存的起始地址即可，这比维护一个空闲列表显然少了许多开销。</p></li></ul><p><strong>优点</strong></p><ul><li>消除了标记-清除算法当中，内存区域分散的缺点，我们需要给新对象分配内存时，JVM 只需要持有一个内存的起始地址即可。</li><li>消除了复制算法当中，内存减半的高额代价。</li></ul><p><strong>缺点</strong></p><ul><li>从效率上来说，标记-整理算法要低于复制算法。</li><li>移动对象的同时，如果对象被其他对象引用，则还需要调整引用的地址（因为 HotSpot 虚拟机采用的不是句柄池的方式，而是直接指针）</li><li>移动过程中，需要全程暂停用户应用程序。即：STW</li></ul><h2 id="9-垃圾清除阶段小结">9-垃圾清除阶段小结</h2><h3 id="对比三种算法">对比三种算法</h3><table><thead><tr><th></th><th>Mark-Sweep</th><th>Mark-Compact</th><th>Copying</th></tr></thead><tbody><tr><td><strong>速率</strong></td><td>中等</td><td>最慢</td><td>最快</td></tr><tr><td><strong>空间开销</strong></td><td>少（但会堆积碎片）</td><td>少（不堆积碎片）</td><td>通常需要活对象的2倍空间（不堆积碎片）</td></tr><tr><td><strong>移动对象</strong></td><td>否</td><td>是</td><td>是</td></tr></tbody></table><ul><li>效率上来说，复制算法是当之无愧的老大，但是却浪费了太多内存。</li><li>而为了尽量兼顾上面提到的三个指标，<em>标记-整理算法</em>相对来说更平滑一些，但是效率上不尽如人意，它比<em>复制算法</em>多了一个标记的阶段，比<em>标记-清除</em>多了一个整理内存的阶段。</li></ul><h2 id="10-分代收集算法">10-分代收集算法</h2><ul><li><p>前面所有这些算法中，并没有一种算法可以完全替代其他算法，它们都具有自己独特的优势和特点。分代收集算法应运而生。</p></li><li><p>分代收集算法，是基于这样一个事实：**不同的对象的生命周期是不一样的。因此，不同生命周期的对象可以采取不同的收集方式，以便提高回收效率。**一般是把 Java 堆分为新生代和老年代，这样就可以根据各个年代的特点使用不同的回收算法，以提高垃圾回收的效率。</p></li><li><p>在Java程序运行的过程中，会产生大量的对象，其中有些对象是与业务信息相关:</p><ul><li>比如<strong>Http 请求中的 Session 对象、线程、Socket 连接</strong>，这类对象跟业务直接挂钩，因此生命周期比较长。</li><li>但是还有一些对象，主要是程序运行过程中生成的临时变量，这些对象生命周期会比较短，比如：<strong>String 对象</strong>，由于其不变类的特性，系统会产生大量的这些对象，有些对象甚至只用一次即可回收。</li></ul></li></ul><p><strong>目前几乎所有的 GC 都采用分代收集(Generational Collecting)算法执行垃圾回收的</strong></p><p><strong>年轻代（Young Gen）</strong></p><ul><li>年轻代特点：区域相对老年代较小，对象生命周期短、存活率低，回收频繁。</li><li>这种情况复制算法的回收整理，速度是最快的。复制算法的效率只和当前存活对象大小有关，因此很适用于年轻代的回收。而复制算法内存利用率不高的问题，通过 hotspot 中的两个 survivor 的设计得到缓解。</li></ul><p><strong>老年代（Tenured Gen）</strong></p><ul><li>老年代特点：区域较大，对象生命周期长、存活率高，回收不及年轻代频繁。</li><li>这种情况存在大量存活率高的对象，复制算法明显变得不合适。一般是由标记-清除或者是标记-清除与标记-整理的混合实现。<ul><li><p>Mark 阶段的开销与存活对象的数量成正比。</p></li><li><p>Sweep 阶段的开销与所管理区域的大小成正相关。</p></li><li><p>Compact 阶段的开销与存活对象的数据成正比。</p></li></ul></li></ul><p><strong>以HotSpot中的CMS回收器为例</strong></p><ul><li>CMS 是基于 Mark-Sweep 实现的，对于对象的回收效率很高。对于碎片问题，CMS 采用基于 Mark-Compact 算法的 Serial Old 回收器作为补偿措施：当内存回收不佳（碎片导致的 Concurrent Mode Failure 时），将采用 Serial Old 执行 Full GC 以达到对老年代内存的整理。</li><li>分代的思想被现有的虚拟机广泛使用。几乎所有的垃圾回收器都区分新生代和老年代</li></ul><h2 id="11-增量收集算法、分区算法">11-增量收集算法、分区算法</h2><h3 id="增量收集算法">增量收集算法</h3><p>上述现有的算法，在垃圾回收过程中，应用软件将处于一种 Stop the World 的状态。在<strong>Stop the World</strong>状态下，应用程序所有的线程都会挂起，暂停一切正常的工作，等待垃圾回收的完成。如果垃圾回收时间过长，应用程序会被挂起很久，将严重影响用户体验或者系统的稳定性。为了解决这个问题，即对实时垃圾收集算法的研究直接导致了增量收集（Incremental Collecting）算法的诞生。</p><p><strong>基本思想</strong></p><ul><li>如果一次性将所有的垃圾进行处理，需要造成系统长时间的停顿，那么就可以让垃圾收集线程和应用程序线程交替执行。<strong>每次，垃圾收集线程只收集一小片区域的内存空间，接着切换到应用程序线程。依次反复，直到垃圾收集完成。</strong></li><li>总的来说，增量收集算法的基础仍是传统的标记-清除和复制算法。增量收集算法通过<strong>对线程间冲突的妥善处理，允许垃圾收集线程以分阶段的方式完成标记、清理或复制工作</strong></li></ul><p><strong>缺点</strong></p><p>使用这种方式，由于在垃圾回收过程中，间断性地还执行了应用程序代码，所以能减少系统的停顿时间。但是，因为线程切换和上下文转换的消耗，会使得垃圾回收的总体成本上升，<strong>造成系统吞吐量的下降</strong>。</p><h3 id="分区算法">分区算法</h3><ul><li>一般来说，在相同条件下，堆空间越大，一次 GC 时所需要的时间就越长，有关 GC 产生的停顿也越长。为了更好地控制 GC 产生的停顿时间，将一块大的内存区域分割成多个小块，根据目标的停顿时间，每次合理地回收若干个小区间，而不是整个堆空间，从而减少一次 GC 所产生的停顿。</li><li>分代算法将按照对象的生命周期长短划分成两个部分，分区算法将整个堆空间划分成连续的不同小区间。</li><li>每一个小区间都独立使用，独立回收。这种算法的好处是可以控制一次回收多少个小区间。</li></ul><p><img src="./../jvm-sgg10/image-20231225225240658.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM-09-StringTable</title>
      <link href="/2023/12/23/jvm-sgg9/"/>
      <url>/2023/12/23/jvm-sgg9/</url>
      
        <content type="html"><![CDATA[<h1>StringTable</h1><h2 id="1-String的基本特性">1-String的基本特性</h2><ul><li>String：字符串，使用一对 “” 引起来表示</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>  <span class="token comment">// 字面量的定义方式</span><span class="token class-name">String</span> s2 <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// new 对象的方式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>String 被声明为 final 的，不可被继承</li><li>String 实现了 Serializable 接口：表示字符串是支持序列化的。实现了 Comparable 接口：表示 String 可以比较大小</li><li>String 在 jdk8 及以前内部定义了 <code>final char value[]</code> 用于存储字符串数据。JDK9 时改为 <code>byte[]</code></li></ul><h3 id="String存储结构变更">String存储结构变更</h3><p><strong>官方文档</strong>：<a href="http://openjdk.java.net/jeps/254">http://openjdk.java.net/jeps/254</a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// &lt;=jdk8</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">char</span> value<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// >=jdk9</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>String 类的当前实现将字符存储在 char 数组中，每个字符使用两个字节(16位)。</li><li>从许多不同的应用程序收集的数据表明，字符串是堆使用的主要组成部分，而且大多数字符串对象只包含拉丁字符（Latin-1）。这些字符只需要一个字节的存储空间，因此这些字符串对象的内部 char 数组中有一半的空间将不会使用，产生了大量浪费。</li><li>之前 String 类使用 UTF-16 的 char[] 数组存储，现在改为 byte[] 数组外加一个编码标识存储。该编码表示如果你的字符是 ISO-8859-1 或者 Latin-1，那么只需要一个字节存。如果你是其它字符集，比如 UTF-8，你仍然用两个字节存</li></ul><p><strong>结论：</strong></p><ul><li><p>String 再也不用 char[] 来存储了，改成了 byte [] 加上编码标记，节约了一些空间</p></li><li><p>同时基于 String 的数据结构，例如 StringBuffer 和 StringBuilder 也同样做了修改</p></li></ul><h3 id="基本特性">基本特性</h3><p><strong>String：代表不可变的字符序列。简称：不可变性。</strong></p><ul><li>当对字符串重新赋值时，需要重写指定内存区域赋值，不能使用原有的 value 进行赋值。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token comment">//字面量定义的方式，"abc"存储在字符串常量池中</span>    <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>    s1 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断地址：true  --> false</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//abc</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>当对现有的字符串进行连接操作时，也需要重新指定内存区域赋值，不能使用原有的 value 进行赋值。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>    s2 <span class="token operator">+=</span> <span class="token string">"def"</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//abcdef</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//abc</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>当调用 String 的 replace() 方法修改指定字符或字符串时，也需要重新指定内存区域赋值，不能使用原有的 value 进行赋值。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token char">'a'</span><span class="token punctuation">,</span> <span class="token char">'m'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//abc</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//mbc</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>面试题</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringExer</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"good"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ch <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token char">'t'</span><span class="token punctuation">,</span> <span class="token char">'e'</span><span class="token punctuation">,</span> <span class="token char">'s'</span><span class="token punctuation">,</span> <span class="token char">'t'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token keyword">char</span> ch<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        str <span class="token operator">=</span> <span class="token string">"test ok"</span><span class="token punctuation">;</span>        ch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'b'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StringExer</span> ex<span class="token punctuation">;</span>        ex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringExer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ex<span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>str<span class="token punctuation">,</span> ex<span class="token punctuation">.</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//good</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//best</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./../jvm-sgg9/image-20231224125537544.png" alt="字节码"></p><p><img src="./../jvm-sgg9/image-20231224130452060.png" alt="castore操作规范"></p><p>通过字节码可以看到, str 时仅仅是当前栈帧的局部变量表中, 并没有针对引用数据类型做修改的动作. 而数组则是采用了 <code>castore</code> 操作(具体细节说明结合规范), 切实地对引用数据类做操作.</p><p><strong>通过字面量的方式（区别于new）给一个字符串赋值，此时的字符串值声明在字符串常量池中。</strong></p><p><strong>字符串常量池中是不会存储相同内容的字符串的</strong></p><ul><li>String的String Pool（字符串常量池）是一个固定大小的Hashtable，默认值大小长度是 1009。如果放进 String Pool 的 String 非常多，就会造成Hash冲突严重，从而导致链表会很长，而链表长了后直接会造成的影响就是当调用 String.intern() 方法时性能会大幅下降。</li><li>使用 <code>-XX:StringTablesize</code> 可设置 StringTable 的长度</li><li>在 JDK6 中 StringTable 是固定的，就是 <strong>1009</strong> 的长度，所以如果常量池中的字符串过多就会导致效率下降很快，StringTablesize 设置没有要求</li><li>在 JDK7中，StringTable 的长度默认值是 <strong>60013</strong>，StringTablesize 设置没有要求</li><li>在 JDK8 中，StringTable 的长度默认值是 60013，StringTable 可以设置的最小值为 1009</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jps <span class="token comment">#查看java进程</span>jinfo <span class="token parameter variable">-flag</span> StringTableSize <span class="token number">5432</span> <span class="token comment">#查看大小</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-String的内存分配">2-String的内存分配</h2><ul><li><p>在 Java 语言中有 8 种基本数据类型和一种比较特殊的类型String。这些类型为了使它们在运行过程中速度更快、更节省内存，都提供了一种常量池的概念。</p></li><li><p>常量池就类似一个 Java 系统级别提供的缓存。8 种基本数据类型的常量池都是系统协调的，<strong>String 类型的常量池比较特殊。它的主要使用方法有两种</strong>。</p><ul><li><p>直接使用双引号声明出来的 String 对象会直接存储在常量池中。</p><ul><li>比如：<code>String info=&quot;hello&quot;;</code></li></ul></li><li><p>如果不是用双引号声明的 String 对象，可以使用 String 提供的 intern() 方法。这个后面重点谈</p></li></ul></li><li><p>Java 6 及以前，字符串常量池存放在永久代</p></li><li><p>Java 7 中 Oracle的工程师对字符串池的逻辑做了很大的改变，即将字符串常量池的位置调整到 Java 堆内</p><ul><li>所有的字符串都保存在堆（Heap）中，和其他普通对象一样，这样可以让你在进行调优应用时仅需要调整堆大小就可以了。</li><li>字符串常量池概念原本使用得比较多，但是这个改动使得我们有足够的理由让我们重新考虑在 Java 7 中使用 String.intern()。</li></ul></li><li><p>Java8 元空间，字符串常量在堆</p></li></ul><p><img src="./../jvm-sgg9/image-20231224131222406.png" alt="JDK6 StringTable位置"></p><p><img src="./../jvm-sgg9/image-20231224131302224.png" alt="JDK7 StringTable位置"></p><p><strong>StringTable为什么要调整?</strong></p><p><strong>官方文档</strong>:<a href="https://www.oracle.com/java/technologies/javase/jdk7-relnotes.html#jdk7changes">https://www.oracle.com/java/technologies/javase/jdk7-relnotes.html#jdk7changes</a></p><ol><li><p>permSize 默认比较小</p></li><li><p>永久代垃圾回收频率低, 大量的字符串无法及时回收容易进行 Full GC 产生 STW 或者容易产生 OOM</p></li></ol><p><strong>实例demo</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * jdk6中： * -XX:PermSize=6m -XX:MaxPermSize=6m -Xms6m -Xmx6m * * jdk8中： * -XX:MetaspaceSize=6m -XX:MaxMetaspaceSize=6m -Xms6m -Xmx6m */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringTest3</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//使用Set保持着常量池引用，避免full gc回收常量池行为</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//在short可以取值的范围内足以让6MB的PermSize或heap产生OOM了。</span>        <span class="token keyword">short</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JKD8 报错(由此也可见 Java8 元空间，字符串常量在堆)</p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">Exception in thread "main" java.lang.OutOfMemoryError: Java heap spaceat java.util.HashMap.resize(HashMap.java:703)at java.util.HashMap.putVal(HashMap.java:662)at java.util.HashMap.put(HashMap.java:611)at java.util.HashSet.add(HashSet.java:219)at com.atguigu.java.StringTest3.main(StringTest3.java:22)Process finished with exit code 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-String的基本操作">3-String的基本操作</h2><h3 id="demo1">demo1</h3><p>Java 语言规范里要求完全相同的字符串字面量，应该包含同样的 Unicode 字符序列（包含同一份码点序列的常量），并且必须是指向同一个 String 实例。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringTest4</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//此处断点, 观察内存中String数量</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//此处断点, 观察内存中String数量, 加了一个, 有一个换行符的增加</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 此处断点, 观察内存中String数量, 加了一个</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"7"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"9"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 此处断点, 观察内存中String数量, 与"1"相比增加了9个, 说明增加了1-9的字符串</span>        <span class="token comment">//如下的字符串"1" 到 "10"不会再次加载</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"7"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"9"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="demo2">demo2</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Memory</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Memory</span> mem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Memory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mem<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token class-name">Object</span> param<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> param<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./../jvm-sgg9/image-20231224133754427.png" alt="引用图解"></p><h2 id="4-字符串拼接操作">4-字符串拼接操作</h2><ol><li>常量与常量的拼接结果在常量池，原理是编译期优化</li><li>常量池中不会存在相同内容的变量</li><li>拼接前后，只要其中有一个是变量，结果就在堆中。变量拼接的原理是 StringBuilder</li><li>如果拼接的结果调用 intern() 方法，根据该字符串是否在常量池中存在，分为：<ul><li>如果存在，则返回字符串在常量池中的地址</li><li>如果字符串常量池中不存在该字符串，则在常量池中创建一份，并返回此对象的地址</li></ul></li></ol><h3 id="demo1-2">demo1</h3><p><strong>常量与常量的拼接结果在常量池，原理是编译期优化</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"a"</span> <span class="token operator">+</span> <span class="token string">"b"</span> <span class="token operator">+</span> <span class="token string">"c"</span><span class="token punctuation">;</span><span class="token comment">//编译期优化：等同于"abc"</span>    <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span> <span class="token comment">//"abc"一定是放在字符串常量池中，将此地址赋给s2</span>    <span class="token comment">/*         * 最终.java编译成.class,再执行.class         * String s1 = "abc";         * String s2 = "abc"         */</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./../jvm-sgg9/image-20231224135711521.png" alt="字节码"></p><h3 id="demo2-2">demo2</h3><p><strong>拼接前后，只要其中有一个是变量，结果就在堆中</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"javaEE"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"hadoop"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token string">"javaEEhadoop"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token string">"javaEE"</span> <span class="token operator">+</span> <span class="token string">"hadoop"</span><span class="token punctuation">;</span><span class="token comment">//编译期优化</span>    <span class="token comment">//如果拼接符号的前后出现了变量，则相当于在堆空间中new String()，具体的内容为拼接的结果：javaEEhadoop</span>    <span class="token class-name">String</span> s5 <span class="token operator">=</span> s1 <span class="token operator">+</span> <span class="token string">"hadoop"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s6 <span class="token operator">=</span> <span class="token string">"javaEE"</span> <span class="token operator">+</span> s2<span class="token punctuation">;</span>    <span class="token class-name">String</span> s7 <span class="token operator">=</span> s1 <span class="token operator">+</span> s2<span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s7<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5 <span class="token operator">==</span> s6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5 <span class="token operator">==</span> s7<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s6 <span class="token operator">==</span> s7<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>    <span class="token comment">//intern():判断字符串常量池中是否存在javaEEhadoop值，如果存在，则返回常量池中javaEEhadoop的地址；</span>    <span class="token comment">//如果字符串常量池中不存在javaEEhadoop，则在常量池中加载一份javaEEhadoop，并返回次对象的地址。</span>    <span class="token class-name">String</span> s8 <span class="token operator">=</span> s6<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s8<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串拼接底层细节">字符串拼接底层细节</h3><p><strong>细节一</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"b"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token string">"ab"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s4 <span class="token operator">=</span> s1 <span class="token operator">+</span> s2<span class="token punctuation">;</span><span class="token comment">//</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./../jvm-sgg9/image-20231224142009016.png" alt="字节码分析"></p><p><strong>细节二</strong></p><p>字符串拼接不一定使用的都是 StringBuilder</p><ul><li>如果拼接符号左右两边都是字符串常量或常量引用, 则仍然使用编译器优化, 即非 StringBuilder 的方式</li><li>针对于 final 修饰类、方法、基本数据类型、引用数据类型的量的结构时, 能使用上 final 的时候建议使用上</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">final</span> <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"b"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token string">"ab"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s4 <span class="token operator">=</span> s1 <span class="token operator">+</span> s2<span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./../jvm-sgg9/image-20231224142649419.png" alt="字节码分析"></p><p><strong>针对上述练习题</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"javaEEhadoop"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"javaEE"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s3 <span class="token operator">=</span> s2 <span class="token operator">+</span> <span class="token string">"hadoop"</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token string">"javaEE"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s5 <span class="token operator">=</span> s4 <span class="token operator">+</span> <span class="token string">"hadoop"</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>拼接操作与 append 操作的效率对比</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">method1</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//6150</span>    <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"+拼接花费的时间为："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> s2 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">method2</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3</span>    <span class="token keyword">long</span> e2 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"append拼接花费的时间为："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>e2 <span class="token operator">-</span> s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token keyword">int</span> highLevel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> src <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> highLevel<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        src <span class="token operator">=</span> src <span class="token operator">+</span> <span class="token string">"a"</span><span class="token punctuation">;</span><span class="token comment">//每次循环都会创建一个StringBuilder、String</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token keyword">int</span> highLevel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//只需要创建一个StringBuilder</span>    <span class="token class-name">StringBuilder</span> src <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> highLevel<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        src<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>相差了 2000 多倍</li><li><strong>StringBuilder 的 append() 方式</strong>: 自始至终只创建过一个StringBuilder 对象; <strong>String 字符串拼接方式</strong>: 创建过多个StringBuilder 和 String 的对象</li><li><strong>String 字符串拼接方式</strong>: 内存中由于创建了较多的 StringBuilder 和 String 对象, 内存占用更大; 如果进行 GC, 需要花费额外的时间</li><li>在实际开发中, 如果基本确定前前后后添加的字符串长度不高于某个限定值 highLevel 的情况下, 建议使用构造器实例化<code>StringBuilder s = new StringBuilder(highLevel);</code> 尽量避免底层不断进行扩容的情况</li></ul><h2 id="5-intern-的使用">5-intern()的使用</h2><ul><li><p>如果不是用双引号声明的 String 对象，可以使用 String 提供的 intern 方法：intern 方法会从字符串常量池中查询当前字符串是否存在，若不存在就会将当前字符串放入常量池中。</p><ul><li>比如：<code>String myInfo = new string(&quot;hello&quot;).intern();</code></li></ul></li><li><p>也就是说，如果在任意字符串上调用 String.intern() 方法，那么其返回结果所指向的那个类实例，必须和直接以常量形式出现的字符串实例完全相同。因此，下列表达式的值必定是 true</p></li></ul><h3 id="demo1-3">demo1</h3><p><strong>new String(“ab”) 会创建几个对象?</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"ab"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./../jvm-sgg9/image-20231224150618810.png" alt="字节码分析"></p><h3 id="demo2-3">demo2</h3><p><strong>new String(“a”) + new String(“b”); 创建几个对象</strong></p><p><img src="./../jvm-sgg9/image-20231224151955499.png" alt="字节码分析"></p><p><img src="./../jvm-sgg9/image-20231224152411037.png" alt="StringBuilder.toString() 字节码"></p><h3 id="demo3">demo3</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 此时字符串常量池中已经有 "1" 了</span>    <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 相当于new String("11")</span>    <span class="token comment">// 此时常量池中不存在 "11"</span>    s3<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在常量池中生成"11", 如何理解: jdk6:在字符串常量池创建了一个新的对象"11", 也就有新的地址, 但是jdk7之后中字符串常量池记录的是new出来的地址值, 并没有创建"11"</span>    <span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token string">"11"</span><span class="token punctuation">;</span> <span class="token comment">// s4变量记录的地址: 使用的是上一行代码执行时, 在常量池中生成的 "11" 的地址</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./../jvm-sgg9/image-20231224155937081.png" alt=""></p><p><img src="./../jvm-sgg9/image-20231224160228520.png" alt="jdk7下的流程"></p><h3 id="拓展问题">拓展问题</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token string">"11"</span><span class="token punctuation">;</span> <span class="token comment">// 在字符串常量池中生成对象"11"</span>    s3<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 实际没干啥</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结">总结</h3><ul><li>JDK1.6 中, 将这个字符对象尝试放入串池<ul><li>如果串池有, 则并不会放入. 返回已有的串池中的对象的地址</li><li>如果没有, 则会把<strong>此对象复制一份</strong>, 放入串池, 并返回串池中的对象地址</li></ul></li><li>JDK1.7 起, 将这个字符串对象尝试放入串池<ul><li>如果串池中有, 则并不会放入. 返回已有的串池中的对象的地址</li><li>如果没有, 则会把<strong>对象的引用地址复制一份</strong>, 放入串池, 并返回传池中的引用地址</li></ul></li></ul><h3 id="补充练习">补充练习</h3><p><strong>demo1</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s2 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2 <span class="token operator">==</span> <span class="token string">"ab"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token string">"ab"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>土味解析(JDK8)</strong></p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">line3: s(new堆地址值,@h1, 注意!!此处不会在串池生成)line4: s2(串池没有, 返回@st1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>demo2</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test6</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"ab"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//        String s1 = new String("a") + new String("b");</span>    s1<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"ab"</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>土味解析(JDK8)</strong></p><pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">====情况1line3: s1(串池生成@st1, 返回@h1)line5: 无效line6: s2(返回@st1)line7: false====情况2line4: s1(返回@h1)line5: 串池无,则生成 @st1 指向 @h, 即@hline6: s2(返回@h)line7: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>demo3(自测)</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> x <span class="token operator">=</span> <span class="token string">"ab"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s2 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2 <span class="token operator">==</span> <span class="token string">"ab"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token string">"ab"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="intern-的效率测试（空间角度）">intern() 的效率测试（空间角度）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX_COUNT</span> <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">10000</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token constant">MAX_COUNT</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test8</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">MAX_COUNT</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i <span class="token operator">%</span> data<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 写法1</span><span class="token comment">//            arr[i] = new String(String.valueOf(data[i % data.length])).intern(); // 写法2</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"花费的时间为："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./../jvm-sgg9/image-20231224175840946.png" alt="写法1的内存情况"></p><p><img src="./../jvm-sgg9/image-20231224175910290.png" alt="写法2的内存情况"></p><p><strong>对于程序中大量存在的字符串, 尤其其中存在很多重复字符串时, 使用intern() 可以节省内存空间</strong></p><p><strong>第一种方式</strong></p><p><code>arr[i] = new String(String.valueOf(data[i % data.length])); </code></p><p>在堆中确实创建了 1000W 个对象, 并且存放在数组中, 也不会被回收</p><p><strong>第二种方式</strong></p><p><code>arr[i] = new String(String.valueOf(data[i % data.length])).intern();</code></p><p>返回给数组的是串池中的引用地址, 因此即使new的对象也可以即使被销毁</p><p><em>大的网站平台, 需要内存中存储大量的字符串. 比如社交网站, 很多人都存储: 北京市、海淀区等信息. 这时候如果字符串都调用 intern() 方法, 就会明显降低内存的大小</em></p><h2 id="6-StringTable的垃圾回收">6-StringTable的垃圾回收</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * String的垃圾回收: * -Xms15m -Xmx15m -XX:+PrintStringTableStatistics -XX:+PrintGCDetails */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringGCTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不断调整<code>j</code>大小, 观察GC情况</p><h2 id="7-G1中的String去重操作">7-G1中的String去重操作</h2><p><strong>官方文档</strong>：<a href="http://openjdk.java.net/jeps/192">http://openjdk.java.net/jeps/192</a></p><ul><li>背景：对许多 Java 应用（有大的也有小的）做的测试得出以下结果：<ul><li>堆存活数据集合里面 String 对象占了25%</li><li>堆存活数据集合里面重复的 String 对象有13.5%</li><li>String 对象的平均长度是45</li></ul></li><li>许多大规模的 Java 应用的瓶颈在于内存，测试表明，在这些类型的应用里面，Java 堆中存活的数据集合差不多25%是 String 对象。更进一步，这里面差不多一半 String 对象是重复的，重复的意思是说：<code>str1.equals(str2)= true</code>。堆上存在重复的 String 对象必然是一种内存的浪费。这个项目将在 G1 垃圾收集器中实现自动持续对重复的 String 对象进行去重，这样就能避免浪费内存。</li></ul><p><strong>实现</strong></p><ul><li>当垃圾收集器工作的时候，会访问堆上存活的对象。<strong>对每一个访问的对象都会检查是否是候选的要去重的 String 对象</strong>。</li><li>如果是，把这个对象的一个引用插入到队列中等待后续的处理。一个去重的线程在后台运行，处理这个队列。处理队列的一个元素意味着从队列删除这个元素，然后尝试去重它引用的 String 对象。</li><li>使用一个 Hashtable 来记录所有的被 String 对象使用的不重复的 char 数组。当去重的时候，会查这个 Hashtable，来看堆上是否已经存在一个一模一样的 char 数组。</li><li>如果存在，String 对象会被调整引用那个数组，释放对原来的数组的引用，最终会被垃圾收集器回收掉。</li><li>如果查找失败，char 数组会被插入到 Hashtable，这样以后的时候就可以共享这个数组了。</li></ul><p><strong>命令行选项</strong></p><ul><li>UseStringDeduplication(bool) ：开启 String 去重，默认是不开启的，需要手动开启。</li><li>PrintStringDeduplicationStatistics(bool) ：打印详细的去重统计信息</li><li>stringDeduplicationAgeThreshold(uintx) ：达到这个年龄的 String 对象被认为是去重的候选对象</li></ul>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM-08-执行引擎</title>
      <link href="/2023/12/22/jvm-sgg8/"/>
      <url>/2023/12/22/jvm-sgg8/</url>
      
        <content type="html"><![CDATA[<h1>执行引擎</h1><p><img src="./../jvm-sgg8/image-20231222214407590.png" alt="Hotspot JVM"></p><h2 id="1-执行引擎概述">1-执行引擎概述</h2><p><img src="./../jvm-sgg8/image-20231222214725500.png" alt=""></p><ul><li>执行引擎是 Java 虚拟机核心的组成部分之一。</li><li>&quot;虚拟机&quot;是一个相对于&quot;物理机  &quot;的概念，这两种机器都有代码执行能力，其区别是物理机的执行引擎是直接建立在处理器、缓存、指令集和操作系统层面上的，而<strong>虚拟机的执行引擎则是由软件自行实现的</strong>，因此可以不受物理条件制约地定制指令集与执行引擎的结构体系，<strong>能够执行那些不被硬件直接支持的指令集格式</strong>。</li><li>JVM 的主要任务是负责<strong>装载字节码到其内部</strong>，但字节码并不能够直接运行在操作系统之上，因为字节码指令并非等价于本地机器指令，它内部包含的仅仅只是一些能够被 JVM 所识别的字节码指令、符号表，以及其他辅助信息。</li><li>那么，如果想要让一个Java程序运行起来，执行引擎（Execution Engine）的任务就是<strong>将字节码指令解释/编译为对应平台上的本地机器指令才可以</strong>。简单来说，JVM 中的执行引擎充当了将高级语言翻译为机器语言的译者。</li></ul><p><img src="./../jvm-sgg8/image-20231222215051218.png" alt=""></p><h3 id="执行引擎工作过程">执行引擎工作过程</h3><ol><li>执行引擎在执行的过程中究竟需要执行什么样的字节码指令完全依赖于 PC 寄存器。</li><li>每当执行完一项指令操作后，PC 寄存器就会更新下一条需要被执行的指令地址。</li><li>当然方法在执行的过程中，执行引擎有可能会通过存储在局部变量表中的对象引用准确定位到存储在 Java 堆区中的对象实例信息，以及通过对象头中的元数据指针定位到目标对象的类型信息。</li><li>从外观上来看，所有的 Java 虚拟机的执行引擎输入、处理、输出都是一致的：输入的是字节码二进制流，处理过程是字节码解析执行、即时编译的等效过程，输出的是执行过程。</li></ol><p><img src="./../jvm-sgg8/image-20231222215308603.png" alt=""></p><h2 id="2-Java代码编译和执行过程">2-Java代码编译和执行过程</h2><p>大部分的程序代码转换成物理机的目标代码或虚拟机能执行的指令集之前，都需要经过下图中的各个步骤：</p><p><img src="./../jvm-sgg8/image-20231222215634884.png" alt=""></p><ul><li>前面橙色部分是编译生成生成字节码文件的过程（javac 编译器来完成，也就是前端编译器），和 JVM 没有关系。</li><li>后面绿色（解释执行）和蓝色（即时编译）才是JVM需要考虑的过程</li></ul><p>javac 编译器（前端编译器）流程图如下所示：</p><p><img src="./../jvm-sgg8/image-20231222215830776.png" alt=""></p><p>Java字节码的执行是由JVM执行引擎来完成，流程图如下所示</p><p><img src="./../jvm-sgg8/image-20231222215938424.png" alt=""></p><p><strong>问题: 什么是解释器？什么是JIT编译器？</strong></p><ul><li>解释器：当 Java 虚拟机启动时会根据预定义的规范<strong>对字节码采用逐行解释的方式执行</strong>，将每条字节码文件中的内容&quot;翻译&quot;为对应平台的本地机器指令执行。</li><li>JIT（Just In Time Compiler）编译器：就是虚拟机将源代码<strong>一次性直接</strong>编译成和本地机器平台相关的机器语言，<strong>但并不是马上执行</strong>。</li></ul><p><strong>为什么 Java 是半编译半解释型语言？</strong></p><ul><li>JDK1.0 时代，将 Java 语言定位为“解释执行”还是比较准确的。再后来，Java 也发展出可以直接生成本地代码的编译器。</li><li>现在 JVM 在执行 Java 代码的时候，通常都会将解释执行与编译执行二者结合起来进行。</li><li>JIT 编译器将字节码翻译成本地代码后，就可以做一个缓存操作，存储在方法区的 JIT 代码缓存中（执行效率更高了），并且在翻译成本地代码的过程中可以做优化。</li></ul><h2 id="3-机器码、指令、汇编语言">3-机器码、指令、汇编语言</h2><p><img src="./../jvm-sgg8/image-20231223114549438.png" alt=""></p><h3 id="机器码">机器码</h3><ul><li>各种用二进制编码方式表示的指令，叫做机器指令码。开始，人们就用它采编写程序，这就是机器语言。</li><li>机器语言虽然能够被计算机理解和接受，但和人们的语言差别太大，不易被人们理解和记忆，并且用它编程容易出差错。</li><li>用它编写的程序一经输入计算机，CPU 直接读取运行，因此和其他语言编的程序相比，执行速度最快。</li><li>机器指令与 CPU 紧密相关，所以不同种类的 CPU 所对应的机器指令也就不同。</li></ul><h3 id="指令与指令集">指令与指令集</h3><p><strong>指令</strong></p><ul><li><p>由于机器码是由 0 和 1组成的二进制序列，可读性实在太差，于是人们发明了指令。</p></li><li><p>指令就是把机器码中特定的 0 和 1 序列，简化成对应的指令（一般为英文简写，如 <code>mov</code>，<code>inc</code> 等），可读性稍好</p></li><li><p>由于不同的硬件平台，执行同一个操作，对应的机器码可能不同，所以不同的硬件平台的同一种指令（比如 <code>mov</code>），对应的机器码也可能不同。</p></li></ul><p><strong>指令集</strong></p><ul><li><p>不同的硬件平台，各自支持的指令，是有差别的。因此每个平台所支持的指令，称之为对应平台的指令集。如常见的</p><ul><li><p>x86 指令集，对应的是 x86 架构的平台</p></li><li><p>ARM 指令集，对应的是 ARM 架构的平台</p></li></ul></li></ul><h3 id="汇编语言">汇编语言</h3><ul><li>由于指令的可读性还是太差，于是人们又发明了汇编语言。</li><li>在汇编语言中，用<strong>助记符</strong>（Mnemonics）代替<strong>机器指令的操作码</strong>，用<strong>地址符号（Symbol）或标号（Label）代替指令或操作数的地址</strong>。</li><li>在不同的硬件平台，汇编语言对应着不同的机器语言指令集，通过汇编过程转换成机器指令。<ul><li>由于计算机只认识指令码，所以用<strong>汇编语言编写的程序还必须翻译（汇编）成机器指令码</strong>，计算机才能识别和执行。</li></ul></li></ul><h3 id="高级语言">高级语言</h3><ul><li>为了使计算机用户编程序更容易些，后来就出现了各种高级计算机语言。高级语言比机器语言、汇编语言<strong>更接近人的语言</strong></li><li>当计算机执行高级语言编写的程序时，<strong>仍然需要把程序解释和编译成机器的指令码</strong>。完成这个过程的程序就叫做解释程序或编译程序。</li></ul><p><img src="./../jvm-sgg8/image-20231223115206862.png" alt=""></p><h3 id="字节码">字节码</h3><ul><li><p>字节码是一种<strong>中间状态（中间码）的二进制代码</strong>（文件），它比机器码更抽象，需要直译器转译后才能成为机器码</p></li><li><p>字节码主要为了实现特定软件运行和软件环境、<strong>与硬件环境无关</strong>。</p></li><li><p>字节码的实现方式是通过编译器和虚拟机器。编译器将源码编译成字节码，特定平台上的虚拟机器将字节码转译为可以直接执行的指令。</p></li><li><p>字节码典型的应用为：Java bytecode</p></li></ul><p><img src="./../jvm-sgg8/image-20231223115607640.png" alt=""></p><h3 id="C、C-源程序执行过程">C、C++源程序执行过程</h3><p><strong>编译过程又可以分成两个阶段：编译和汇编。</strong></p><ul><li>编译过程：是读取源程序（字符流），对之进行词法和语法的分析，将高级语言指令转换为功能等效的汇编代码</li><li>汇编过程：实际上指把汇编语言代码翻译成目标机器指令的过程。</li></ul><p><img src="./../jvm-sgg8/image-20231223115420640.png" alt=""></p><h2 id="4-解释器">4-解释器</h2><ul><li>JVM设计者们的初衷仅仅只是单纯地<strong>为了满足Java程序实现跨平台特性</strong>，因此避免采用静态编译的方式由高级语言直接生成本地机器指令，从而诞生了实现解释器在运行时采用逐行解释字节码执行程序的想法（也就是产生了一个中间产品<strong>字节码</strong>）。</li></ul><p><img src="./../jvm-sgg8/image-20231223115704426.png" alt=""></p><h3 id="解释器工作机制-或工作任务">解释器工作机制(或工作任务)</h3><ul><li>解释器真正意义上所承担的角色就是一个运行时“翻译者”，将字节码文件中的内容“翻译”为对应平台的本地机器指令执行。</li><li>当一条字节码指令被解释执行完成后，接着再根据 PC 寄存器中记录的下一条需要被执行的字节码指令执行解释操作。</li></ul><h3 id="解释器分类">解释器分类</h3><ul><li>在 Java 的发展历史里，一共有两套解释执行器，即古老的<strong>字节码解释器</strong>、现在普遍使用的<strong>模板解释器</strong>。<ul><li>字节码解释器在执行时通过<strong>纯软件代码</strong>模拟字节码的执行，效率非常低下。</li><li>而模板解释器将<strong>每一条字节码和一个模板函数相关联</strong>，模板函数中直接产生这条字节码执行时的机器码，从而很大程度上提高了解释器的性能。</li><li>在 HotSpot VM 中，解释器主要由 Interpreter 模块和 Code 模块构成。<ul><li>Interpreter 模块：实现了解释器的核心功能</li><li>Code 模块：用于管理 HotSpot VM 在运行时生成的本地机器指令</li></ul></li></ul></li></ul><h3 id="解释器现状">解释器现状</h3><ul><li><p>由于解释器在设计和实现上非常简单，因此除了Java语言之外，还有许多高级语言同样也是基于解释器执行的，比如 Python、Perl、Ruby 等。但是在今天，<strong>基于解释器执行已经沦落为低效的代名词</strong>，并且时常被一些 C/C++ 程序员所调侃。</p></li><li><p>为了解决这个问题，JVM 平台支持一种叫作即时编译的技术。即时编译的目的是避免函数被解释执行，而是<strong>将整个函数体编译成为机器码，每次函数执行时，只执行编译后的机器码即可</strong>，这种方式可以使执行效率大幅度提升。</p></li><li><p>不过无论如何，基于解释器的执行模式仍然为中间语言的发展做出了不可磨灭的贡献。</p></li></ul><h2 id="5-JIT编译器">5-JIT编译器</h2><ul><li><p>第一种是将源代码编译成字节码文件，然后在运行时通过解释器将字节码文件转为机器码执行</p></li><li><p>第二种是编译执行（直接编译成机器码）。现代虚拟机为了提高执行效率，会使用即时编译技术（JIT，Just In Time）将方法编译成机器码后再执行</p></li><li><p>HotSpot VM 是目前市面上高性能虚拟机的代表作之一。<strong>它采用解释器与即时编译器并存的架构</strong>。在Java虚拟机运行时，解释器和即时编译器能够相互协作，各自取长补短，尽力去选择最合适的方式来权衡编译本地代码的时间和直接解释执行代码的时间。</p></li><li><p>在今天，Java 程序的运行性能早已脱胎换骨，已经达到了可以和 C/C++ 程序一较高下的地步。</p></li></ul><h3 id="保留解释器的原因">保留解释器的原因</h3><p><strong>问题</strong></p><ul><li>既然 HotSpot VM 中已经内置 JIT 编译器了，那么为什么还需要再使用解释器来“拖累”程序的执行性能呢？比如 JRockit VM 内部就不包含解释器，字节码全部都依靠即时编译器编译后执行。</li><li>JRockit 虚拟机是砍掉了解释器，也就是只采及时编译器。那是因为呢 JRockit 只部署在服务器上，一般已经有时间让他进行指令编译的过程了，对于响应来说要求不高，等及时编译器的编译完成后，就会提供更好的性能</li></ul><p><strong>首先明确</strong></p><ul><li>当程序启动后，解释器可以马上发挥作用，<strong>响应速度快</strong>，省去编译的时间，立即执行。</li><li>编译器要想发挥作用，把代码编译成本地代码，<strong>需要一定的执行时间</strong>，但编译为本地代码后，执行效率高。</li></ul><p><strong>所以</strong></p><ul><li>尽管 JRockit VM 中程序的执行性能会非常高效，但程序在启动时必然需要花费更长的时间来进行编译。对于服务端应用来说，启动时间并非是关注重点，但对于那些看中启动时间的应用场景而言，或许就需要采用解释器与即时编译器并存的架构来换取一个平衡点。</li><li>在此模式下，在 Java 虚拟器启动时，解释器可以首先发挥作用，而不必等待即时编译器全部编译完成后再执行，这样可以省去许多不必要的编译时间。随着时间的推移，编译器发挥作用，把越来越多的代码编译成本地代码，获得更高的执行效率。</li><li>同时，解释执行在编译器进行激进优化不成立的时候，作为编译器的&quot;逃生门&quot;（后备方案）。</li></ul><h3 id="HotSpot-JVM的执行方式">HotSpot JVM的执行方式</h3><p>当虚拟机启动的时候，<strong>解释器可以首先发挥作用</strong>，而不必等待即时编译器全部编译完成再执行，这样可以<strong>省去许多不必要的编译时间</strong>。随着程序运行时间的推移，即时编译器逐渐发挥作用，根据热点探测功能，<strong>将有价值的字节码编译为本地机器指令</strong>，以换取更高的程序执行效率。</p><p><strong>案例</strong></p><ul><li>注意解释执行与编译执行在线上环境微妙的辩证关系。<strong>机器在热机状态（已经运行了一段时间叫热机状态）可以承受的负载要大于冷机状态（刚启动的时候叫冷机状态）</strong>。如果以热机状态时的流量进行切流，可能使处于冷机状态的服务器因无法承载流量而假死。</li><li>在生产环境发布过程中，以分批的方式进行发布，根据机器数量划分成多个批次，每个批次的机器数至多占到整个集群的1/8。曾经有这样的故障案例：某程序员在发布平台进行分批发布，在输入发布总批数时，误填写成分为两批发布。如果是热机状态，在正常情况下一半的机器可以勉强承载流量，但由于刚启动的JVM均是解释执行，还没有进行热点代码统计和JIT动态编译，导致机器启动之后，当前1/2发布成功的服务器马上全部宕机，此故障说明了JIT的存在。—<strong>阿里团队</strong></li></ul><p><img src="./../jvm-sgg8/image-20231223124258929.png" alt=""></p><h3 id="JIT编译器相关概念">JIT编译器相关概念</h3><ul><li>Java 语言的“编译期”其实是一段“不确定”的操作过程，因为它可能是指一个<strong>前端编译器</strong>（其实叫&quot;编译器的前端&quot;更准确一些）吧  <strong>.java</strong> 文件转变成 <strong>.class</strong> 文件的过程。</li><li>也可能是指虚拟机的<strong>后端运行期编译器</strong>（ <strong>JIT 编译器</strong>，Just In Time Compiler）把字节码转变成机器码的过程。</li><li>还可能是指使用<strong>静态提前编译器</strong>（AOT 编译器，Ahead of Time Compiler）直接把 .java 文件编译成本地机器代码的过程。（可能是后续发展的趋势）</li></ul><p><strong>典型的编译器：</strong></p><ul><li>前端编译器：Sun 的 javac、Eclipse JDT 中的增量式编译器（ECJ）。</li><li>JIT 编译器：HotSpot VM 的 C1、C2 编译器。</li><li>AOT 编译器：GNU Compiler for the Java（GCJ）、Excelsior JET。</li></ul><h3 id="什么时候会选择JIT">什么时候会选择JIT</h3><ul><li>当然是否需要启动JIT编译器将字节码直接编译为对应平台的本地机器指令，则需要根据代码被调用<strong>执行的频率</strong>而定。</li><li>关于那些需要被编译为本地代码的字节码，也被称之为**“热点代码”<strong>，JIT编译器在运行时会针对那些频繁被调用的“热点代码”做出</strong>深度优化**，将其直接编译为对应平台的本地机器指令，以此提升Java程序的执行性能。</li></ul><h4 id="热点代码及探测方式">热点代码及探测方式</h4><ul><li><p><strong>一个被多次调用的方法，或者是一-个方法体内部循环次数较多的循环体都可以被称之为&quot;热点代码&quot;</strong>，因此都可以通过JIT编译器编译为本地机器指令。由于这种编译方式发生在方法的执行过程中，因此也被称之为栈上替换，或简称为 <strong>OSR (On StackReplacement)编译</strong>。</p></li><li><p>一个方法究竟要<strong>被调用多少次</strong>，或者一个循环体究竟需要执行多少次循环才可以达到这个标准？必然需要一个明确的阈值，JIT编译器才会将这些&quot;热点代码&quot;编译为本地机器指令执行。这里主要依靠热点探测功能。</p></li><li><p><strong>目前 HotSpot VM 所采用的热点探测方式是基于计数器的热点探测</strong>。</p></li><li><p>采用基于计数器的热点探测，HotSpot VM 将会为每一个方法都建立 2 个不同类型的计数器，分别为方法调用计数器（Invocation Counter）和回边计数器（Back Edge Counter）。</p><ul><li><p>方法调用计数器用于统计方法的调用次数</p></li><li><p>回边计数器则用于统计循环体执行的循环次数</p></li></ul></li></ul><h4 id="方法调用计数器">方法调用计数器</h4><ul><li><p>这个计数器就用于统计方法被调用的次数，它的默认阀值在 Client 模式下是 1500 次，在 Server 模式下是 10000 次。超过这个阈值，就会触发JIT编译。</p></li><li><p>这个阀值可以通过虚拟机参数 <code>-XX:CompileThreshold</code> 来人为设定。</p></li><li><p>当一个方法被调用时，会先检查该方法是否存在被JIT编译过的版本</p><ul><li><p>如果存在，则优先使用编译后的本地代码来执行</p></li><li><p>如果不存在已被编译过的版本，则将此方法的调用计数器值加1，然后判断方法调用计数器与回边计数器值之和是否超过方法调用计数器的阀值。</p><ul><li>如果已超过阈值，那么将会向即时编译器提交一个该方法的代码编译请求。</li><li>如果未超过阈值，则使用解释器对字节码文件解释执行</li></ul></li></ul></li></ul><p><img src="./../jvm-sgg8/image-20231223131454247.png" alt=""></p><h4 id="热度衰减">热度衰减</h4><ul><li>如果不做任何设置，方法调用计数器统计的并不是方法被调用的绝对次数，而是一个相对的执行频率，即<strong>一段时间之内方法被调用的次数</strong>。当超过<strong>一定的时间限度</strong>，如果方法的调用次数仍然不足以让它提交给即时编译器编译，那这个方法的调用计数器就会被<strong>减少一半</strong>，这个过程称为方法调用计数器热度的<strong>衰减</strong>（Counter Decay），而这段时间就称为此方法统计的<strong>半衰周期（Counter Half Life Time）</strong>（半衰周期是化学中的概念，比如出土的文物通过查看 C60 来获得文物的年龄）</li><li>进行热度衰减的动作是在虚拟机进行垃圾收集时顺便进行的，可以使用虚拟机参数 <code>-XX:-UseCounterDecay </code> 来关闭热度衰减，让方法计数器统计方法调用的绝对次数，这样的话，只要系统运行时间足够长，绝大部分方法都会被编译成本地代码。</li><li>另外，可以使用 <code>-XX:CounterHalfLifeTime</code> 参数设置半衰周期的时间，单位是秒。</li></ul><h4 id="回边计数器">回边计数器</h4><p>它的作用是统计一个方法中<strong>循环体代码执行的次数</strong>，在字节码中遇到控制流向后跳转的指令称为“回边”（Back Edge）。显然，建立回边计数器统计的目的就是为了触发 OSR 编译。</p><p><img src="./../jvm-sgg8/image-20231223131927975.png" alt=""></p><h3 id="HotSpotVM可以设置程序执行方法">HotSpotVM可以设置程序执行方法</h3><p>缺省情况下 HotSpot VM 是采用解释器与即时编译器并存的架构，当然开发人员可以根据具体的应用场景，通过命令显式地为Java虚拟机指定在运行时到底是完全采用解释器执行，还是完全采用即时编译器执行。如下所示：</p><ul><li>-Xint：完全采用解释器模式执行程序；</li><li>-Xcomp：完全采用即时编译器模式执行程序。如果即时编译出现问题，解释器会介入执行</li><li>-Xmixed：采用解释器+即时编译器的混合模式共同执行程序。</li></ul><p><img src="./../jvm-sgg8/image-20231223132121784.png" alt=""></p><p><strong>demo</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 测试解释器模式和JIT编译模式 *  -Xint  : 6520ms *  -Xcomp : 950ms *  -Xmixed : 936ms */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IntCompTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">testPrimeNumber</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"花费的时间为："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testPrimeNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//计算100以内的质数</span>            label<span class="token operator">:</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>k <span class="token operator">&lt;=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">%</span> k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token keyword">continue</span> label<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">//System.out.println(j);</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HotSpotVM-JIT-分类">HotSpotVM JIT 分类</h3><p>在 HotSpot VM 中内嵌有两个JIT编译器，分别为 Client Compiler 和 Server Compiler，但大多数情况下我们简称为 C1 编译器 和 C2 编译器。开发人员可以通过如下命令显式指定Java虚拟机在运行时到底使用哪一种即时编译器，如下所示：</p><ul><li><code>-client</code>：指定 Java 虚拟机运行在 Client 模式下，并使用C1编译器<ul><li>C1 编译器会对字节码<strong>进行简单和可靠的优化，耗时短</strong>，以达到更快的编译速度。</li></ul></li><li><code>-server</code>：指定 Java 虚拟机运行在 server 模式下，并使用 C2 编译器<ul><li>C2 进行<strong>耗时较长的优化，以及激进优化</strong>，但优化的代码执行效率更高。（使用 C++）</li></ul></li></ul><h3 id="C1和C2编译器不同的优化策略">C1和C2编译器不同的优化策略</h3><ul><li>在不同的编译器上有不同的优化策略，C1 编译器上主要有方法内联，去虚拟化、元余消除。<ul><li>方法内联：将引用的函数代码编译到引用点处，这样可以减少栈帧的生成，减少参数传递以及跳转过程</li><li>去虚拟化：对唯一的实现樊进行内联</li><li>冗余消除：在运行期间把一些不会执行的代码折叠掉</li></ul></li><li>C2 的优化主要是在全局层面，逃逸分析是优化的基础。基于逃逸分析在 C2 上有如下几种优化：<ul><li>标量替换：用标量值代替聚合对象的属性值</li><li>栈上分配：对于未逃逸的对象分配对象在栈而不是堆</li><li>同步消除：清除同步操作，通常指 synchronized</li></ul></li></ul><p><strong>分层编译策略</strong></p><ul><li>分层编译（Tiered Compilation）策略：程序解释执行（不开启性能监控）可以触发 C1 编译，将字节码编译成机器码，可以进行简单优化，也可以加上性能监控，C2 编译会根据性能监控信息进行激进优化。</li><li>不过在 Java7 版本之后，一旦开发人员在程序中显式指定命令 <code>-server</code> 时，默认将会开启分层编译策略，由 C1 编译器和 C2 编译器相互协作共同来执行编译任务。</li></ul><p><strong>总结</strong></p><ul><li>一般来讲，JIT 编译出来的机器码性能比解释器解释执行的性能高</li><li>C2 编译器启动时长比 C1 慢，系统稳定执行以后，C2 编译器执行速度远快于 C1 编译器</li></ul><h3 id="补充">补充</h3><h4 id="Graal-编译器">Graal 编译器</h4><ul><li><p>自 JDK10 起，HotSpot 又加入了一个全新的即时编译器：Graal 编译器</p></li><li><p>编译效果短短几年时间就追平了 G2 编译器，未来可期（对应还出现了 Graal 虚拟机，是有可能替代 Hotspot 的虚拟机的）</p></li><li><p>目前，带着&quot;实验状态&quot;标签，需要使用开关参数去激活才能使用</p><p><code>-XX:+UnlockExperimentalvMOptions</code> <code>- XX:+UseJVMCICompiler</code></p></li></ul><h4 id="AOT编译器">AOT编译器</h4><ul><li><p>jdk9 引入了 AOT 编译器（静态提前编译器，Ahead of Time Compiler）</p></li><li><p>Java 9 引入了实验性 AOT 编译工具 jaotc。它借助了 Graal 编译器，将所输入的 Java 类文件转换为机器码，并存放至生成的动态共享库之中。</p></li><li><p>所谓 AOT 编译，是与即时编译相对立的一个概念。我们知道，即时编译指的是<strong>在程序的运行过程中</strong>，将字节码转换为可在硬件上直接运行的机器码，并部署至托管环境中的过程。而 AOT 编译指的则是，<strong>在程序运行之前</strong>，便将字节码转换为机器码的过程。</p><p>.java -&gt; .class -&gt; (使用jaotc) -&gt; .so</p></li></ul><p><strong>AOT 好处</strong></p><ul><li>Java 虚拟机加载已经预编译成二进制库，可以直接执行。</li><li>不必等待即时编译器的预热，减少 Java 应用给人带来“第一次运行慢” 的不良体验</li></ul><p><strong>缺点</strong></p><ul><li>破坏了 Java “一次编译，到处运行”，必须为每个不同的硬件，OS 编译对应的发行包</li><li>降低了 Java 链接过程的动态性，加载的代码在编译器就必须全部已知。</li><li>还需要继续优化中，最初只支持 Linux X64 java base</li></ul>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM-07-对象的实例化内存布局与访问定位</title>
      <link href="/2023/12/21/jvm-sgg7/"/>
      <url>/2023/12/21/jvm-sgg7/</url>
      
        <content type="html"><![CDATA[<h1>对象的实例化内存布局与访问定位</h1><h2 id="1-对象的实例化">1-对象的实例化</h2><ul><li>对象在 JVM 中是怎么存储的？</li><li>对象头信息里面有哪些东西？</li><li>Java 对象头里有什么</li></ul><div class="markmap-container" style="height:height">  <svg data="{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;对象的实例化&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;创建对象的方式&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;new&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;最常见方式&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;变形1: Xxx的静态方法&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;变形2: XxxBuilder/XxxFactory的静态方法&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;&lt;code&gt;Class&lt;/code&gt;的&lt;code&gt;newInstance()&lt;/code&gt;: 反射方式, 只能调用空参的构造器, 权限必须时public&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;&lt;code&gt;Constructor&lt;/code&gt;的&lt;code&gt;newInstance(Xxx)&lt;/code&gt;: 反射方式, 可以调用空参、带参的构造器, 权限没有要求&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;使用&lt;code&gt;clone()&lt;/code&gt;: 不适用任何构造器, 当前类需要实现Cloneable接口, 实现&lt;code&gt;clone()&lt;/code&gt;&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[10,11]},&quot;v&quot;:&quot;使用反序列化: 从文件、网络中获取一个对象的二进制流&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[11,12]},&quot;v&quot;:&quot;第三方库&lt;code&gt;Objenesis&lt;/code&gt;&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[12,13]},&quot;v&quot;:&quot;创建对象的步骤&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[13,14]},&quot;v&quot;:&quot;1、&lt;a href=\&quot;#判断对象对应的类是否加载、链接、初始化\&quot;&gt;判断对象对应的类是否加载、链接、初始化&lt;/a&gt;&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[14,15]},&quot;v&quot;:&quot;2、&lt;a href=\&quot;#为对象分配内存\&quot;&gt;为对象分配内存&lt;/a&gt;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[15,16]},&quot;v&quot;:&quot;如果内存规整&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:10,&quot;p&quot;:{&quot;lines&quot;:[16,17]},&quot;v&quot;:&quot;&lt;a href=\&quot;#指针碰撞\&quot;&gt;指针碰撞&lt;/a&gt;&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[17,18]},&quot;v&quot;:&quot;如果内存不规整&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:10,&quot;p&quot;:{&quot;lines&quot;:[18,19]},&quot;v&quot;:&quot;虚拟机需要维护一个列表&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:10,&quot;p&quot;:{&quot;lines&quot;:[19,20]},&quot;v&quot;:&quot;&lt;a href=\&quot;#空闲列表分配\&quot;&gt;空闲列表分配&lt;/a&gt;&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[20,21]},&quot;v&quot;:&quot;&lt;a href=\&quot;#说明\&quot;&gt;说明&lt;/a&gt;&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[21,22]},&quot;v&quot;:&quot;3、处理并发安全问题&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[22,23]},&quot;v&quot;:&quot;采用&lt;code&gt;CAS&lt;/code&gt;配上失败重试保证更新的原子性&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[23,24]},&quot;v&quot;:&quot;每个线程预先分配一块TLAB&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:10,&quot;p&quot;:{&quot;lines&quot;:[24,25]},&quot;v&quot;:&quot;通过&lt;code&gt;-XX:+/-UseTLAB&lt;/code&gt;参数来设定(JDK8默认使用)&quot;}]}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[25,26]},&quot;v&quot;:&quot;4、初始化分配到的空间&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[26,27]},&quot;v&quot;:&quot;所有属性设置默认值, 保证对象实例字段在不赋值时可以直接使用&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[27,28]},&quot;v&quot;:&quot;5、&lt;a href=\&quot;#设置对象的对象头\&quot;&gt;设置对象的对象头&lt;/a&gt;&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[28,29]},&quot;v&quot;:&quot;6、&lt;a href=\&quot;#执行init方法进行初始化\&quot;&gt;执行&lt;code&gt;init&lt;/code&gt;方法进行初始化&lt;/a&gt;&quot;}]}]}"></svg></div><h6 id="判断对象对应的类是否加载、链接、初始化"><strong>判断对象对应的类是否加载、链接、初始化</strong></h6><ul><li><p>虚拟机遇到一条new指令，首先去检查这个指令的参数能否在Metaspace的常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已经被加载，解析和初始化。（即判断类元信息是否存在）。</p></li><li><p>如果该类没有加载，那么在双亲委派模式下，使用当前类加载器以ClassLoader + 包名 + 类名为key进行查找对应的.class文件，如果没有找到文件，则抛出ClassNotFoundException异常，如果找到，则进行类加载，并生成对应的Class对象。</p></li></ul><h6 id="为对象分配内存"><strong>为对象分配内存</strong></h6><p>首先计算对象占用空间的大小，接着在堆中划分一块内存给新对象。如果实例成员变量是引用变量，仅分配引用变量空间即可，即4个字节大小</p><h6 id="指针碰撞"><strong>指针碰撞</strong></h6><ul><li>如果内存是规整的，那么虚拟机将采用的是指针碰撞法（Bump The Point）来为对象分配内存。</li><li>意思是所有用过的内存在一边，空闲的内存放另外一边，中间放着一个指针作为分界点的指示器，分配内存就仅仅是把指针往空闲内存那边挪动一段与对象大小相等的距离罢了。</li><li>如果垃圾收集器选择的是 Serial ，ParNew 这种基于压缩算法的，虚拟机采用这种分配方式。一般使用带 Compact（整理）过程的收集器时，使用指针碰撞。</li><li>标记压缩（整理）算法会整理内存碎片，堆内存一存对象，另一边为空闲区域</li></ul><h6 id="空闲列表分配"><strong>空闲列表分配</strong></h6><ul><li>如果内存不是规整的，已使用的内存和未使用的内存相互交错，那么虚拟机将采用的是空闲列表来为对象分配内存。</li><li>意思是虚拟机维护了一个列表，记录上哪些内存块是可用的，再分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的内容。这种分配方式成为了 <strong>空闲列表（Free List）</strong></li><li>CMS 标记清除算法清理过后的堆内存，就会存在很多内存碎片。</li></ul><h6 id="说明"><strong>说明</strong></h6><ul><li>选择哪种分配方式由 Java 堆是否规整所决定，而Java堆是否规整又由所采用的垃圾收集器是否带有压缩整理功能决定</li></ul><h6 id="设置对象的对象头"><strong>设置对象的对象头</strong></h6><p>将对象的所属类(即类的元数据信息)、对象的HashCode和对象的GC信息、锁信息等数据存储在对象的对象头. 这个过程的具体设置方式取决于JVM实现.</p><h6 id="执行-init-方法进行初始化"><strong>执行 init 方法进行初始化</strong></h6><ul><li>在 Java 程序的视角看来，初始化才正式开始。初始化成员变量，执行实例化代码块，调用类的构造方法，并把堆内对象的首地址赋值给引用变量</li><li>因此一般来说（由字节码中跟随 <code>invokespecial</code> 指令所决定），<code>new</code> 指令之后会接着就是执行 <code>init</code> 方法，把对象按照程序员的意愿进行初始化，这样一个真正可用的对象才算完成创建出来。</li></ul><h2 id="2-对象的内存布局">2-对象的内存布局</h2><div class="markmap-container" style="height:height">  <svg data="{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;内部布局&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;对象头(Header)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;包含两部分&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;运行时元数据(Mark Word)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:10,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;哈希值(HashCode)&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:10,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;GC分代年龄&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:10,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;锁状态标志&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:10,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;线程持有的锁&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:10,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;偏向线程ID&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:10,&quot;p&quot;:{&quot;lines&quot;:[10,11]},&quot;v&quot;:&quot;偏向时间戳&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[11,12]},&quot;v&quot;:&quot;类型指针&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:10,&quot;p&quot;:{&quot;lines&quot;:[12,13]},&quot;v&quot;:&quot;指向类元数据InstanceKlass, 确定该对象所属的类型&quot;}]}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[13,14]},&quot;v&quot;:&quot;说明: 如果是数组, 还需记录数组的长度&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[14,15]},&quot;v&quot;:&quot;实例数据(Instance Data)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[15,16]},&quot;v&quot;:&quot;说明&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[16,17]},&quot;v&quot;:&quot;它是对象真正存储的有效信息, 包括程序代码中定义的各种类型的字段(包括从父类继承下来的和本身拥有的字段)&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[17,18]},&quot;v&quot;:&quot;规则&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[18,19]},&quot;v&quot;:&quot;相同宽度的字段总是被分配在一起&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[19,20]},&quot;v&quot;:&quot;父类中定义的变量会出现在子类之前&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[20,21]},&quot;v&quot;:&quot;如果CompactFields参数为true(默认为true): 子类的宅变量可能插入到父类变量的空隙&quot;}]}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[21,22]},&quot;v&quot;:&quot;对齐填充(Padding)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[22,23]},&quot;v&quot;:&quot;不是必须的, 也没特别含义, 仅仅起到占位符的作用&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[23,24]},&quot;v&quot;:&quot;小结&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[24,25]},&quot;v&quot;:&quot;&lt;a href=\&quot;#内存布局图\&quot;&gt;内存布局图&lt;/a&gt;&quot;}]}]}"></svg></div><p>代码示例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token number">1001</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token class-name">Account</span> acct<span class="token punctuation">;</span>    <span class="token punctuation">&#123;</span>        name <span class="token operator">=</span> <span class="token string">"匿名客户"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        acct <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Customer</span> cust <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="内存布局图"><img src="./../jvm-sgg7/image-20231222200603079.png" alt="内存布局图"></h6><h2 id="3-对象的访问定位">3-对象的访问定位</h2><blockquote><p>JVM 是如何通过栈帧中的对象引用访问到其内部的对象实例呢？</p></blockquote><div class="markmap-container" style="height:height">  <svg data="{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;对象访问定位&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;&lt;a href=\&quot;#对象访问定位\&quot;&gt;图示&lt;/a&gt;&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;常见对象的目的是为了使用它&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;JVM是如何通过栈帧中的对象引用访问到其他内部的对象实例的呢?&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;定位, 通过栈上reference访问&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;对象访问主要有两种方式&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;访问句柄&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;&lt;a href=\&quot;#访问句柄\&quot;&gt;图示&lt;/a&gt;&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;实 现&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[10,11]},&quot;v&quot;:&quot;好处&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:10,&quot;p&quot;:{&quot;lines&quot;:[11,12]},&quot;v&quot;:&quot;reference中存储稳定句柄地址，对象被移动（垃圾收集时移动对象很普遍）时只会改变句柄中实例数据指针即可，reference本身不需要被修改&quot;}]}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[12,13]},&quot;v&quot;:&quot;直接指针(Hotspot采用)&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[13,14]},&quot;v&quot;:&quot;&lt;a href=\&quot;#直接指针\&quot;&gt;图示&lt;/a&gt;&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[14,15]},&quot;v&quot;:&quot;实现&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[15,16]},&quot;v&quot;:&quot;好处&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:10,&quot;p&quot;:{&quot;lines&quot;:[16,17]},&quot;v&quot;:&quot;直接指针是局部变量表中的引用，直接指向堆中的实例，在对象实例中有类型指针，指向的是方法区中的对象类型数据&quot;}]}]}]}]}"></svg></div><h6 id="对象访问定位"><img src="./../jvm-sgg7/image-20231222203611227.png" alt="对象访问定位"></h6><h6 id="访问句柄"><img src="./../jvm-sgg7/image-20231222204209752.png" alt="访问句柄"></h6><h6 id="直接指针"><img src="./../jvm-sgg7/image-20231222204438850.png" alt="直接指针"></h6><h1>直接内存</h1><h2 id="概述">概述</h2><h3 id="直接内存">直接内存</h3><p><strong>(Direct Memory)</strong></p><ul><li><p>不是虚拟机运行时数据区的一部分，也不是《Java 虚拟机规范》中定义的内存区域。</p></li><li><p>直接内存是在Java堆外的、直接向系统申请的内存区间。</p></li><li><p>来源于 NIO，通过存在堆中的 DirectByteBuffer 操作 Native 内存</p></li><li><p>通常，访问直接内存的速度会优于 Java 堆。即读写性能高。</p><ul><li>因此出于性能考虑，读写频繁的场合可能会考虑使用直接内存。</li><li>Java 的 NIO 库允许 Java 程序使用直接内存，用于数据缓冲区</li></ul></li></ul><h3 id="NIO-与-BIO">NIO 与 BIO</h3><p><strong>非直接缓存区(BIO)</strong></p><ul><li>读写文件, 需要与磁盘交互, 需要由用户态切换到内核态. 在内核态时, 需要内存如下图的操作</li><li>使用IO, 这里需要两份内存存储重复数据, 效率低</li></ul><p><img src="./../jvm-sgg7/image-20231222210605746.png" alt=""></p><p><strong>直接缓冲区(NIO)</strong></p><ul><li>使用 NIO 时, 如下图. 操作系统划出的直接缓存区可以被 Java 代码直接访问, 只有一份. NIO 适合堆大文件的读写操作</li></ul><p><img src="./../jvm-sgg7/image-20231222211252472.png" alt=""></p><h3 id="直接内存与OOM">直接内存与OOM</h3><ul><li><p>直接内存也可能导致 OutofMemoryError 异常</p></li><li><p>由于直接内存在Java堆外，因此它的大小不会直接受限于 -Xmx 指定的最大堆大小，但是系统内存是有限的，Java 堆和直接内存的总和依然受限于操作系统能给出的最大内存。</p></li><li><p>直接内存的缺点为：</p><ul><li>分配回收成本较高</li><li>不受 JVM 内存回收管理</li></ul></li><li><p>直接内存大小可以通过 MaxDirectMemorySize 设置</p></li><li><p>如果不指定，默认与堆的最大值 -Xmx 参数值一致</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 本地内存的OOM:  OutOfMemoryError: Direct buffer memory * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BufferTest2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">BUFFER</span> <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">//20MB</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">ByteBuffer</span> byteBuffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocateDirect</span><span class="token punctuation">(</span><span class="token constant">BUFFER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>byteBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./../jvm-sgg7/image-20231222212504204.png" alt=""></p><p><strong>简单理解</strong></p><p>Java process memory = Java heap + native memory</p>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NIO </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM-06-方法区</title>
      <link href="/2023/12/19/jvm-sgg6/"/>
      <url>/2023/12/19/jvm-sgg6/</url>
      
        <content type="html"><![CDATA[<h1>方法区</h1><h2 id="1-栈、堆、方法区的交互关系">1-栈、堆、方法区的交互关系</h2><p><img src="../jvm-sgg6/001.png" alt="运行时数据区结构图"></p><p><img src="../jvm-sgg6/002.png" alt="线程共享与否的角度"></p><p><img src="./../jvm-sgg6/003.png" alt="三者间的相互关系"></p><h2 id="2-方法区的理解">2-方法区的理解</h2><h3 id="方法区在哪里">方法区在哪里?</h3><ul><li>《Java虚拟机规范》中明确说明：尽管所有的方法区在逻辑上是属于堆的一部分，但一些简单的实现可能不会选择去进行垃圾收集或者进行压缩。但对于 HotSpotJVM 而言，方法区还有一个别名叫做Non-Heap（非堆），目的就是要和堆分开。</li><li>所以，<strong>方法区可以看作是一块独立于 Java 堆的内存空间</strong>。</li></ul><p><img src="./../jvm-sgg6/004.png" alt=""></p><h3 id="方法区的基本理解">方法区的基本理解</h3><p><strong>方法区主要存放的是 Class，而堆中主要存放的是实例化的对象</strong></p><ul><li>方法区（Method Area）与 Java 堆一样，是各个线程共享的内存区域。多个线程同时加载统一个类时，只能有一个线程能加载该类，其他线程只能等等待该线程加载完毕，然后直接使用该类，即类只能加载一次。</li><li>方法区在 JVM 启动的时候被创建，并且它的实际的物理内存空间中和 Java 堆区一样都可以是不连续的。</li><li>方法区的大小，跟堆空间一样，可以选择固定大小或者可扩展。</li><li>方法区的大小决定了系统可以保存多少个类，如果系统定义了太多的类，导致方法区溢出，虚拟机同样会抛出内存溢出错误：<code>java.lang.OutofMemoryError:PermGen space</code>或者<code>java.lang.OutOfMemoryError:Metaspace</code><ul><li>加载大量的第三方的jar包</li><li>Tomcat 部署的工程过多（30~50个）</li><li>大量动态的生成反射类</li></ul></li><li>关闭 JVM 就会释放这个区域的内存。</li></ul><h3 id="方法区观察示例">方法区观察示例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodAreaDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"start..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"end..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./../jvm-sgg6/005.png" alt=""></p><h3 id="HotSpot方法区演进">HotSpot方法区演进</h3><ul><li>在 JDK7 及以前，习惯上把方法区，称为永久代。JDK8 开始，使用元空间取代了永久代。我们可以将方法区类比为 Java 中的接口，将永久代或元空间类比为 Java 中具体的实现类</li><li>本质上，方法区和永久代并不等价。仅是对 Hotspot 而言的可以看作等价。《Java虚拟机规范》对如何实现方法区，不做统一要求。例如：BEAJRockit / IBM J9 中不存在永久代的概念。<ul><li>现在来看，当年使用永久代，不是好的 idea。导致 Java 程序更容易 OOM（超过-XX:MaxPermsize上限）</li></ul></li></ul><p><img src="./../jvm-sgg6/006.png" alt=""></p><ul><li>而到了 JDK8，终于完全废弃了永久代的概念，改用与 JRockit、J9 一样在本地内存中实现的元空间（Metaspace）来代替</li></ul><p><img src="./../jvm-sgg6/007.png" alt=""></p><ul><li>元空间的本质和永久代类似，都是对 JVM 规范中方法区的实现。不过元空间与永久代最大的区别在于：<strong>元空间不在虚拟机设置的内存中，而是使用本地内存</strong>。</li><li>永久代、元空间二者并不只是名字变了，内部结构也调整了</li><li>根据《Java 虚拟机规范》的规定，如果方法区无法满足新的内存分配需求时，将抛出 OOM 异常</li></ul><h2 id="3-设置方法区大小与OOM">3-设置方法区大小与OOM</h2><h3 id="JDK8及以后-元空间">JDK8及以后(元空间)</h3><ul><li><p>元数据区大小可以使用参数 <code>-XX:MetaspaceSize</code> 和 <code>-XX:MaxMetaspaceSize</code> 指定</p></li><li><p>默认值依赖于平台，Windows 下，<code>-XX:MetaspaceSize</code> 约为21M，<code>-XX:MaxMetaspaceSize</code>的值是-1，即没有限制。</p></li><li><p>与永久代不同，如果不指定大小，默认情况下，虚拟机会耗尽所有的可用系统内存。如果元数据区发生溢出，虚拟机一样会抛出异常 OutOfMemoryError:Metaspace</p></li><li><p><code>-XX:MetaspaceSize</code>：设置初始的元空间大小。对于一个 64位 的服务器端 JVM 来说，其默认的 <code>-XX:MetaspaceSize</code>值为21MB。这就是初始的高水位线，一旦触及这个水位线，Full GC 将会被触发并卸载没用的类（即这些类对应的类加载器不再存活），然后这个高水位线将会重置。新的高水位线的值取决于 GC 后释放了多少元空间。如果释放的空间不足，那么在不超过 MaxMetaspaceSize 时，适当提高该值。如果释放空间过多，则适当降低该值。</p></li><li><p>如果初始化的高水位线设置过低，上述高水位线调整情况会发生很多次。通过垃圾回收器的日志可以观察到 Full GC 多次调用。为了避免频繁地GC，建议将<code>-XX:MetaspaceSize</code>设置为一个相对较高的值。</p></li><li><p>举例: <code>-XX:MetaspaceSize=10m -XX:MaxMetaspaceSize=10m</code></p></li></ul><h3 id="方法区OOM">方法区OOM</h3><p><strong>Demo</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * jdk6/7中： * -XX:PermSize=10m -XX:MaxPermSize=10m * * jdk8中： * -XX:MetaspaceSize=10m -XX:MaxMetaspaceSize=10m * * OOMTest 类继承 ClassLoader 类，获得 defineClass() 方法，可自己进行类的加载 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OOMTest</span> <span class="token keyword">extends</span> <span class="token class-name">ClassLoader</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">OOMTest</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OOMTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//创建ClassWriter对象，用于生成类的二进制字节码</span>                <span class="token class-name">ClassWriter</span> classWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassWriter</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//指明版本号，修饰符，类名，包名，父类，接口</span>                classWriter<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">Opcodes</span><span class="token punctuation">.</span><span class="token constant">V1_8</span><span class="token punctuation">,</span> <span class="token class-name">Opcodes</span><span class="token punctuation">.</span><span class="token constant">ACC_PUBLIC</span><span class="token punctuation">,</span> <span class="token string">"Class"</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"java/lang/Object"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//返回byte[]</span>                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> code <span class="token operator">=</span> classWriter<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//类的加载</span>                test<span class="token punctuation">.</span><span class="token function">defineClass</span><span class="token punctuation">(</span><span class="token string">"Class"</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> code<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> code<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Class对象</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="如何解决OOM">如何解决OOM</h3><ul><li>要解决 <strong>OOM</strong> 异常或 <strong>heap space</strong> 的异常，一般的手段是首先通过内存映像分析工具（如 <strong>Ecipse Memory Analyzer</strong>）对dump出来的堆转储快照进行分析，重点是确认内存中的对象是否是必要的，也就是要先分清楚到底是出现了内存泄漏（<strong>Memory Leak</strong>）还是内存溢出（<strong>Memory Overflow</strong>）</li><li>如果是内存泄漏，可进一步通过工具查看泄漏对象到 <strong>GC Roots</strong> 的引用链。于是就能找到泄漏对象是通过怎样的路径与 <strong>GC Roots</strong> 相关联并导致垃圾收集器无法自动回收它们的。掌握了泄漏对象的类型信息，以及 <strong>GC Roots</strong> 引用链的信息，就可以比较准确地定位出泄漏代码的位置。</li><li>如果不存在内存泄漏，换句话说就是内存中的对象确实都还必须存活着，那就应当检查虚拟机的堆参数（-Xmx与-Xms），与机器物理内存对比看是否还可以调大，从代码上检查是否存在某些对象生命周期过长、持有状态时间过长的情况，尝试减少程序运行期的内存消耗。</li></ul><h2 id="4-方法区的内部结构">4-方法区的内部结构</h2><p><img src="./../jvm-sgg6/008.png" alt=""></p><p>《深入理解 Java 虚拟机》书中对方法区（Method Area）存储内容描述如下：它用于存储已被虚拟机加载的<strong>类型信息、常量、静态变量、即时编译器编译后的代码缓存</strong>等。</p><p><img src="./../jvm-sgg6/009.png" alt=""></p><h3 id="类型信息">类型信息</h3><p>对每个加载的类型（类 class、接口 interface、枚举 enum、注解annotation），JVM 必须在方法区中存储以下类型信息：</p><ul><li>这个类型的完整有效名称（全名=包名.类名）</li><li>这个类型直接父类的完整有效名（对于 interface 或是java.lang.Object，都没有父类）</li><li>这个类型的修饰符（public，abstract，final 的某个子集）</li><li>这个类型直接接口的一个有序列表</li></ul><p><img src="./../jvm-sgg6/011.png" alt=""></p><h3 id="域-Field-信息">域(Field)信息</h3><blockquote><p>也就是我们常说的成员变量，域信息是比较官方的称呼</p></blockquote><ul><li>JVM 必须在方法区中保存类型的所有域的相关信息以及域的声明顺序。</li><li>域的相关信息包括：域名称，域类型，域修饰符（public，private，protected，static，final，volatile，transient 的某个子集）</li></ul><h3 id="方法-Method-信息">方法(Method)信息</h3><p>JVM 必须保存所有方法的以下信息，同域信息一样包括声明顺序：</p><ul><li>方法名称</li><li>方法的返回类型（包括 void 返回类型），void 在 Java 中对应的为 void.class</li><li>方法参数的数量和类型（按顺序）</li><li>方法的修饰符（public，private，protected，static，final，synchronized，native，abstract的一个子集）</li><li>方法的字节码（bytecodes）、操作数栈、局部变量表及大小（abstract 和 native方法除外）</li><li>异常表（abstract 和 native方法除外），异常表记录每个异常处理的开始位置、结束位置、代码处理在程序计数器中的偏移地址、被捕获的异常类的常量池索引</li></ul><p><img src="./../jvm-sgg6/010.png" alt=""></p><p><img src="./../jvm-sgg6/012.png" alt="静态方法及异常表"></p><h3 id="demo">demo</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * &lt;p>Description: 测试方法区内部构成 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodInnerStrucTest</span> <span class="token keyword">extends</span> <span class="token class-name">Object</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//属性</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"测试方法的内部结构"</span><span class="token punctuation">;</span>    <span class="token comment">//构造器</span>    <span class="token comment">//方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"count = "</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token keyword">int</span> cal<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> value <span class="token operator">/</span> cal<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">String</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>javap -v -p MethodInnerStrucTest &gt; test.txt</code></p><ul><li><code>-p </code>是为了查看 <code>private</code> 权限类型的字段或方法</li></ul><h3 id="non-final-类型的类变量">non-final 类型的类变量</h3><blockquote><p>静态方法对象为 null 依旧可以访问</p></blockquote><p><img src="./../jvm-sgg6/014.png" alt="static final"></p><p><img src="./../jvm-sgg6/015.png" alt="final"></p><h3 id="运行时常量池">运行时常量池</h3><p><img src="./../jvm-sgg6/016.png" alt=""></p><ul><li>方法区，内部包含了运行时常量池<ul><li>类文件通过类加载器加载到方法区后, 字节码中的常量池便称为运行时常量池</li></ul></li><li>字节码文件，内部包含了常量池。（之前的字节码文件中已经看到了很多 Constant pool 的东西，这个就是常量池）</li><li>要弄清楚方法区，需要理解清楚 ClassFile，因为加载类的信息都在方法区。</li><li>要弄清楚方法区的运行时常量池，需要理解清楚 ClassFile 中的常量池。</li></ul><h4 id="常量池">常量池</h4><p><img src="./../jvm-sgg6/017.png" alt=""></p><ul><li>一个有效的字节码文件中除了包含类的版本信息、字段、方法以及接口等描述符信息外。还包含一项信息就是<strong>常量池表</strong>（<strong>Constant Pool Table</strong>），包括各种字面量和对类型、域和方法的符号引用</li></ul><p><strong>为什么需要常量池?</strong></p><p>一个java源文件中的类、接口，编译后产生一个字节码文件。而Java中的字节码需要数据支持，通常这种数据会很大以至于不能直接存到字节码里，换另一种方式，可以存到常量池。这个字节码包含了指向常量池的引用。在动态链接的时候会用到运行时常量池，之前有介绍</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleClass</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>虽然上述代码只有194字节，但是里面却使用了String、System、PrintStream 及 Object 等结构。</li><li>比如说我们这个文件中有 6 个地方用到了 “hello” 这个字符串，如果不用常量池，就需要在 6 个地方全写一遍，造成臃肿。我们可以将 “hello” 等所需用到的结构信息记录在常量池中，并通过<strong>引用的方式</strong>，来加载、调用所需的结构</li><li>这里的代码量其实很少了，如果代码多的话，引用的结构将会更多，这里就需要用到常量池了。</li></ul><p><strong>常量池中有什么?</strong></p><p>几种在常量池内存储的数据类型包括:</p><ul><li>数量值</li><li>字符串值</li><li>类引用</li><li>字段引用</li><li>方法引用</li></ul><p><strong>小结</strong></p><p>常量池、可以看做是一张表，虚拟机指令根据这张常量表找到要执行的类名、方法名、参数类型、字面量等类型。</p><h4 id="运行时常量池-2">运行时常量池</h4><ul><li><p>运行时常量池（<strong>Runtime Constant Pool</strong>）是方法区的一部分。</p></li><li><p>常量池表（<strong>Constant Pool Table</strong>）是Class字节码文件的一部分，<strong>用于存放编译期生成的各种字面量与符号引用</strong>，<strong>这部分内容将在类加载后存放到方法区的运行时常量池中</strong>。（运行时常量池就是常量池在程序运行时的称呼）</p></li><li><p>运行时常量池，在加载类和接口到虚拟机后，就会创建对应的运行时常量池。</p></li><li><p>JVM 为每个已加载的类型（类或接口）都维护一个常量池。池中的数据项像数组项一样，是通过索引访问的。</p></li><li><p>运行时常量池中包含多种不同的常量，包括编译期就已经明确的数值字面量，也包括到运行期解析后才能够获得的方法或者字段引用。<strong>此时不再是常量池中的符号地址了，这里换为真实地址</strong>。</p><ul><li>运行时常量池，相对于 Class 文件常量池的另一重要特征是：<strong>具备动态性</strong>。</li><li>比如 <code>String.intern()</code></li></ul></li><li><p>运行时常量池类似于传统编程语言中的符号表（symbol table），但是它所包含的数据却比符号表要更加丰富一些。</p></li><li><p>当创建类或接口的运行时常量池时，如果构造运行时常量池所需的内存空间超过了方法区所能提供的最大值，则 JVM 会抛 OutofMemoryError 异常。</p></li></ul><h2 id="5-方法区使用举例">5-方法区使用举例</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodAreaDemo2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> x <span class="token operator">/</span> y<span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="./../jvm-sgg6/image-20231221202927474.png" alt="javap -v -p"></p><p><strong>步骤细节</strong></p><p><img src="./../jvm-sgg6/image-20231221203207231.png" alt="01"></p><p><img src="./../jvm-sgg6/image-20231221203455458.png" alt="02"></p><p><img src="./../jvm-sgg6/image-20231221203629464.png" alt="03"></p><p><img src="./../jvm-sgg6/image-20231221203906528.png" alt="03"></p><p><img src="./../jvm-sgg6/image-20231221204133859.png" alt="04"></p><p><img src="./../jvm-sgg6/image-20231221204427032.png" alt="05"></p><p><img src="./../jvm-sgg6/image-20231221204728860.png" alt="06"></p><p><img src="./../jvm-sgg6/image-20231221204953042.png" alt="07"></p><p><img src="./../jvm-sgg6/image-20231221210754104.png" alt="08"></p><p><img src="./../jvm-sgg6/image-20231221210316645.png" alt="09"></p><p><img src="./../jvm-sgg6/image-20231221210219422.png" alt="10"></p><p><img src="./../jvm-sgg6/image-20231221211132589.png" alt="11"></p><h2 id="6-方法区演进细节">6-方法区演进细节</h2><h3 id="永久代演进过程">永久代演进过程</h3><ol><li><p>首先明确：<strong>只有 Hotspot 才有永久代</strong>。BEA JRockit、IBMJ9等来说，是不存在永久代的概念的。原则上如何实现方法区属于虚拟机实现细节，不受《Java虚拟机规范》管束，并不要求统一</p></li><li><p>Hotspot 中方法区的变化：</p></li></ol><table><thead><tr><th>JDK1.6及以前</th><th>有永久代（permanent generation），静态变量存储在永久代上</th></tr></thead><tbody><tr><td>JDK1.7</td><td>有永久代，但已经逐步 “去永久代”，<strong>字符串常量池，静态变量移除，保存在堆中</strong></td></tr><tr><td>JDK1.8</td><td>无永久代，类型信息，字段，方法，常量保存在本地内存的元空间，但字符串常量池、静态变量仍然在堆中。</td></tr></tbody></table><p><img src="./../jvm-sgg6/image-20231221211816995.png" alt="JDK6"></p><p><img src="./../jvm-sgg6/image-20231221211917267.png" alt="JDK7"></p><p><img src="./../jvm-sgg6/image-20231221211959637.png" alt="JDK8"></p><h3 id="永久代为什么要被元空间替代？">永久代为什么要被元空间替代？</h3><blockquote><p><strong>官方文档</strong>：<a href="http://openjdk.java.net/jeps/122">http://openjdk.java.net/jeps/122</a></p></blockquote><ul><li>随着 Java8 的到来，HotSpot VM 中再也见不到永久代了。但是这并不意味着类的元数据信息也消失了。这些数据被移到了一个与堆不相连的本地内存区域，这个区域叫做元空间（Metaspace）。</li><li>由于类的元数据分配在本地内存中，元空间的最大可分配空间就是系统可用内存空间。</li><li>这项改动是很有必要的，原因有：<ol><li>为永久代设置空间大小是很难确定的。在某些场景下，如果动态加载类过多，容易产生Perm区的OOM。比如某个实际Web工程中，因为功能点比较多，在运行过程中，要不断动态加载很多类，经常出现致命错误。<code>Exception in thread 'dubbo client x.x connector' java.lang.OutOfMemoryError:PermGen space</code>而元空间和永久代之间最大的区别在于：元空间并不在虚拟机中，而是使用本地内存。 因此，默认情况下，元空间的大小仅受本地内存限制。</li><li>对永久代进行调优是很困难的。方法区的垃圾收集主要回收两部分内容：常量池中废弃的常量和不再用的类型，方法区的调优主要是为了降低 <strong>Full GC</strong></li></ol></li></ul><h3 id="两个问题">两个问题</h3><h4 id="字符串常量池-StringTable-为什么要调整位置？">字符串常量池 StringTable 为什么要调整位置？</h4><ul><li><p>JDK7 中将 StringTable 放到了堆空间中。因为永久代的回收效率很低，在 Full GC 的时候才会执行永久代的垃圾回收，而 Full GC 是老年代的空间不足、永久代不足时才会触发。</p></li><li><p>这就导致 StringTable 回收效率不高，而我们开发中会有大量的字符串被创建，回收效率低，导致永久代内存不足。放到堆里，能及时回收内存。</p></li></ul><h4 id="静态变量放在哪">静态变量放在哪</h4><p><strong>demo1</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * jdk7： * -Xms200m -Xmx200m -XX:PermSize=300m -XX:MaxPermSize=300m -XX:+PrintGCDetails * jdk 8： * -Xms200m -Xmx200m -XX:MetaspaceSize=300m -XX:MaxMetaspaceSize=300m -XX:+PrintGCDetails */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticFieldTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//100MB</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">StaticFieldTest</span><span class="token punctuation">.</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结论</strong></p><ol><li>静态引用对应的对象实体 (也就是这个 new byte[1024 * 1024 * 100]) 始终都存在堆空间</li><li>只是那个变量(相当于下面的 arr 变量名)在 JDK6, JDK7, JDK8 存放位置中有所变化</li></ol><p><strong>demo2</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 《深入理解Java虚拟机》中的案例： * staticObj、instanceObj、localObj存放在哪里？ */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticObjTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">static</span> <span class="token class-name">ObjectHolder</span> staticObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectHolder</span> instanceObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ObjectHolder</span> localObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ObjectHolder</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Test</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StaticObjTest<span class="token punctuation">.</span>Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        test<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结论</strong></p><ul><li><p><code>staticObj</code> <strong>静态成员变量</strong>随着 <code>Test</code> 的类信息存放在方法区,</p></li><li><p><code>instanceObj</code> <strong>成员变量</strong>随着 <code>Teset</code> 的对象示例存放在Java堆,</p></li><li><p><code>localObject</code> <strong>方法变量</strong>则是存放在 <code>foo()</code> 方法栈的局部变量表中.</p></li><li><p>三个对象的数据在内存中的地址都落在Eden区范围内，所以结论：<strong>只要是对象实例必然会在 Java 堆中分配</strong>。</p></li></ul><p>从《Java 虚拟机规范》所定义的概念模型来看，所有 Class 相关的信息都应该存放在方法区之中，但方法区该如何实现，《Java 虚拟机规范》并未做出规定，这就成了一件允许不同虚拟机自己灵活把握的事情。<strong>JDK7 及其以后版本的 HotSpot 虚拟机选择把静态变量与类型在 Java 语言一端的映射 Class 对象存放在一起，存储于 Java 堆之中</strong></p><h2 id="7-方法区的垃圾回收">7-方法区的垃圾回收</h2><ul><li><p>有些人认为方法区（如 Hotspot 虚拟机中的元空间或者永久代）是没有垃圾收集行为的，其实不然。《Java 虚拟机规范》对方法区的约束是非常宽松的，提到过可以不要求虚拟机在方法区中实现垃圾收集。事实上也确实有未实现或未能完整实现方法区<strong>类型卸载</strong>的收集器存在（如 JDK11 时期的 ZGC 收集器就不支持类卸载）。</p></li><li><p>一般来说这个区域的回收效果比较难令人满意，尤其是类型的卸载，条件相当苛刻。但是这部分区域的回收有时又确实是必要的。以前 sun 公司的 Bug 列表中，曾出现过的若干个严重的 Bug 就是由于低版本的 HotSpot 虚拟机对此区域未完全回收而导致内存泄漏。</p></li><li><p>方法区的垃圾收集主要回收两部分内容：<strong>常量池中废弃的常量和不再使用的类型</strong>。</p></li></ul><h3 id="方法区的垃圾收集">方法区的垃圾收集</h3><ul><li><p>先来说说方法区内常量池之中主要存放的两大类常量：字面量和符号引用。字面量比较接近Java语言层次的常量概念，如文本字符串、被声明为final的常量值等。而符号引用则属于编译原理方面的概念，包括下面三类常量：</p><ul><li>类和接口的全限定名</li><li>字段的名称和描述符</li><li>方法的名称和描述符</li></ul></li><li><p>HotSpot 虚拟机对常量池的回收策略是很明确的，只要常量池中的常量没有被任何地方引用，就可以被回收。</p></li><li><p>回收废弃常量与回收 Java 堆中的对象非常类似。（关于常量的回收比较简单，重点是类的回收）</p></li></ul><p>下面也称作<strong>类卸载</strong></p><ul><li><p>判定一个常量是否“废弃”还是相对简单，而要判定一个类型是否属于“不再被使用的类”的条件就比较苛刻了。需要同时满足下面三个条件：</p><ul><li><p>该类所有的实例都已经被回收，也就是 Java 堆中不存在该类及其任何派生子类的实例。</p></li><li><p>加载该类的类加载器已经被回收，这个条件除非是经过精心设计的可替换类加载器的场景，如 OSGi、JSP 的重加载等，否则通常是很难达成的。</p></li><li><p>该类对应的 java.lang.Class 对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</p></li></ul></li><li><p>Java 虚拟机被允许对满足上述三个条件的无用类进行回收，这里说的仅仅是“被允许”，而并不是和对象一样，没有引用了就必然会回收。关于是否要对类型进行回收，HotSpot 虚拟机提供了 <code>-Xnoclassgc</code> 参数进行控制，还可以使用 <code>-verbose:class</code> 以及 <code>-XX：+TraceClass-Loading</code>、<code>-XX：+TraceClassUnLoading</code> 查看类加载和卸载信息</p></li><li><p>在大量使用反射、动态代理、CGLib 等字节码框架，动态生成 JSP 以及 OSGi 这类频繁自定义类加载器的场景中，<u>通常都需要 Java 虚拟机具备类型卸载的能力，以保证不会对方法区造成过大的内存压力。</u></p></li></ul><h2 id="8-总结">8-总结</h2><p><img src="./../jvm-sgg6/image-20231221221657282.png" alt=""></p><h3 id="常见面试题">常见面试题</h3><ul><li>说一下 JVM 内存模型吧，有哪些区？分别干什么的？</li><li>Java8 的内存分代改进</li><li>JVM 内存分哪几个区，每个区的作用是什么？</li><li>JVM 内存分布/内存结构？栈和堆的区别？堆的结构？为什么两个 survivor 区？</li><li>Eden 和 survior 的比例分配</li><li>JVM 内存分区，为什么要有新生代和老年代</li><li>Java 的内存分区</li><li>讲讲 JVM 运行时数据库区</li><li>什么时候对象会进入老年代？</li><li>JVM 的内存结构，Eden 和 Survivor 比例。</li><li>JVM 内存为什么要分成新生代，老年代，持久代。新生代中为什么要分为 Eden 和 Survivor。</li><li>一面：JVM 内存模型以及分区，需要详细到每个区放什么。</li><li>一面：JVM 的内存模型，Java8 做了什么改</li><li>JVM 内存分哪几个区，每个区的作用是什么？</li><li>Java 内存分配</li><li>JVM 的永久代中会发生垃圾回收吗？</li><li>一面：JVM 内存分区，为什么要有新生代和老年代？</li></ul>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-matery主题优化</title>
      <link href="/2023/12/19/hexo-update/"/>
      <url>/2023/12/19/hexo-update/</url>
      
        <content type="html"><![CDATA[<h2 id="目录滚动">目录滚动</h2><blockquote><p>默认情况下matery主题, 文章中当目录过多, 超出页面后便无法展示多余目录, 解决方案如下. (该方案取自github issues中, 只能做简单滚动)</p></blockquote><ol><li><p>全局搜索<code>#toc-content &#123;</code></p><p>或者直接找到目录<code>/themes/xxx/source/css/post.css</code></p></li><li><p>更改如下代码</p></li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#toc-content</span> <span class="token punctuation">&#123;</span>    <span class="token property">padding-bottom</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*※※※※改成※※※※*/</span><span class="token selector">#toc-content</span> <span class="token punctuation">&#123;</span>    <span class="token property">padding-bottom</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>    <span class="token property">overflow-y</span><span class="token punctuation">:</span> scroll<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100vh - 250px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="滚动条颜色调整">滚动条颜色调整</h2><blockquote><p>原滚动条颜色是暖红色调, 现改为冷蓝色调</p></blockquote><h3 id="主题文件">主题文件</h3><p><code>/themes/xxx/source/css/post.css</code></p><ul><li>分别搜索</li></ul><p>​<code>::-webkit-scrollbar-thumb</code></p><p>​<code>::-webkit-scrollbar-track</code></p><ul><li>改为: <code>background-color: #18bfd0;</code></li></ul><h3 id="暗色文件">暗色文件</h3><p><code>/themes/xxx/source/css/dark.css</code></p><ul><li><p>搜索<code>body.DarkMode .progress-bar</code></p></li><li><p>改为 <code>background: linear-gradient(to right, #2fb0e5 0%, #2ce0cb 100%);</code></p></li></ul><h2 id="区块颜色调整">区块颜色调整</h2><blockquote><p>区块由于在主题源码包中已经有相关定义, 因此需要针对源码包进行调整</p></blockquote><h3 id="源码文件">源码文件</h3><p><code>themes/xxx/source/libs/materialize/materialize.min.css</code></p><ul><li><p>删除</p><p><code>border-left:5px solid #ee6e73&#125;</code></p></li></ul><h3 id="主题文件-2">主题文件</h3><p><code>themes/xxx/source/css/matery.css</code></p><ul><li><p>搜索 <code>blockquote &#123;</code></p></li><li><p>改为</p></li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">blockquote</span> <span class="token punctuation">&#123;</span>    <span class="token property">border-left</span><span class="token punctuation">:</span> 3px solid #67767c <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 1rem 0.8rem 0.2rem 0.8rem<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #666<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>94 163 157 / 10%<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> justify<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="夜间文件">夜间文件</h3><p><code>themes/xxx/source/css/dark.css</code></p><ul><li>搜索 <code>body.DarkMode blockquote &#123;</code></li><li>改为(此处色调未调整, 依旧是暖红色调</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body.DarkMode blockquote</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #666 <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">border-left</span><span class="token punctuation">:</span> 3px solid #d72f0f <span class="token important">!important</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0.6<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> justify<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="目录颜色">目录颜色</h2><h3 id="文件">文件</h3><p><code>themes/xxx/source/css/post.css</code></p><ul><li><p>搜索<code>#toc-content .toc-link:hover &#123;</code></p></li><li><p>将悬停颜色改为 <code>color: #009cff;</code></p></li><li><p>搜索<code>#toc-content .is-active-link &#123;</code></p></li><li><p>将激活颜色改为 <code>color: #009cff</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM-05-堆</title>
      <link href="/2023/12/18/jvm-sgg5/"/>
      <url>/2023/12/18/jvm-sgg5/</url>
      
        <content type="html"><![CDATA[<h1>堆</h1><h2 id="1-堆的核心概述">1-堆的核心概述</h2><p><img src="../jvm-sgg5/001.png" alt=""></p><ul><li><p>一个 JVM 实例只存在一个堆内存，堆也是 Java 内存管理的核心区域。</p></li><li><p>Java 堆区在 JVM 启动的时候即被创建，其空间大小也就确定了，堆是 JVM 管理的最大一块内存空间.</p><ul><li>堆内存的大小是可以调节的。</li></ul></li><li><p>《Java 虚拟机规范》规定，堆可以处于<strong>物理上不连续</strong>的内存空间中，但在<strong>逻辑上</strong>它应该被视为<strong>连续的</strong>。</p></li><li><p>所有的线程共享 Java 堆，在这里还可以划分线程私有的缓冲区（Thread Local Allocation Buffer，<strong>TLAB</strong>）。</p></li><li><p>《Java虚拟机规范》中对Java堆的描述是：<strong>所有的对象实例以及数组都应当在运行时分配在堆上</strong>。（The heap is the run-time data area from which memory for all class instances and arrays is allocated）</p><ul><li>从实际使用角度看：“几乎”所有的对象实例都在堆分配内存，但并非全部。因为还有一些对象是在栈上分配的（逃逸分析，标量替换）</li></ul></li><li><p>数组和对象可能永远不会存储在栈上（<strong>不一定</strong>），因为栈帧中保存引用，这个引用指向对象或者数组在堆中的位置。</p></li><li><p>在方法结束后，堆中的对象不会马上被移除，仅仅在垃圾收集的时候才会被移除。</p><ul><li>也就是触发了 GC 的时候，才会进行回收</li><li>如果堆中对象马上被回收，那么用户线程就会收到影响，因为有 stop the word</li></ul></li><li><p>堆，是 GC（Garbage Collection，垃圾收集器）执行垃圾回收的重点区域。</p></li></ul><p><img src="../jvm-sgg5/002.png" alt=""></p><p><img src="../jvm-sgg5/003.png" alt="字节码new对象"></p><p><img src="../jvm-sgg5/004.png" alt="Java7之前堆内存逻辑部分"></p><p><img src="../jvm-sgg5/005.png" alt="Java8及之后堆内存逻辑部分"></p><p><img src="../jvm-sgg5/006.png" alt=""></p><p><strong>JDK7堆空间内部结构</strong></p><p><img src="../jvm-sgg5/007.png" alt=""></p><p><img src="../jvm-sgg5/008.png" alt="JDK8堆空间内部结构"></p><p><strong>JDK7-8的变化</strong></p><p><img src="../jvm-sgg5/009.png" alt=""></p><h2 id="2-设置堆内存大小与-OOM">2-设置堆内存大小与 OOM</h2><ul><li><p>Java 堆区用于存储Java对象实例，那么堆的大小在JVM启动时就已经设定好了，大家可以通过选项&quot;-Xms&quot;和&quot;-Xmx&quot;来进行设置。</p><ul><li><code>-Xms</code>用于表示堆区的起始内存，等价于<code>-XX:InitialHeapSize</code></li><li><code>-Xmx</code>则用于表示堆区的最大内存，等价于<code>-XX:MaxHeapSize</code></li></ul></li><li><p>一旦堆区中的内存大小超过<code>-Xmx</code>所指定的最大内存时，将会抛出 OutofMemoryError 异常。</p></li><li><p>通常会将 -Xms 和 -Xmx 两个参数配置相同的值, 其目的<strong>是为了能够在 Java 垃圾回收机制清理完堆区后不需要重新分隔计算的堆区的大小, 从而提高性能</strong></p></li><li><p>默认情况下:</p><ul><li>初始内存大小：物理电脑内存大小/64</li><li>最大内存大小：物理电脑内存大小/4</li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeapSpaceInitial</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//返回Java虚拟机中的堆内存总量</span>        <span class="token keyword">long</span> initialMemory <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">totalMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">;</span>        <span class="token comment">//返回Java虚拟机试图使用的最大堆内存量</span>        <span class="token keyword">long</span> maxMemory <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">maxMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-Xms : "</span> <span class="token operator">+</span> initialMemory <span class="token operator">+</span> <span class="token string">"M"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-Xmx : "</span> <span class="token operator">+</span> maxMemory <span class="token operator">+</span> <span class="token string">"M"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"系统内存大小为："</span> <span class="token operator">+</span> initialMemory <span class="token operator">*</span> <span class="token number">64.0</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">+</span> <span class="token string">"G"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"系统内存大小为："</span> <span class="token operator">+</span> maxMemory <span class="token operator">*</span> <span class="token number">4.0</span> <span class="token operator">/</span> <span class="token number">1024</span> <span class="token operator">+</span> <span class="token string">"G"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>问题: 为什么设置的内存实际会偏小</strong></p><p><code>java -Xmx100m -Xms100m xxx.java</code></p><h3 id="查看Java内存命令">查看Java内存命令</h3><p><img src="../jvm-sgg5/010.png" alt=""></p><ul><li><code>jps</code> 查看Java进程</li><li><code>jstat -gc 进程id</code> 查看某进程内存使用情况</li></ul><pre class="line-numbers language-none"><code class="language-none">SOC: S0区总共容量S1C: S1区总共容量S0U: S0区使用的量S0U: S1区使用的量EC: 伊甸园区总共容量EU: 伊甸园区使用的量OC: 老年代总共容量OU: 老年代使用的量YGC: young GC的次数FGC: full GC的次数问题答: 在代码中得到的是s0&#x2F;s1 + E, 并不是S0+S1+E<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>-XX:+PrintGCDetails</code> 程序执行完之后打印内存情况</li></ul><h3 id="OOM">OOM</h3><p>demo</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OOMTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Picture</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Picture</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Picture</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pixels<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Picture</span><span class="token punctuation">(</span><span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pixels <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>设置虚拟机参数 <code>-Xms600m -Xmx600m</code></li></ul><p><strong>抽样器查看</strong></p><p><img src="../jvm-sgg5/011.png" alt=""></p><h2 id="3-年轻代与老年代">3-年轻代与老年代</h2><ul><li>存储在 JVM 中的 Java 对象可以被划分为两类：<ul><li>一类是生命周期较短的瞬时对象，这类对象的创建和消亡都非常迅速</li><li>另外一类对象的生命周期却非常长，在某些极端的情况下还能够与 JVM 的生命周期保持一致</li></ul></li><li>Java 堆区进一步细分的话，可以划分为年轻代（YoungGen）和老年代（OldGen）</li><li>其中年轻代又可以划分为 Eden 空间、Survivor0 空间和 Survivor1 空间（有时也叫做 from 区、to 区）</li></ul><p><img src="../jvm-sgg5/012.png" alt="堆空间结构"></p><p><img src="../jvm-sgg5/013.png" alt=""></p><ul><li><p>配置新生代与老年代在堆结构的占比</p><ul><li><p>默认<code>-XX:NewRatio=2</code>，表示新生代占1，老年代占2，新生代占整个堆的 1/3</p></li><li><p>可以修改<code>-XX:NewRatio=4</code>，表示新生代占1，老年代占4，新生代占整个堆的 1/5</p></li></ul></li><li><p>在 HotSpot 中，Eden空间和另外两个 survivor 空间缺省所占的比例是 8 : 1 : 1</p></li></ul><blockquote><p>补充: 但是通过<code>jstat -gc</code> 发现是6:1:1, 这是因为有个自适应策略, 通过 <code>-XX:-UseAdaptiveSizePolicy</code> 可关闭</p></blockquote><ul><li><p>当然开发人员可以通过选项 <code>-XX:SurvivorRatio</code> 调整这个空间比例。比如 <code>-XX:SurvivorRatio=8</code></p></li><li><p>几乎所有的 Java 对象都是在 Eden 区被 new 出来的。</p></li><li><p>绝大部分的 Java 对象的销毁都在新生代进行了（有些大的对象在 Eden 区无法存储时候，将直接进入老年代），IBM 公司的专门研究表明，新生代中 80% 的对象都是&quot;朝生夕死&quot;的。</p></li><li><p>可以使用选项 <code>-Xmn</code> 设置新生代最大内存大小，但这个参数一般使用默认值就可以了。</p></li></ul><h2 id="4-图解对象分配过程">4-图解对象分配过程</h2><blockquote><p>为新对象分配内存是一件非常严谨和复杂的任务，JVM 的设计者们不仅需要考虑内存如何分配、在哪里分配等问题，并且由于内存分配算法与内存回收算法密切相关，所以还需要考虑 GC 执行完内存回收后是否会在内存空间中产生内存碎片。</p></blockquote><h3 id="具体过程">具体过程</h3><ol><li>new 的对象先放伊甸园区。此区有大小限制。</li><li>当伊甸园的空间填满时，程序又需要创建对象，JVM 的垃圾回收器将对伊甸园区进行垃圾回收（MinorGC），将伊甸园区中的不再被其他对象所引用的对象进行销毁。再加载新的对象放到伊甸园区。</li><li>然后将伊甸园中的剩余对象移动到幸存者0区。</li></ol><p><img src="../jvm-sgg5/014.png" alt="清除红色,剩余放入S0"></p><ol start="4"><li>如果再次触发垃圾回收，此时上次幸存下来的放到幸存者0区的，如果没有回收，就会放到幸存者1区。</li></ol><p><img src="../jvm-sgg5/015.png" alt="清除红色,S0放置S1"></p><ol start="5"><li>如果再次经历垃圾回收，此时会重新放回幸存者0区，接着再去幸存者 1 区。</li></ol><p><img src="../jvm-sgg5/016.png" alt="继续回到S0"></p><ol start="5"><li>啥时候能去养老区呢？可以设置次数。默认是 15 次。可以设置新生区进入养老区的年龄限制，设置 JVM 参数：<code>-XX:MaxTenuringThreshold=N</code> 进行设置</li></ol><p><img src="../jvm-sgg5/017.png" alt="当次数达到15次后晋升至老年代"></p><ol start="7"><li><p>在养老区，相对悠闲。当养老区内存不足时，再次触发 GC：Major GC，进行养老区的内存清理</p></li><li><p>若养老区执行了 Major GC 之后，发现依然无法进行对象的保存，就会产生 OOM 异常。</p></li></ol><h3 id="总结">总结</h3><ul><li>针对幸存者 S0, S1 区的总结: 复制之后有交换, 谁空谁是 to.</li><li>关于垃圾回收: 频繁在新生区收集, 很少在养老区收集, 几乎不在永久区/元空间收集.</li></ul><h3 id="特殊情况说明">特殊情况说明</h3><p><img src="../jvm-sgg5/018.png" alt=""></p><ul><li>如果来了一个新对象，先看看 Eden 是否放的下？<ul><li>如果 Eden 放得下，则直接放到 Eden 区</li><li>如果 Eden 放不下，则触发 YGC ，执行垃圾回收，看看还能不能放下？</li></ul></li><li>将对象放到老年区又有两种情况：<ul><li>如果 Eden 执行了 YGC 还是无法放不下该对象，那没得办法，只能说明是超大对象，只能直接放到老年代</li><li>那万一老年代都放不下，则先触发 FullGC ，再看看能不能放下，放得下最好，但如果还是放不下，那只能报 OOM</li></ul></li><li>如果 Eden 区满了，将对象往幸存区拷贝时，发现幸存区放不下啦，那只能便宜了某些新对象，让他们直接晋升至老年区</li></ul><h2 id="5-GC-Minor-Major-Full">5-GC(Minor/Major/Full)</h2><ul><li>我们都知道，JVM 的调优的一个环节，也就是垃圾收集，我们需要尽量的避免垃圾回收，因为在垃圾回收的过程中，容易出现 STW（Stop the World）的问题，<strong>而 Major GC 和 Full GC出现STW的时间，是Minor GC的10倍以上</strong></li><li>JVM 在进行 GC 时，并非每次都对上面三个内存区域一起回收的，大部分时候回收的都是指新生代。针对 Hotspot VM 的实现，它里面的 GC 按照回收区域又分为两大种类型：一种是部分收集（Partial GC），一种是整堆收集（FullGC）</li><li>部分收集：不是完整收集整个 Java 堆的垃圾收集。其中又分为：<ul><li><strong>新生代收集</strong>（Minor GC/Young GC）：只是新生代（Eden，s0，s1）的垃圾收集</li><li><strong>老年代收集</strong>（Major GC/Old GC）：只是老年代的圾收集。</li><li>目前，只有 CMS GC 会有单独收集老年代的行为。</li><li>注意，很多时候 Major GC 会和 Full GC 混淆使用，需要具体分辨是老年代回收还是整堆回收。</li><li>混合收集（Mixed GC）：收集整个新生代以及部分老年代的垃圾收集。目前，只有 G1 GC 会有这种行为</li></ul></li><li><strong>整堆收集</strong>（Full GC）：收集整个 Java 堆和方法区的垃圾收集。</li></ul><h3 id="Young-Minor-GC">Young/Minor GC</h3><h4 id="最简单的分代式GC策略的触发条件">最简单的分代式GC策略的触发条件</h4><p><strong>年轻代 GC（Minor GC）触发机制</strong></p><ul><li><p>当年轻代空间不足时，就会触发 Minor GC，这里的年轻代满指的是 Eden 代满。Survivor 满不会主动引发 GC，在 Eden 区满的时候，会顺带触发 s0 区的 GC，也就是被动触发 GC（每次 Minor GC 会清理年轻代的内存）</p></li><li><p>因为 Java 对象<strong>大多都具备朝生夕灭</strong>的特性，所以 Minor GC 非常频繁，一般回收速度也比较快。这一定义既清晰又易于理解。</p></li><li><p>Minor GC 会引发 STW，暂停其它用户的线程，等垃圾回收结束，用户线程才恢复运行</p></li></ul><p><img src="../jvm-sgg5/019.png" alt=""></p><h3 id="Major-GC">Major GC</h3><ul><li><p>指发生在老年代的 GC，对象从老年代消失时，我们说 <code>Major GC</code> 或 <code>Full GC</code> 发生了</p></li><li><p>出现了<code>Major GC</code>，经常会伴随至少一次的 <code>Minor GC</code>。（但非绝对的，在 Parallel Scavenge 收集器的收集策略里就有直接进行 <code>Major GC</code> 的策略选择过程）</p><ul><li>也就是在老年代空间不足时，会先尝试触发 <code>Minor GC</code>，如果之后空间还不足，则触发 <code>Major GC</code></li></ul></li><li><p><code>Major GC</code> 的速度一般会比 Minor GC 慢10倍以上，STW 的时间更长。</p></li><li><p>如果 <code>Major GC</code> 后，内存还不足，就报 OOM 了</p></li></ul><h3 id="Full-GC">Full GC</h3><ul><li>调用 System.gc() 时，系统建议执行 FullGC，但是不必然执行</li><li>老年代空间不足</li><li>方法区空间不足</li><li>通过 Minor GC 后进入老年代的平均大小大于老年代的可用内存</li><li>由Eden区、survivor space0（From Space）区向 survivor space1（To Space）区复制时，对象大小大于 To Space 可用内存，则把该对象转存到老年代，且老年代的可用内存小于该对象大小</li></ul><blockquote><p>说明: Full GC 是开发或调优中尽量要避免的. 这样暂时时间会短一些.</p></blockquote><h3 id="日志分析Demo">日志分析Demo</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 测试MinorGC 、 MajorGC、FullGC * -Xms9m -Xmx9m -XX:+PrintGCDetails * @author dee */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GCTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token string">"atguigu.com"</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>                a <span class="token operator">=</span> a <span class="token operator">+</span> a<span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            t<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"遍历次数为："</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="../jvm-sgg5/020.png" alt="日志分析"></p><h2 id="6-堆空间分代思想">6-堆空间分代思想</h2><blockquote><p>为什么要把 Java 堆分代？不分代就不能正常工作了吗？</p></blockquote><ul><li><p>经研究，不同对象的生命周期不同。70%-99% 的对象是临时对象。</p><ul><li>新生代：有 Eden、两块大小相同的 survivor（又称为 from/to 或 s0/s1）构成，to 总为空。</li><li>老年代：存放新生代中经历多次 GC 仍然存活的对象。</li></ul></li><li><p>其实不分代完全可以，分代的唯一理由就是优化 GC 性能. 如果没有分代，那所有的对象都在一块，就如同把一个学校的人都关在一个教室。GC 的时候要找到哪些对象没用，这样就会对堆的所有区域进行扫描。（性能低）</p><p>而很多对象都是朝生夕死的，如果分代的话，把新创建的对象放到某一地方，当 GC 的时候先把这块存储“朝生夕死”对象的区域进行回收，这样就会腾出很大的空间出来。（多回收新生代，少回收老年代，性能会提高很多）</p></li></ul><h2 id="7-对象内存分配策略">7-对象内存分配策略</h2><blockquote><p>又称 对象提升(Promotion)规则</p></blockquote><ul><li>如果对象在 Eden 出生并经过第一次 <code>Minor GC</code> 后仍然存活，并且能被 Survivor 容纳的话，将被移动到 Survivor 空间中，并将对象年龄设为 1。</li><li>对象在 Survivor 区中每熬过一次 <code>Minor GC</code>，年龄就增加 1 岁，当它的年龄增加到一定程度（默认为 15 岁，其实每个 JVM、每个 GC 都有所不同）时，就会被晋升到老年代</li><li>对象晋升老年代的年龄阀值，可以通过选项 <code>-XX:MaxTenuringThreshold</code> 来设置</li></ul><p><strong>针对不同年龄段的对象分配原则如下所示：</strong></p><ul><li><strong>优先分配到 Eden</strong><ul><li>开发中比较长的<strong>字符串</strong>或者<strong>数组</strong>，会直接存在老年代，但是因为新创建的对象都是朝生夕死的，所以这个大对象可能也很快被回收，但是因为老年代触发 Major GC 的次数比 Minor GC 要更少，因此可能回收起来就会比较慢</li></ul></li><li><strong>大对象直接分配到老年代</strong><ul><li>尽量避免程序中出现过多的大对象</li></ul></li><li><strong>长期存活的对象分配到老年代</strong></li><li><strong>动态对象年龄判断</strong><ul><li>如果 Survivor 区中相同年龄的所有对象大小的总和大于 Survivor 空间的一半，年龄大于或等于该年龄的对象可以直接进入老年代，无须等到 <code>MaxTenuringThreshold</code> 中要求的年龄。</li></ul></li><li><strong>空间分配担保</strong><ul><li><code>-XX:HandlePromotionFailure</code></li></ul></li></ul><h2 id="8-TLAB为对象分配内存">8-TLAB为对象分配内存</h2><h3 id="为什么有-TLAB">为什么有 TLAB</h3><p>(Thread Local Allocation Buffer)</p><ul><li>堆区是线程共享区域，任何线程都可以访问到堆区中的共享数据</li><li>由于对象实例的创建在 JVM 中非常频繁，因此在并发环境下从堆区中划分内存空间是线程不安全的</li><li>为避免多个线程操作同一地址，需要使用<strong>加锁等机制</strong>，进而影响分配速度。</li></ul><h3 id="什么是TLAB">什么是TLAB</h3><ul><li>从内存模型而不是垃圾收集的角度，对 Eden 区域继续进行划分，<strong>JVM 为每个线程分配了一个私有缓存区域，它包含在 Eden 空间内</strong>。</li><li>多线程同时分配内存时，使用 TLAB 可以避免一系列的非线程安全问题，同时还能够提升内存分配的吞吐量，因此我们可以将这种内存分配方式称之为<strong>快速分配策略</strong>。</li><li>据我所知所有 OpenJDK 衍生出来的 JVM 都提供了 TLAB 的设计。</li></ul><p><img src="../jvm-sgg5/021.png" alt=""></p><ul><li><p>每个线程都有一个 TLAB 空间</p><p>当一个线程的 TLAB 存满时，可以使用公共区域（蓝色）的</p></li></ul><h3 id="TLAB再说明">TLAB再说明</h3><ul><li><p>尽管不是所有的对象实例都能够在TLAB中成功分配内存，但 <strong>JVM确实是将 TLAB 作为内存分配的首选</strong>。</p></li><li><p>在程序中，开发人员可以通过选项“<strong>-XX:UseTLAB</strong>”设置是否开启 TLAB 空间。</p></li><li><p>默认情况下，TLAB 空间的内存非常小，仅占有整个 Eden 空间的 1%，当然我们可以通过选项 <code>-XX:TLABWasteTargetPercent</code> 设置 TLAB 空间所占用 Eden 空间的百分比大小。</p></li><li><p>一旦对象在 TLAB 空间分配内存失败时，JVM 就会尝试着通过<strong>使用加锁机制确保数据操作的原子性</strong>，从而直接在 Eden 空间中分配内存。</p></li></ul><p><img src="../jvm-sgg5/022.png" alt="TLAB分配过程"></p><h2 id="9-堆空间常用参数设置">9-堆空间常用参数设置</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-XX:+PrintFlagsInitial</span>  查看所有的参数的默认初始值<span class="token parameter variable">-XX:+PrintFlagsFinal</span>  ：查看所有的参数的最终值（可能会存在修改，不再是初始值）jps：查看当前运行中的进程idjinfo <span class="token parameter variable">-flag</span> SurvivorRatio 进程id<span class="token parameter variable">-Xms</span>  初始堆空间内存<span class="token punctuation">(</span>默认为物理内存的1/64<span class="token punctuation">)</span><span class="token parameter variable">-Xmx</span>  最大堆空间内存<span class="token punctuation">(</span>默认为物理内存的1/4<span class="token punctuation">)</span><span class="token parameter variable">-Xmn</span>  设置新生代的大小<span class="token punctuation">(</span>初始值及最大值<span class="token punctuation">)</span><span class="token parameter variable">-XX:NewRatio</span>  配置新生代与老年代在堆结构的占比<span class="token parameter variable">-XX:SurvivorRatio</span>  设置新生代中Eden和S0/S1空间的比例<span class="token parameter variable">-XX:MaxTenuringThreshold</span>  设置新生代垃圾的最大年龄<span class="token parameter variable">-XX:+PrintGCDetails</span>  输出详细的GC处理日志<span class="token parameter variable">-XX:+PrintGC</span>  打印gc简要信息<span class="token parameter variable">-verbose:gc</span>  打印gc简要信息<span class="token parameter variable">-XX:HandlePromotionFailure</span>  是否设置空间分配担保<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="空间分配担保">空间分配担保</h3><p>在发生 Minor GC 之前，虚拟机会检查老年代最大可用的连续空间是否大于新生代所有对象的总空间。</p><ul><li>如果大于，则此次 Minor GC 是安全的</li><li>如果小于，则虚拟机会查看 <code>-XX:HandlePromotionFailure</code> 设置值是否允担保失败<ul><li>如果 HandlePromotionFailure=true，那么会继续检查<strong>老年代最大可用连续空间是否大于历次晋升到老年代的对象的平均大小</strong><ul><li>如果大于，则尝试进行一次 Minor GC，但这次 Minor GC 依然是有风险的</li><li>如果小于，则进行一次 Full GC</li></ul></li><li>如果 HandlePromotionFailure=false，则进行一次 Full GC</li></ul></li></ul><ul><li>在 JDK6 Update 24 之后，<code>HandlePromotionFailure</code>参数不会再影响到虚拟机的空间分配担保策略，观察 openJDK 中的源码变化，虽然源码中还定义了 <code>HandlePromotionFailure</code> 参数，但是在代码中已经不会再使用它。</li><li>JDK6 Update 24 之后的规则变为<strong>只要老年代的连续空间大于新生代对象总大小或者历次晋升的平均大小就会进行 Minor GC</strong>, 否则将进行 Full GC. 即 <code>HandlePromotionFailure=true</code></li></ul><h2 id="10-对象存储栈上分配–逃逸分析">10-对象存储栈上分配–逃逸分析</h2><ul><li>随着JIT编译期的发展与<strong>逃逸分析技术</strong>逐渐成熟，<strong>栈上分配、标量替换</strong>优化技术将会导致一些微妙的变化，所有的对象都分配到堆上也渐渐变得不那么&quot;绝对&quot;了。</li><li>在Java虚拟机中，对象是在 Java 堆中分配内存的，这是一个普遍的常识。但是，有一种特殊情况，那就是<strong>如果经过逃逸分析(Escape Analysis)后发现，一个对象并没有逃逸出方法的话，那么就可能被优化成栈上分配</strong>。这样就无需在堆上分配内存，也无须进行垃圾回收了。这也是最常见的堆外存储技术。<ul><li>此外，前面提到的基于 OpenJDK 深度定制的 TaoBao VM，其中创新的 GCIH（GC invisible heap）技术实现 off-heap，将生命周期较长的Java对象从 heap 中移至 heap 外，并且 GC 不能管理 GCIH 内部的 Java 对象，以此达到降低 GC 的回收频率和提升 GC 的回收效率的目的。</li></ul></li></ul><h3 id="逃逸分析概述">逃逸分析概述</h3><ul><li>如何将堆上的对象分配到栈，需要使用逃逸分析手段。</li><li>这是一种可以有效减少 Java 程序中同步负载和内存堆分配压力的跨函数全局数据流分析算法。</li><li>通过逃逸分析，Java Hotspot 编译器能够分析出一个新的对象的引用的使用范围从而决定是否要将这个对象分配到堆上。</li><li>逃逸分析的基本行为就是分析对象动态作用域：<ul><li>当一个对象在方法中被定义后，对象只在方法内部使用，则认为没有发生逃逸。</li><li>当一个对象在方法中被定义后，它被外部方法所引用，则认为发生逃逸。例如作为调用参数传递到其他地方中。</li></ul></li></ul><h3 id="逃逸分析举例">逃逸分析举例</h3><ul><li>没有发生逃逸的对象，则可以分配到栈（无线程安全问题）上，随着方法执行的结束，栈空间就被移除（也就无需 GC）</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 此方法内 v 的作用空间只在方法内部, 因此可以将他放在栈中</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">my_method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">V</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">V</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// use v</span>    <span class="token comment">// ....</span>    v <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>代码优化案例</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">StringBuffer</span> <span class="token function">createStringBuffer</span><span class="token punctuation">(</span><span class="token class-name">String</span> s1<span class="token punctuation">,</span> <span class="token class-name">String</span> s2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">StringBuffer</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sb<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果想要 StringBuffer sb 不逃出方法, 可以改写如下:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">createStringBuffer</span><span class="token punctuation">(</span><span class="token class-name">String</span> s1<span class="token punctuation">,</span> <span class="token class-name">String</span> s2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">StringBuffer</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>判断逃逸分析案例</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 逃逸分析 * *  如何快速的判断是否发生了逃逸分析，大家就看new的对象实体是否有可能在方法外被调用。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EscapeAnalysis</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">EscapeAnalysis</span> obj<span class="token punctuation">;</span>    <span class="token comment">/*    方法返回EscapeAnalysis对象，发生逃逸     */</span>    <span class="token keyword">public</span> <span class="token class-name">EscapeAnalysis</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">EscapeAnalysis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*    为成员属性赋值，发生逃逸     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EscapeAnalysis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//思考：如果当前的obj引用声明为static的？仍然会发生逃逸。</span>    <span class="token comment">/*    对象的作用域仅在当前方法中有效，没有发生逃逸     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">useEscapeAnalysis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">EscapeAnalysis</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EscapeAnalysis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*    引用成员变量的值，发生逃逸     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">useEscapeAnalysis1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">EscapeAnalysis</span> e <span class="token operator">=</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//getInstance().xxx()同样会发生逃逸</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码优化">代码优化</h3><p>使用逃逸分析, 编译器可以对代码做如下优化:</p><ul><li><strong>栈上分配</strong>: 将堆分配转化为栈分配. 如果一个对象在子程序中被分配, 要使指向该对象的指针永远不会发生逃逸, 对象可能是栈上分配的候选, 而不是堆上分配</li><li><strong>同步省略</strong>: 如果一个对象被发现只有一个线程被访问到，那么对于这个对象的操作可以不考虑同步.</li><li><strong>分离对象或标量替换</strong>: 有的对象可能不需要作为一个连续的内存结构存在也可以被访问到, 那么对象的部分(或全部)可以不存储在内存, 而是存储在 CPU 寄存器中.</li></ul><h4 id="栈上分配">栈上分配</h4><ul><li>JIT编译器在编译期间根据逃逸分析的结果，发现如果一个对象并没有逃逸出方法的话，就可能被优化成栈上分配。分配完成后，继续在调用栈内执行，最后线程结束，栈空间被回收，局部变量对象也被回收。这样就无须进行垃圾回收了。</li><li>常见的栈上分配的场景<ul><li>在逃逸分析中，已经说明了，分别是给成员变量赋值、方法返回值、实例引用传递。</li></ul></li></ul><h4 id="同步省略（同步消除）">同步省略（同步消除）</h4><ul><li><p>线程同步的代价是相当高的，同步的后果是降低并发性和性能。</p></li><li><p>在动态编译同步块的时候，JIT编译器可以借助逃逸分析来<strong>判断同步块所使用的锁对象是否只能够被一个线程访问而没有被发布到其他线程</strong>。</p></li><li><p>如果没有，那么JIT编译器在编译这个同步块的时候就会取消对这部分代码的同步。这样就能大大提高并发性和性能。这个<strong>取消同步的过程就叫同步省略，也叫锁消除</strong>。</p></li></ul><h4 id="标量替换">标量替换</h4><ul><li><p>标量（scalar）是指一个无法再分解成更小的数据的数据。Java中的原始数据类型就是标量。</p></li><li><p>相对的，那些还可以分解的数据叫做<strong>聚合量（Aggregate）</strong>，Java中的对象就是聚合量，因为他可以分解成其他聚合量和标量。</p></li><li><p>在 JIT 阶段，如果经过逃逸分析，发现一个对象不会被外界访问的话，那么经过 JIT 优化，就会把这个对象拆解成若干个其中包含的若干个成员变量来代替。这个过程就是标量替换。</p></li></ul><p><strong>demo</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Point</span> point <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"point.x"</span> <span class="token operator">+</span> point<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token string">";point.y"</span> <span class="token operator">+</span> point<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码，经过标量替换后，就会变成</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"point.x = "</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">"; point.y="</span> <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可以看到，Point这个聚合量经过逃逸分析后，发现他并没有逃逸，就被替换成两个聚合量了。</li><li>那么标量替换有什么好处呢？就是可以大大减少堆内存的占用。因为一旦不需要创建对象了，那么就不再需要分配堆内存了。</li><li>标量替换为栈上分配提供了很好的基础。</li></ul><p><strong>标量替换参数设置</strong></p><p>参数 <code>-XX:+ElimilnateAllocations</code>：开启了标量替换（默认打开），允许将对象打散分配在栈上。</p><p><code>-server -Xmx100m -Xms100m -XX:+DoEscapeAnalysis -XX:+PrintGC -XX:+EliminateAllocations</code></p><p>这里设置参数如下：</p><ul><li>参数 <code>-server</code>：启动 Server 模式，因为在 Server 模式下，才可以启用逃逸分析。</li><li>参数 <code>-XX:+DoEscapeAnalysis</code>：启用逃逸分析</li><li>参数 <code>-Xmx10m</code>：指定了堆空间最大为10MB</li><li>参数 <code>-XX:+PrintGC</code>：将打印GC日志。</li><li>参数 <code>-XX:+EliminateAllocations</code>：开启了标量替换（默认打开），允许将对象打散分配在栈上，比如对象拥有 id 和 name两个字段，那么这两个字段将会被视为两个独立的局部变量进行分配</li></ul><h4 id="逃逸分析的不足">逃逸分析的不足</h4><ul><li>关于逃逸分析的论文在 1999 年就已经发表了，但直到 JDK1.6 才有实现，而且这项技术到如今也并不是十分成熟的。</li><li>其根本原因就是无法保证逃逸分析的性能消耗一定能高于他的消耗。虽然经过逃逸分析可以做标量替换、栈上分配、和锁消除。但是逃逸分析自身也是需要进行一系列复杂的分析的，这其实也是一个相对耗时的过程。</li><li>一个极端的例子，就是经过逃逸分析之后，发现没有一个对象是不逃逸的。那这个逃逸分析的过程就白白浪费掉了。</li><li>虽然这项技术并不十分成熟，但是它也是即时编译器优化技术中一个十分重要的手段。</li><li>注意到有一些观点，认为通过逃逸分析，JVM 会在栈上分配那些不会逃逸的对象，这在理论上是可行的，但是取决于 JVM 设计者的选择。据我所知，<strong>Oracle Hotspot JVM 中并未这么做</strong>（刚刚演示的效果，是因为HotSpot实现了标量替换），这一点在逃逸分析相关的文档里已经说明，<strong>所以可以明确在 HotSpot 虚拟机上，所有的对象实例都是创建在堆上</strong>。</li><li>目前很多书籍还是基于 JDK7 以前的版本，JDK已经发生了很大变化，intern 字符串的缓存和静态变量曾经都被分配在永久代上，而永久代已经被元数据区取代。但是 <strong>intern 字符串缓存和静态变量并不是被转移到元数据区，而是直接在堆上分配</strong>，<strong>所以这一点同样符合前面一点的结论：对象实例都是分配在堆上</strong>。</li></ul><h2 id="11-小结">11-小结</h2><ul><li><p>年轻代是对象的诞生、成长、消亡的区域，一个对象在这里产生、应用，最后被垃圾回收器收集、结束生命</p></li><li><p>老年代放置长生命周期的对象，通常都是从 Survivor 区域筛选拷贝过来的 Java 对象</p></li><li><p>当然，也有特殊情况，我们知道普通的对象可能会被分配在 TLAB 上</p></li><li><p>如果对象较大，无法分配在 TLAB 上，则 JVM 会试图直接分配在 Eden 其他位置上</p></li><li><p>如果对象太大，完全无法在新生代找到足够长的连续空闲空间， JVM 就会直接分配到老年代</p></li><li><p>当 GC 只发生在年轻代中，回收年轻代对象的行为被称为 Minor GC</p></li><li><p>当 GC 发生在老年代时则被称为 Major GC 或者 Full GC</p></li><li><p>一般的，Minor GC 的发生频率要比 Major GC 高很多，即老年代中垃圾回收发生的频率将大大低于年轻代</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ℹ️JVM-04-虚拟机栈</title>
      <link href="/2023/12/16/jvm-sgg4/"/>
      <url>/2023/12/16/jvm-sgg4/</url>
      
        <content type="html"><![CDATA[<h1>虚拟机栈</h1><h2 id="1-虚拟机栈概述">1-虚拟机栈概述</h2><h3 id="背景">背景</h3><ul><li><p>由于跨平台性的设计，Java 的指令都是根据栈来设计的。不同平台 CPU 架构不同，所以不能设计为基于寄存器的【如果设计成基于寄存器的，耦合度高，性能会有所提升，因为可以对具体的 CPU 架构进行优化，但是跨平台性大大降低】。</p></li><li><p><strong>优点是跨平台，指令集小，编译器容易实现，缺点是性能下降，实现同样的功能需要更多的指令。</strong></p></li></ul><h3 id="内存中的栈与堆">内存中的栈与堆</h3><p><strong>栈是运行时的单位，而堆是存储的单位。</strong></p><p>即：栈解决程序的运行问题，即程序如何执行，或者说如何处理数据。堆解决的是数据存储的问题，即数据怎么放，放在哪</p><p><img src="../jvm-sgg4/001.png" alt=""></p><h3 id="虚拟机栈基本内容">虚拟机栈基本内容</h3><h4 id="Java虚拟机栈是什么？">Java虚拟机栈是什么？</h4><ul><li>Java 虚拟机栈（Java Virtual Machine Stack），早期也叫Java栈。每个线程在创建时都会创建一个虚拟机栈，其内部保存一个个的栈帧（Stack Frame），<strong>对应着一次次的 Java 方法调用</strong>，栈是线程私有的</li></ul><p><img src="../jvm-sgg4/002.png" alt=""></p><h4 id="生命周期">生命周期</h4><p>生命周期和线程一致，也就是线程结束了，该虚拟机栈也销毁了</p><h4 id="作用">作用</h4><p>主管 Java 程序的运行, 它保存方法的局部变量(8 种基本数据类型、对象的引用地址)、部分结果, 并参与方法的调用和返回.</p><ul><li>局部变量 vs 成员变量来说的（或属性）</li><li>基本数据类型变量 vs 引用类型变量（类、数组、接口）</li></ul><h4 id="栈的特点-优点">栈的特点(优点)</h4><ul><li><p>栈是一种快速有效的分配存储方式，访问速度仅次于程序计数器。</p></li><li><p>JVM 直接对 Java 栈的操作只有两个：</p><ul><li>每个方法执行，伴随着<strong>进栈</strong>（入栈、压栈）</li><li>执行结束后的<strong>出栈</strong>工作</li></ul></li><li><p>对于栈来说不存在垃圾回收问题</p><ul><li>栈不需要 GC，但是可能存在 OOM</li></ul></li></ul><img src="../jvm-sgg4/003.png" style="zoom:50%;" /><h4 id="面试-栈中可能出现的异常">面试: 栈中可能出现的异常</h4><p>Java 虚拟机规范允许 Java 栈的大小是动态的或者是固定不变的。</p><ul><li>如果采用固定大小的 Java 虚拟机栈，那每一个线程的 Java 虚拟机栈容量可以在线程创建的时候独立选定。如果线程请求分配的栈容量超过Java虚拟机栈允许的最大容量，Java 虚拟机将会抛出一个<strong>StackoverflowError</strong> 异常。</li><li>如果 Java 虚拟机栈可以动态扩展，并且在尝试扩展的时候无法申请到足够的内存，或者在创建新的线程时没有足够的内存去创建对应的虚拟机栈，那 Java 虚拟机将会抛出一个 <strong>OutofMemoryError</strong> 异常。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token parameter variable">-Xss1m</span><span class="token parameter variable">-Xss1024k</span><span class="token parameter variable">-Xss1048576</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="设置栈内存代销">设置栈内存代销</h4><p><a href="https://docs.oracle.com/en/java/javase/11/tools/java.html">Oracle官方文档</a></p><p>使用参数 <code>-Xss</code> (MaxStackSize)选项来设置线程的最大栈空间，栈的大小直接决定了函数调用的最大可达深度。</p><h2 id="2-栈的存储单位">2-栈的存储单位</h2><h3 id="栈中存储什么">栈中存储什么?</h3><ul><li><p>每个线程都有自己的栈，栈中的数据都是以<strong>栈帧</strong>(Stack Frame)的格式存在</p></li><li><p>在这个线程上正在执行的每个方法都各自对应一个栈帧(Stack Frame)</p></li><li><p>栈帧是一个内存区块，是一个数据集，维系着方法执行过程中的各种数据信息</p></li></ul><h3 id="栈运行原理">栈运行原理</h3><ul><li><p>JVM 直接对Java栈的操作只有两个，就是对栈帧的<strong>压栈和出栈</strong>，<u>遵循先进后出（后进先出）原则</u></p></li><li><p>在一条活动线程中，一个时间点上，只会有一个活动的栈帧。即只有当前正在执行的方法的栈帧（栈顶栈帧）是有效的。这个栈帧被称为<strong>当前栈帧(Current Frame)</strong>, 与当前栈帧相对应的方法就是<strong>当前方法(Current Method)</strong>，定义这个方法的类就是<strong>当前类(Current Class)</strong></p></li><li><p>执行引擎运行的所有字节码指令只针对当前栈帧进行操作。</p></li><li><p>如果在该方法中调用了其他方法，对应的新的栈帧会被创建出来，放在栈的顶端，成为新的当前帧。</p></li></ul><p><img src="../jvm-sgg4/004.png" alt=""></p><ul><li><p><strong>不同线程中所包含的栈帧是不允许存在相互引用的</strong>，即不可能在一个栈帧之中引用另外一个线程的栈帧。</p></li><li><p>如果当前方法调用了其他方法，方法返回之际，当前栈帧会传回此方法的执行结果给前一个栈帧，接着，虚拟机会丢弃当前栈帧，使得前一个栈帧重新成为当前栈帧。</p></li><li><p>Java 方法有两种返回函数的方式。<u>一种是正常的函数返回，使用 return 指令。另一种是方法执行中出现未捕获处理的异常，以抛出异常的方式结束。但不管使用哪种方式，都会导致栈帧被弹出。</u></p></li></ul><h3 id="栈帧的内部结构">栈帧的内部结构</h3><p>每个栈帧中存储着：</p><ul><li><p><strong>局部变量表(Local Variables)</strong></p></li><li><p><strong>操作数栈(Operand Stack)(或表达式栈)</strong></p></li><li><p>动态链接(Dynamic Linking)(或指向运行时常量池的方法引用)</p></li><li><p>方法返回地址(Return Address)(或方法正常退出或者异常退出的定义)</p></li><li><p>一些附加信息</p></li></ul><p><img src="../jvm-sgg4/005.png" alt=""></p><p><img src="../jvm-sgg4/006.png" alt=""></p><h2 id="3-局部变量表👍">3-局部变量表👍</h2><h3 id="概念">概念</h3><ul><li><p>局部变量表(<code>Local Variables</code>)也被称之为局部变量数组或本地变量表</p></li><li><p><strong>定义为一个数字数组，主要用于存储方法参数和定义在方法体内的局部变量</strong>，这些数据类型包括各类基本数据类型、对象引用（reference），以及 returnAddress 返回值类型。</p></li></ul><h3 id="特点">特点</h3><ul><li><p>由于局部变量表是建立在线程的栈上，是线程的私有数据，因此<strong>不存在数据安全问题</strong></p></li><li><p><u>局部变量表所需的容量大小是在编译期确定下来的</u>，并保存在方法的 Code 属性的 <strong>maximum local variables</strong> 数据项中。在方法运行期间是不会改变局部变量表的大小的。</p></li></ul><p><img src="../jvm-sgg4/007.png" alt=""></p><ul><li><p>**方法嵌套调用的次数由栈的大小决定。一般来说，栈越大，方法嵌套调用次数越多。**对一个函数而言，它的参数和局部变量越多，使得局部变量表膨胀，它的栈帧就越大，以满足方法调用所需传递的信息增大的需求。进而函数调用就会占用更多的栈空间，导致其嵌套调用次数就会减少。</p></li><li><p>**局部变量表中的变量只在当前方法调用中有效。**在方法执行时，虚拟机通过使用局部变量表完成参数值到参数变量列表的传递过程。<strong>当方法调用结束后，随着方法栈帧的销毁，局部变量表也会随之销毁。</strong></p></li></ul><h3 id="案例说明⭐">案例说明⭐</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocalVariablesTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">LocalVariablesTest</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalVariablesTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        test<span class="token punctuation">.</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="../jvm-sgg4/008.png" alt=""></p><h3 id="关于Slot的理解">关于Slot的理解</h3><ul><li><p>参数值的存放总是从局部变量数组索引 0 的位置开始, 到数组长度 -1 的索引结束</p></li><li><p>局部变量表，<strong>最基本的存储单元是Slot（变量槽）</strong></p></li><li><p>局部变量表中存放编译期可知的各种基本数据类型(8种), 引用类型(reference), returnAddress 类型的变量</p></li><li><p>在局部变量表里, <strong>32 位以内的类型只占用一个 slot</strong>(包括returnAddress类型), <strong>64 位的类型占用两个 slot</strong>(long 和 double)</p><ul><li><p>byte、short、char 在储存前被转换为 int, boolean 也被转换为 int, 0 表示 false, 非 0 表示 true</p></li><li><p>long 和 double 则占据两个 Slot</p></li></ul></li><li><p>JVM 会为局部变量表中的每一个 Slot 都分配一个访问索引，通过这个索引即可成功访问到局部变量表中指定的局部变量值</p></li><li><p>当一个实例方法被调用的时候，它的方法参数和方法体内部定义的局部变量将会<strong>按照顺序被复制</strong>到局部变量表中的每一个slot上</p></li><li><p><strong>如果需要访问局部变量表中一个 64bit 的局部变量值时, 只需要使用前一个索引即可</strong>. (比如: 访问 long 或 double 类型变量)</p></li><li><p>如果当前帧是由构造方法或者实例方法创建的, 那么<strong>该对象引用this 将会存放在 index 为 0 的 Slot 处</strong>, 其余的参数按照参数表顺序继续排列. (this 也相当于一个变量)❗</p></li></ul><p><img src="../jvm-sgg4/010.png" alt="非静态方法Slot"></p><img src="../jvm-sgg4/009.png" alt="各个数据类型占据Slot大小" style="zoom:50%;" /><h3 id="Slot的重复利用🔖">Slot的重复利用🔖</h3><p><strong>栈帧中的局部变量表中的槽位是可以重用的</strong>，如果一个局部变量过了其作用域，那么在其作用域之后申明新的局部变量变就很有可能会复用过期局部变量的槽位，从而<strong>达到节省资源的目的</strong></p><p><img src="../jvm-sgg4/011.png" alt=""></p><h3 id="举例-静态变量与局部变量的对比🔖">举例: 静态变量与局部变量的对比🔖</h3><p>变量的分类</p><blockquote><p>按照数据类型:</p><ol><li>基本数据类型</li><li>引用数据类型</li></ol><p>按照在类中声明的位置:</p><ol><li><p>成员变量: 在使用前, 经过默认初始化赋值</p><ul><li><p>类变量(static): linking 的 prepare 阶段: 给类变量默认赋值 &gt;&gt;&gt;  initial 阶段：给类变量显式赋值即静态代码块赋值</p></li><li><p>实例变量: 随着对象的创建, 会在堆空间中分配实例变量空间, 并进行默认赋值</p></li></ul></li><li><p>局部变量: 在使用前, 必须要进行显示赋值的! 否则编译不通过</p></li></ol></blockquote><h3 id="补充说明">补充说明</h3><ul><li><p>在栈帧中，与性能调优关系最为密切的部分就是前面提到的局部变量表。在方法执行时，虚拟机使用局部变量表完成方法的传递。</p></li><li><p><strong>局部变量表中的变量也是重要的垃圾回收根节点，只要被局部变量表中直接或间接引用的对象都不会被回收。</strong>(可达性分析)</p></li></ul><h2 id="4-操作数栈-理论">4-操作数栈(理论)</h2><p>(Operand Stack)</p><ul><li><p>每一个独立的栈帧除了包含局部变量表以外, 还包含一个<strong>后进先出</strong>(Last-In-First-Out)的 操作数栈, 也可以称之为<strong>表达式栈</strong>(Expression Stack)</p></li><li><p>操作数栈，在方法执行过程中, <strong>根据字节码指令，往栈中写入数据或提取数据</strong>, 即入栈(push)/出栈(pop)</p><ul><li><p>某些字节码指令将值压入操作数栈, 其余的字节码指令将操作数取出栈. 使用它们后再把结果压入栈</p></li><li><p>比如: 执行复制、交换、求和等操作</p></li></ul></li></ul><p><img src="../jvm-sgg4/012.png" alt=""></p><h3 id="作用-2">作用</h3><ul><li><p>操作数栈，<strong>主要用于保存计算过程的中间结果，同时作为计算过程中变量临时的存储空间</strong>。</p></li><li><p>操作数栈就是 JVM 执行引擎的一个工作区，当一个方法刚开始执行的时候，一个新的栈帧也会随之被创建出来，<strong>这时方法的操作数栈是空的</strong>。</p></li><li><p>每一个操作数栈都会拥有一个明确的栈深度用于存储数值，其所需的最大深度在编译期就定义好了，保存在方法的 Code 属性中，为 <strong>maxstack</strong> 的值。</p></li><li><p>栈中的任何一个元素都是可以任意的Java数据类型</p><ul><li><p>32bit 的类型占用一个栈单位深度</p></li><li><p>64bit 的类型占用两个栈单位深度</p></li></ul></li><li><p>操作数栈<strong>并非采用访问索引的方式来进行数据访问</strong>的，而是只能通过标准的入栈(push)和出栈(pop)操作来完成一次数据访问</p></li><li><p><strong>如果被调用的方法带有返回值的话，其返回值将会被压入当前栈帧的操作数栈中</strong>，并更新 PC 寄存器中下一条需要执行的字节码指令。(图4-2)</p></li><li><p>操作数栈中元素的数据类型必须与字节码指令的序列严格匹配，这由编译器在编译器期间进行验证，同时在类加载过程中的类检验阶段的数据流分析阶段要再次验证。</p></li><li><p>另外，<strong>我们说 Java 虚拟机的解释引擎是基于栈的执行引擎，其中的栈指的就是操作数栈</strong>。</p></li></ul><h2 id="5-操作数栈-代码追踪-❗">5-操作数栈(代码追踪)❗</h2><p>示例代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAddOperation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//byte, short, char, boolean: 都以int型来保存</span>    <span class="token keyword">byte</span> i <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="../jvm-sgg4/013.png" alt="图4-1"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> m <span class="token operator">+</span> n<span class="token punctuation">;</span>    <span class="token keyword">return</span> k<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//获取上一个Frame Stack返回的结果, 并保存在操作数栈中</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="../jvm-sgg4/014.png" alt="图4-2"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * i++ 和 ++i的区别  */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//第1类</span>    <span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    i1<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token operator">++</span>i2<span class="token punctuation">;</span>    <span class="token comment">//第2类</span>    <span class="token keyword">int</span> i3<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i4 <span class="token operator">=</span> i3<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i5 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i6 <span class="token operator">=</span> <span class="token operator">++</span>i5<span class="token punctuation">;</span>    <span class="token comment">//第3类</span>    <span class="token keyword">int</span> i7 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    i7 <span class="token operator">=</span> i7<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i8 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    i8 <span class="token operator">=</span> <span class="token operator">++</span>i8<span class="token punctuation">;</span>    <span class="token comment">//第4类问题</span>    <span class="token keyword">int</span> i9 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i10 <span class="token operator">=</span> i9<span class="token operator">++</span> <span class="token operator">+</span> <span class="token operator">++</span>i9<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="../jvm-sgg4/015.png" alt="i++操作"></p><h2 id="6-栈顶缓存技术-了解">6-栈顶缓存技术(了解)</h2><blockquote><p>Top Of Stack Cashing</p></blockquote><ul><li>前面提过，基于栈式架构的虚拟机所使用的零地址指令更加紧凑，但完成一项操作的时候必然需要使用更多的入栈和出栈指令，这同时也就意味着将需要更多的指令分派(instruction dispatch)次数(也就是你会发现指令很多)和导致内存读/写次数多，效率不高。</li><li>由于操作数是存储在内存中的，因此频繁地执行内存读/写操作必然会影响执行速度。为了解决这个问题，HotSpot JVM 的设计者们提出了栈顶缓存（Tos，Top-of-Stack Cashing）技术，<strong>将栈顶元素全部缓存在物理CPU的寄存器中，以此降低对内存的读/写次数，提升执行引擎的执行效率。</strong></li></ul><h2 id="7-动态链接">7-动态链接</h2><ul><li>每一个栈帧内部都包含<strong>一个指向运行时常量池中该栈帧所属方法的引用</strong>. 包含这个引用的目的就是<strong>为了支持当前方法的代码能够实现动态链接</strong><code>(Dynamic Linking)</code>, 比如: invokedynamic 指令</li><li>在Java源文件被编译到字节码文件中时，所有的变量和方法引用都作为符号引用（Symbolic Reference）保存在class文件的常量池里。比如：描述一个方法调用了另外的其他方法时，就是通过常量池中指向方法的符号引用来表示的，那么<strong>动态链接的作用就是为了将这些符号引用转换为调用方法的直接引用</strong></li></ul><p><img src="../jvm-sgg4/016.png" alt=""></p><h2 id="8-方法的调用-解析与分派">8-方法的调用: 解析与分派</h2><p>在 JVM 中，将符号引用转换为调用方法的直接引用与方法的绑定机制相关</p><ul><li><strong>静态链接</strong>：</li></ul><p>当一个字节码文件被装载进JVM内部时，如果被调用的<strong>目标方法在编译期可知</strong>，且运行期保持不变时，这种情况下将调用方法的符号引用转换为直接引用的过程称之为静态链接</p><ul><li><strong>动态链接</strong>：</li></ul><p>如果被调用的方法在编译期无法被确定下来，也就是说，只能够在程序运行期将调用的方法的符号转换为直接引用，由于这种引用转换过程具备动态性，因此也被称之为动态链接。</p><h3 id="早期绑定与晚期绑定">早期绑定与晚期绑定</h3><p>静态链接和动态链接对应的方法的绑定机制为：早期绑定(Early Binding)和晚期绑定(Late Binding)。<strong>绑定是一个字段、方法或者类在符号引用被替换为直接引用的过程</strong>，这仅仅发生一次。</p><ul><li><strong>早期绑定</strong></li></ul><p>早期绑定就是指被调用的目标方法如果在编译期可知，且运行期保持不变时，即可将这个方法与所属的类型进行绑定，这样一来，由于明确了被调用的目标方法究竟是哪一个，因此也就<strong>可以使用静态链接的方式将符号引用转换为直接引用</strong>。</p><ul><li><strong>晚期绑定</strong></li></ul><p>如果被调用的方法在编译期无法被确定下来，<strong>只能够在程序运行期根据实际的类型绑定相关的方法</strong>，这种绑定方式也就被称之为晚期绑定。</p><h3 id="多态与绑定">多态与绑定</h3><ul><li><p>随着高级语言的横空出世，类似于 Java 一样的基于面向对象的编程语言如今越来越多，尽管这类编程语言在语法风格上存在一定的差别，但是它们彼此之间始终保持着一个共性，那就是都支持封装、继承和多态等面向对象特性，既然这一类的编程语言具备多态特性，那么自然也就具备早期绑定和晚期绑定两种绑定方式。</p></li><li><p>Java 中任何一个普通的方法其实都具备虚函数的特征，它们相当于 C++ 语言中的虚函数（C++ 中则需要使用关键字 virtual 来显式定义）。如果在 Java 程序中不希望某个方法拥有虚函数的特征时，则可以使用关键字 final 来标记这个方法。</p></li></ul><h4 id="非虚方法">非虚方法</h4><ul><li>如果方法在编译期就确定了具体的调用版本，这个版本在运行时是不可变的。这样的方法称为<strong>非虚方法</strong>。</li><li>静态方法、私有方法、final 方法、实例构造器、父类方法都是非虚方法。</li><li>其他方法称为虚方法。</li></ul><h4 id="虚拟机中调用方法的指令">虚拟机中调用方法的指令</h4><ul><li><p>**普通指令: **</p><ol><li><p>invokestatic: 调用静态方法，解析阶段确定唯一方法版本</p></li><li><p>invokespecial: 调用<code>&lt;init&gt;</code>方法、私有及父类方法，解析阶段确定唯一方法版本</p></li><li><p>invokevirtual: 调用所有虚方法</p></li><li><p>invokeinterface: 调用接口方法</p></li></ol></li><li><p><strong>动态调用指令</strong><br>5. invokedynamic：动态解析出需要调用的方法，然后执行</p></li></ul><p>前四条指令固化在虚拟机内部，方法的调用执行不可人为干预。而invokedynamic指令则支持由用户确定方法版本。其中 <strong>invokestatic 指令和 invokespecial 指令调用的方法称为非虚方法，其余的（final修饰的除外）称为虚方法</strong>。</p><h4 id="举例">举例</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//invokestatic 子父类方法确定,非虚方法</span>    <span class="token function">showStatic</span><span class="token punctuation">(</span><span class="token string">"atguigu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//invokestatic 子父类方法确定,非虚方法</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">showStatic</span><span class="token punctuation">(</span><span class="token string">"good!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//invokespecial 非虚方法</span>    <span class="token function">showPrivate</span><span class="token punctuation">(</span><span class="token string">"hello!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//invokespecial 非虚方法</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">showCommon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//invokevirtual</span>    <span class="token function">showFinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//因为此方法声明有final，不能被子类重写，所以也认为此方法是非虚方法。</span>    <span class="token comment">//虚方法如下：</span>    <span class="token comment">// invokevirtual  没有显示的加super.，编译器认为你可能调用子类的showCommon(即使son子类没有重写，也会认为)，所以编译期间确定不下来，就是虚方法。</span>    <span class="token function">showCommon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">MethodInterface</span> in <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">//invokeinterface</span>    in<span class="token punctuation">.</span><span class="token function">methodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="关于-invokedynamic-指令">关于 invokedynamic 指令</h4><ul><li><p>JVM 字节码指令集一直比较稳定，一直到 Java7 中才增加了一个 invokedynamic 指令，这是 <strong>Java 为了实现【动态类型语言】支持而做的一种改进</strong>。</p></li><li><p>但是在 Java7 中并没有提供直接生成 invokedynamic 指令的方法，需要借助ASM这种底层字节码工具来产生 invokedynamic 指令。<strong>直到 Java8 的 Lambda 表达式的出现，invokedynamic 指令的生成，在 Java 中才有了直接的生成方式</strong>。</p></li><li><p>Java7 中增加的动态语言类型支持的本质是对 Java 虚拟机规范的修改，而不是对 Java 语言规则的修改，这一块相对来讲比较复杂，增加了虚拟机中的方法调用，最直接的受益者就是运行在 Java 平台的动态语言的编译器。</p></li></ul><p>动态语言和静态语言</p><ul><li>动态类型语言和静态类型语言两者的区别就在于<strong>对类型的检查是在编译期还是在运行期</strong>，满足前者就是静态类型语言，反之是动态类型语言。</li><li>说的再直白一点就是，<strong>静态类型语言是判断变量自身的类型信息；动态类型语言是判断变量值的类型信息</strong>, 变量没有类型信息，变量值才有类型信息，这是动态语言的一个重要特征。</li></ul><pre class="line-numbers language-null" data-language="null"><code class="language-null">Java：String info &#x3D; &quot;mogu blog&quot;;     (Java是静态类型语言的，会先编译就进行类型检查)JS：var name &#x3D; &quot;shkstart&quot;;    var name &#x3D; 10;（运行时才进行检查）Python: info &#x3D; 130.5 (运行时才检查)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="方法重写的本质">方法重写的本质</h3><ol><li>找到操作数栈顶的第一个元素所执行的对象的实际类型，记作 C。</li><li>如果在类型 C 中找到与常量中的描述符合简单名称都相符的方法，则进行访问权限校验。<ul><li>如果通过则返回这个方法的直接引用，查找过程结束</li><li>如果不通过，则返回<code>java.lang.IllegalAccessError </code>异常</li></ul></li><li>否则，按照继承关系从下往上依次对C的各个父类进行第2步的搜索和验证过程。</li><li>如果始终没有找到合适的方法，则抛出<code>java.lang.AbstractMethodError</code>异常。</li></ol><p><strong>IllegalAccessError介绍</strong></p><p>程序试图访问或修改一个属性或调用一个方法，这个属性或方法，你没有权限访问。一般的，这个会引起编译器异常。这个错误如果发生在运行时，就说明一个类发生了不兼容的改变。</p><h3 id="虚方法表">虚方法表</h3><ul><li><p>在面向对象的编程中，会很频繁的使用到<strong>动态分派</strong>，如果在每次动态分派的过程中都要重新在类的方法元数据中搜索合适的目标的话就可能影响到执行效率。因此，为了提高性能，<strong>JVM采用在类的方法区建立一个虚方法表（virtual method table）来实现，非虚方法不会出现在表中。使用索引表来代替查找</strong>。【上面动态分派的过程，我们可以看到如果子类找不到，还要从下往上找其父类，非常耗时】</p></li><li><p>每个类中都有一个虚方法表，表中存放着各个方法的实际入口。</p></li><li><p>虚方法表是什么时候被创建的呢？虚方法表会在类加载的链接阶段被创建并开始初始化，类的变量初始值准备完成之后，JVM会把该类的虚方法表也初始化完毕。</p></li></ul><p><strong>举例</strong></p><p><img src="../jvm-sgg4/017.png" alt=""></p><h2 id="9-方法返回地址">9-方法返回地址</h2><blockquote><p>(return address)</p></blockquote><ul><li><p>存放调用该方法的pc寄存器的值。</p></li><li><p>一个方法的结束，有两种方式：</p><ul><li>正常执行完成</li><li>出现未处理的异常，非正常退出</li></ul></li><li><p>无论通过哪种方式退出，在方法退出后都返回到该方法被调用的位置。方法正常退出时，<strong>调用者的pc计数器的值作为返回地址，即调用该方法的指令的下一条指令的地址</strong>。而通过异常退出的，返回地址是要通过异常表来确定，栈帧中一般不会保存这部分信息。</p></li><li><p>本质上，方法的退出就是当前栈帧出栈的过程。此时，需要恢复上层方法的局部变量表、操作数栈、将返回值压入调用者栈帧的操作数栈、设置 PC 寄存器值等，让调用者方法继续执行下去。</p></li><li><p>正常完成出口和异常完成出口的区别在于：通过异常完成出口退出的不会给他的上层调用者产生任何的返回值。</p></li></ul><p>当一个方法开始执行后，只有两种方式可以退出这个方法</p><p><strong>正常退出</strong></p><ol><li>执行引擎遇到任意一个方法返回的字节码指令（return），会有返回值传递给上层的方法调用者，简称<strong>正常完成出口</strong>；</li></ol><ul><li>一个方法在正常调用完成之后，究竟需要使用哪一个返回指令，还需要根据方法返回值的实际数据类型而定。</li><li>在字节码指令中，返回指令包含：<ul><li><p>ireturn：当返回值是boolean，byte，char，short和int类型时使用</p></li><li><p>lreturn：Long类型</p></li><li><p>freturn：Float类型</p></li><li><p>dreturn：Double类型</p></li><li><p>areturn：引用类型</p></li><li><p>return：返回值类型为 void 的方法、实例初始化方法、类和接口的初始化方法</p></li></ul></li></ul><p><strong>异常退出</strong></p><ol start="2"><li><p>在方法执行过程中遇到异常（Exception），并且这个异常没有在方法内进行处理，也就是只要在本方法的异常表中没有搜索到匹配的异常处理器，就会导致方法退出，简称<strong>异常完成出口</strong>。</p><p>方法执行过程中，抛出异常时的异常处理，存储在一个异常处理表，方便在发生异常的时候找到处理异常的代码</p></li></ol><p><img src="../jvm-sgg4/018.png" alt="异常表"></p><h2 id="10-一些附加信息-可选">10-一些附加信息(可选)</h2><p>(可选)栈帧中还允许携带与Java虚拟机实现相关的一些附加信息。例如：对程序调试提供支持的信息。</p><h2 id="11-栈的相关面试题">11-栈的相关面试题</h2><h3 id="举例栈溢出的情况？">举例栈溢出的情况？</h3><p>SOF（StackOverflowError），栈大小分为固定的，和动态变化。如果是固定的就可能出现 StackOverflowError。如果是动态变化的，内存不足时就可能出现 OOM</p><h3 id="调整栈大小，就能保证不出现溢出么？">调整栈大小，就能保证不出现溢出么？</h3><p>不能保证不溢出，只能保证 SOF 出现的几率小</p><h3 id="分配的栈内存越大越好么？">分配的栈内存越大越好么？</h3><p>不是，一定时间内降低了 OOM 概率，但是会挤占其它的线程空间，因为整个虚拟机的内存空间是有限的</p><h3 id="垃圾回收是否涉及到虚拟机栈？">垃圾回收是否涉及到虚拟机栈？</h3><p>不会</p><table><thead><tr><th>位置</th><th>是否有Error</th><th>是否存在GC</th></tr></thead><tbody><tr><td>PC计数器</td><td>无</td><td>不存在</td></tr><tr><td>虚拟机栈</td><td>有，SOF</td><td>不存在</td></tr><tr><td>本地方法栈(在HotSpot的实现中和虚拟机栈一样)</td><td></td><td></td></tr><tr><td>堆</td><td>有，OOM</td><td>存在</td></tr><tr><td>方法区</td><td>有</td><td>存在</td></tr></tbody></table><h3 id="方法中定义的局部变量是否线程安全？">方法中定义的局部变量是否线程安全？</h3><p><strong>具体问题具体分析</strong></p><ul><li>如果只有一个线程才可以操作此数据，则必是线程安全的。</li><li>如果有多个线程操作此数据，则此数据是共享数据。如果不考虑同步机制的话，会存在线程安全问题。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author Dee * @date 2023/12/17 * &lt;p>Description: 线程安全demo */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringBuilderTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment">//s1的声明方式是线程安全的（只在方法内部用了）</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//StringBuilder:线程不安全</span>        <span class="token class-name">StringBuilder</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//...</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//sBuilder的操作过程：是线程不安全的（作为参数传进来，可能被其它线程操作）</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token class-name">StringBuilder</span> sBuilder<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        sBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//...</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//s1的操作：是线程不安全的（有返回值，可能被其它线程操作）</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">StringBuilder</span> <span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">StringBuilder</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s1<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//s1的操作：是线程安全的（s1自己消亡了，最后返回的只是s1.toString的一个新对象）</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">method4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">StringBuilder</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StringBuilder</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">method2</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM-03-运行时数据区概述及程序计数器</title>
      <link href="/2023/12/16/jvm-sgg3/"/>
      <url>/2023/12/16/jvm-sgg3/</url>
      
        <content type="html"><![CDATA[<h1>运行时数据区概述及线程</h1><h2 id="1-运行时数据区结构">1-运行时数据区结构</h2><p><img src="../jvm-sgg3/001.png" alt=""></p><p>当我们通过前面的：类的加载 --&gt; 验证 --&gt; 准备 --&gt; 解析 –&gt; 初始化，这几个阶段完成后，就会用到执行引擎对我们的类进行使用，同时执行引擎将会使用到我们运行时数据区</p><p><img src="../jvm-sgg3/002.png" alt=""></p><h3 id="内存">内存</h3><ol><li><p>内存是非常重要的系统资源，是硬盘和 CPU 的中间仓库及桥梁，承载着操作系统和应用程序的实时运行。JVM 内存布局规定了 Java 在运行过程中内存申请、分配、管理的策略，保证了JVM的高效稳定运行。<strong>不同的 JVM 对于内存的划分方式和管理机制存在着部分差异</strong>。结合 JVM 虚拟机规范，来探讨一下经典的 JVM 内存布局。</p></li><li><p>我们通过磁盘或者网络 IO 得到的数据，都需要先加载到内存中，然后 CPU 从内存中获取数据进行读取，也就是说内存充当了 CPU 和磁盘之间的桥梁</p></li></ol><p><img src="../jvm-sgg3/004.png" alt="阿里巴巴手册JDK8"></p><h3 id="线程间的内存空间">线程间的内存空间</h3><p>Java 虚拟机定义了若干种程序运行期间会使用到的运行时数据区：其中有一些会随着虚拟机启动而创建，随着虚拟机退出而销毁。另外一些则是与线程一一对应的，这些与线程对应的数据区域会随着线程开始和结束而创建和销毁。</p><p>灰色的为单独线程私有的，红色的为多个线程共享的。即：</p><ul><li>线程独有：独立包括程序计数器、栈、本地方法栈</li><li>线程间共享：堆、堆外内存（永久代或元空间、代码缓存）</li></ul><img src="../jvm-sgg3/005.png" style="zoom: 70%;" /><h2 id="2-线程">2-线程</h2><ul><li><p>线程是一个程序里的运行单元。JVM允许一个应用有多个线程并行的执行</p></li><li><p><strong>在 Hotspot JVM 里，每个线程都与操作系统的本地线程直接映射</strong></p><ul><li>当一个 Java 线程准备好执行以后，此时一个操作系统的本地线程也同时创建。Java 线程执行终止后，本地线程也会回收</li></ul></li><li><p>操作系统负责将线程安排调度到任何一个可用的 CPU 上。一旦本地线程初始化成功，它就会调用 Java 线程中的 run() 方法</p></li></ul><h3 id="JVM系统线程">JVM系统线程</h3><ul><li><p>如果你使用 jconsole 或者是任何一个调试工具，都能看到在后台有许多线程在运行。这些后台线程不包括调用<code>public static void main(String[])</code>的 main 线程以及所有这个 main 线程自己创建的线程。</p></li><li><p>这些主要的后台系统线程在 Hotspot JVM 里主要是以下几个：</p><ul><li><p><strong>虚拟机线程</strong>：这种线程的操作是需要 JVM 达到安全点才会出现。这些操作必须在不同的线程中发生的原因是他们都需要 JVM 达到安全点，这样堆才不会变化。这种线程的执行类型括&quot;stop-the-world&quot;的垃圾收集，线程栈收集，线程挂起以及偏向锁撤销</p></li><li><p><strong>周期任务线程</strong>：这种线程是时间周期事件的体现（比如中断），他们一般用于周期性操作的调度执行</p></li><li><p><strong>GC线程</strong>：这种线程对在 JVM 里不同种类的垃圾收集行为提供了支持</p></li><li><p><strong>编译线程</strong>：这种线程在运行时会将字节码编译成到本地代码</p></li><li><p><strong>信号调度线程</strong>：这种线程接收信号并发送给 JVM，在它内部通过调用适当的方法进行处理</p></li></ul></li></ul><h1>程序计数器(PC寄存器)</h1><h2 id="PC-Register介绍">PC Register介绍</h2><p><img src="../jvm-sgg3/006.png" alt=""></p><p>JVM 中的程序计数寄存器（Program Counter Register）中，Register 的命名源于 CPU 的寄存器，<strong>寄存器存储指令相关的现场信息</strong>。CPU 只有把数据装载到寄存器才能够运行。</p><p>这里，并非是广义上所指的物理寄存器，或许将其翻译为 PC 计数器（或指令计数器）会更加贴切（也称为程序钩子），并且也不容易引起一些不必要的误会。<strong>JVM 中的PC寄存器是对物理 PC 寄存器的一种抽象模拟</strong>。</p><h2 id="作用">作用</h2><p>PC 寄存器用来存储指向下一条指令的地址，也即将要执行的指令代码。由执行引擎读取下一条指令，并执行该指令。</p><p><img src="../jvm-sgg3/007.png" alt=""></p><ul><li><p>它是一块很小的内存空间，几乎可以忽略不记。也是运行速度最快的存储区域。</p></li><li><p>在 JVM 规范中，每个线程都有它自己的程序计数器，是线程私有的，生命周期与线程的生命周期保持一致。</p></li><li><p>任何时间一个线程都只有一个方法在执行，也就是所谓的<strong>当前方法</strong>。程序计数器会存储当前线程正在执行的Java方法的JVM指令地址；或者，如果是在执行 native 方法，则是未指定值（undefned）。</p></li><li><p>它是<strong>程序控制流</strong>的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。</p></li><li><p>字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令。</p></li><li><p>它是<strong>唯一一个</strong>在 Java 虚拟机规范中没有规定任何 OutofMemoryError 情况的区域。</p></li></ul><h2 id="举例">举例</h2><p><img src="../jvm-sgg3/008.png" alt="PC寄存器举例"></p><h2 id="两个常见问题">两个常见问题</h2><p>使用 PC 寄存器存储字节码指令地址有什么用呢？</p><p>为什么使用 PC 寄存器来记录当前线程的执行地址呢？</p><blockquote><p>因为 CPU 需要不停的切换各个线程，这时候切换回来以后，就得知道接着从哪开始继续执行</p><p>JVM 的字节码解释器就需要通过改变 PC 寄存器的值来明确下一条应该执行什么样的字节码指令</p></blockquote><p><img src="../jvm-sgg3/009.png" alt=""></p><p>PC 寄存器为什么被设定为私有的？</p><blockquote><ul><li><p>我们都知道所谓的多线程在一个特定的时间段内只会执行其中某一个线程的方法，CPU 会不停地做任务切换，这样必然导致经常中断或恢复，如何保证分毫无差呢？<strong>为了能够准确地记录各个线程正在执行的当前字节码指令地址，最好的办法自然是为每一个线程都分配一个 PC 寄存器</strong>，这样一来各个线程之间便可以进行独立计算，从而不会出现相互干扰的情况。</p></li><li><p>由于 CPU 时间片轮限制，众多线程在并发执行过程中，任何一个确定的时刻，一个处理器或者多核处理器中的一个内核，只会执行某个线程中的一条指令。</p></li><li><p>这样必然导致经常中断或恢复，如何保证分毫无差呢？每个线程在创建后，都会产生自己的程序计数器和栈帧，程序计数器在各个线程之间互不影响。</p></li></ul></blockquote><h2 id="CPU-时间片">CPU 时间片</h2><ul><li><p>CPU 时间片即 CPU 分配给各个程序的时间，每个线程被分配一个时间段，称作它的时间片。</p></li><li><p>在宏观上：我们可以同时打开多个应用程序，每个程序并行不悖，同时运行。</p></li><li><p>但在微观上：由于只有一个 CPU，一次只能处理程序要求的一部分，如何处理公平，一种方法就是引入时间片，<strong>每个程序轮流执行</strong>。</p></li></ul><img src="../jvm-sgg3/010.png" alt="并发与并行" style="zoom:33%;" />]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM-02-类加载子系统</title>
      <link href="/2023/12/16/jvm-sgg2/"/>
      <url>/2023/12/16/jvm-sgg2/</url>
      
        <content type="html"><![CDATA[<h1>类加载子系统</h1><h2 id="1-内存结构概述">1-内存结构概述</h2><p>简图</p><p><img src="../jvm-sgg2/001.png" alt=""></p><p>详图</p><p><img src="../jvm-sgg2/002.png" alt=""></p><p>注意：方法区只有 HotSpot 虚拟机有，J9，JRockit 都没有</p><p>如果自己想手写一个 Java 虚拟机的话，主要考虑哪些结构呢？</p><ol><li>类加载器</li><li>执行引擎</li></ol><h3 id="类加载器子系统">类加载器子系统</h3><ol><li><p>类加载器子系统负责从文件系统或者网络中加载Class文件，class文件在文件开头有特定的文件标识。</p></li><li><p>ClassLoader 只负责 class 文件的加载，至于它是否可以运行，则由 Execution Engine 决定。</p></li><li><p><strong>加载的类信息存放于一块称为方法区的内存空间</strong>。除了类的信息外，方法区中还会存放运行时常量池信息，可能还包括字符串字面量和数字常量（这部分常量信息是Class文件中常量池部分的内存映射）</p></li></ol><p><img src="../jvm-sgg2/003.png" alt=""></p><h3 id="类加载器ClassLoader角色">类加载器ClassLoader角色</h3><ol><li>class file 存在于本地硬盘上，可以理解为设计师画在纸上的模板，而最终这个模板在执行的时候是要加载到JVM当中来根据这个文件实例化出n个一模一样的实例。</li><li>class file 加载到 JVM 中，被称为 DNA 元数据模板（在下图中就是内存中的Car Class），放在方法区。</li><li>在 .class 文件 –&gt; JVM –&gt; 最终成为元数据模板，此过程就要一个运输工具（类装载器Class Loader），扮演一个快递员的角色。</li></ol><p><img src="../jvm-sgg2/004.png" alt=""></p><h2 id="2-类加载过程">2-类加载过程</h2><h3 id="概述">概述</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloLoader</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"谢谢ClassLoader加载我...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你的大恩大德，我下辈子再报！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它的加载过程是怎么样的呢?</p><ul><li>执行 main() 方法（静态方法）就需要先加载main方法所在类 HelloLoader</li><li>加载成功，则进行链接、初始化等操作。完成后调用 HelloLoader 类中的静态方法 main</li><li>加载失败则抛出异常</li></ul><p><img src="../jvm-sgg2/005.png" alt=""></p><p>完整的流程图如下所示：</p><p><img src="../jvm-sgg2/006.png" alt=""></p><h3 id="加载-Loading-阶段">加载(Loading)阶段</h3><p><strong>加载：</strong></p><ol><li><p>通过一个类的全限定名获取定义此类的二进制字节流</p></li><li><p>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构</p></li><li><p><strong>在内存中生成一个代表这个类的 java.lang.Class 对象</strong>，作为方法区这个类的各种数据的访问入口</p></li></ol><p><strong>加载class文件的方式：</strong></p><ol><li>从本地系统中直接加载</li><li>通过网络获取，典型场景：Web Applet</li><li>从 zip 压缩包中读取，成为日后 jar、war 格式的基础</li><li>运行时计算生成，使用最多的是：动态代理技术</li><li>由其他文件生成，典型场景：JSP 应用从专有数据库中提取 .class 文件，比较少见</li><li>从加密文件中获取，典型的防 Class 文件被反编译的保护措施</li></ol><h3 id="链接-Linking-阶段">链接(Linking)阶段</h3><h4 id="验证-Verify">验证(Verify)</h4><ol><li>目的在于确保 Class 文件的字节流中包含信息符合当前虚拟机要求，保证被加载类的正确性，不会危害虚拟机自身安全</li><li>主要包括四种验证，文件格式验证，元数据验证，字节码验证，符号引用验证。</li></ol><h4 id="准备-Prepare">准备(Prepare)</h4><ol><li>为类变量（static变量）分配内存并且设置该类变量的默认初始值，即零值</li><li><strong>这里不包含用 final 修饰的 static，因为 final 在编译的时候就会分配好了默认值，准备阶段会显式初始化</strong></li><li><strong>注意：这里不会为实例变量分配初始化</strong>，类变量会分配在方法区中，而实例变量是会随着对象一起分配到 Java 堆中</li></ol><h4 id="解析-Resolve">解析(Resolve)</h4><ol><li><p><strong>将常量池内的符号引用转换为直接引用的过程</strong></p></li><li><p>事实上，解析操作往往会伴随着JVM在执行完初始化之后再执行</p></li><li><p>符号引用就是一组符号来描述所引用的目标。符号引用的字面量形式明确定义在《java虚拟机规范》的 class 文件格式中。直接引用就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄</p></li><li><p>解析动作主要针对类或接口、字段、类方法、接口方法、方法类型等。对应常量池中的 <code>CONSTANT_Class_info</code>、<code>CONSTANT Fieldref_info</code>、<code>CONSTANT_Methodref_info</code> 等</p></li></ol><h3 id="初始化-Initialization-阶段">初始化(Initialization)阶段</h3><ol><li><p><strong>初始化阶段就是执行类构造器方法<code>&lt;clinit&gt;()</code>的过程</strong></p></li><li><p>此方法不需定义，是 javac 编译器自动收集类中的所有<strong>类变量</strong>的赋值动作和静态代码块中的语句合并而来。也就是说，<strong>当我们代码中包含 static 变量的时候，就会有 clinit 方法</strong><img src="../jvm-sgg2/007.png" alt=""></p></li><li><p><code>&lt;clinit&gt;()</code>方法中的指令按语句在源文件中出现的顺序执行</p><p><img src="../jvm-sgg2/008.png" alt=""></p></li><li><p><code>&lt;clinit&gt;()</code>不同于类的构造器。（关联：构造器是虚拟机视角下的<code>&lt;init&gt;()</code>）</p><p><img src="../jvm-sgg2/009.png" alt=""></p></li><li><p>若该类具有父类，JVM 会保证子类的<code>&lt;clinit&gt;()</code>执行前，父类的<code>&lt;clinit&gt;()</code>已经执行完毕</p><p><img src="../jvm-sgg2/010.png" alt=""></p></li><li><p>虚拟机必须保证一个类的<code>&lt;clinit&gt;()</code>方法在多线程下被同步加锁</p><p><img src="../jvm-sgg2/011.png" alt=""></p></li></ol><h2 id="3-类加载器的分类">3-类加载器的分类</h2><ul><li><p>JVM 严格来讲支持两种类型的类加载器 。分别为引导类加载器（Bootstrap ClassLoader）和自定义类加载器（User-Defined ClassLoader）</p></li><li><p>从概念上来讲，自定义类加载器一般指的是程序中由开发人员自定义的一类类加载器，但是Java虚拟机规范却没有这么定义，而是<strong>将所有派生于抽象类ClassLoader的类加载器都划分为自定义类加载器</strong></p></li><li><p>无论类加载器的类型如何划分，在程序中我们最常见的类加载器始终只有3个，如下所示</p></li></ul><p><img src="../jvm-sgg2/012.png" alt=""></p><p><img src="../jvm-sgg2/013.png" alt=""></p><h3 id="虚拟机自带的加载器">虚拟机自带的加载器</h3><h4 id="启动类加载器">启动类加载器</h4><blockquote><p><strong>启动类加载器（引导类加载器，Bootstrap ClassLoader）</strong></p></blockquote><ol><li>这个类加载使用 C/C++ 语言实现的，嵌套在JVM内部</li><li>它用来加载Java的核心库（JAVA_HOME/jre/lib/rt.jar、resources.jar 或 sun.boot.class.path 路径下的内容），用于提供JVM自身需要的类</li><li>并不继承自 java.lang.ClassLoader，没有父加载器</li><li>加载扩展类和应用程序类加载器，并作为他们的父类加载器</li><li>出于安全考虑，Bootstrap 启动类加载器只加载包名为 java、javax、sun 等开头的类</li></ol><h4 id="扩展类加载器">扩展类加载器</h4><blockquote><p><strong>扩展类加载器（Extension ClassLoader）</strong></p></blockquote><ol><li>Java 语言编写，由 sun.misc.Launcher$ExtClassLoader 实现</li><li>派生于 ClassLoader 类</li><li>父类加载器为启动类加载器</li><li>从 java.ext.dirs 系统属性所指定的目录中加载类库，或从 JDK 的安装目录的 jre/lib/ext 子目录（扩展目录）下加载类库。如果用户创建的 JAR 放在此目录下，也会自动由扩展类加载器加载</li></ol><h4 id="系统类加载器">系统类加载器</h4><blockquote><p><strong>应用程序类加载器（也称为系统类加载器，AppClassLoader）</strong></p></blockquote><ol><li>Java 语言编写，由 sun.misc.LaunchersAppClassLoader 实现</li><li>派生于 ClassLoader 类</li><li>父类加载器为扩展类加载器</li><li>它负责加载环境变量 classpath 或系统属性 java.class.path 指定路径下的类库</li><li>该类加载是程序中默认的类加载器，一般来说，Java 应用的类都是由它来完成加载</li><li>通过 classLoader.getSystemclassLoader() 方法可以获取到该类加载器</li></ol><p><img src="../jvm-sgg2/014.png" alt=""></p><h3 id="用户自定义类加载器">用户自定义类加载器</h3><h4 id="什么时候需要自定义类加载器？">什么时候需要自定义类加载器？</h4><ol><li>隔离加载类（比如说我假设现在 Spring 框架，和 RocketMQ 有包名路径完全一样的类，类名也一样，这个时候类就冲突了。不过一般的主流框架和中间件都会自定义类加载器，实现不同的框架，中间价之间是隔离的）</li><li>修改类加载的方式</li><li>扩展加载源（还可以考虑从数据库中加载类，路由器等等不同的地方）</li><li>防止源码泄漏（对字节码文件进行解密，自己用的时候通过自定义类加载器来对其进行解密）</li></ol><h4 id="用户自定义类加载器实现步骤">用户自定义类加载器实现步骤</h4><ol><li>开发人员可以通过继承抽象类java.lang.ClassLoader类的方式，实现自己的类加载器，以满足一些特殊的需求</li><li>在JDK1.2之前，在自定义类加载器时，总会去继承ClassLoader类并重写loadClass()方法，从而实现自定义的类加载类，但是在JDK1.2之后已不再建议用户去覆盖loadClass()方法，而是建议把自定义的类加载逻辑写在findclass()方法中</li><li>在编写自定义类加载器时，如果没有太过于复杂的需求，可以直接继承URIClassLoader类，这样就可以避免自己去编写findclass()方法及其获取字节码流的方式，使自定义类加载器编写更加简洁。</li></ol><h3 id="关于ClassLoader">关于ClassLoader</h3><p>ClassLoader 类，它是一个抽象类，其后所有的类加载器都继承自ClassLoader（不包括启动类加载器）</p><p><img src="../jvm-sgg2/015.png" alt=""></p><p>sun.misc.Launcher 它是一个 Java 虚拟机的入口应用</p><p><img src="../jvm-sgg2/016.png" alt=""></p><h4 id="获取ClassLoader途径">获取ClassLoader途径</h4><p><img src="../jvm-sgg2/017.png" alt=""></p><h2 id="4-双亲委派机制">4-双亲委派机制</h2><blockquote><p>Java 虚拟机对 class 文件采用的是<strong>按需加载</strong>的方式，也就是说当需要使用该类时才会将它的 class 文件加载到内存生成 class 对象。而且加载某个类的 class 文件时，Java 虚拟机采用的是双亲委派模式，即把请求交由父类处理，它是一种任务委派模式</p></blockquote><h3 id="工作原理">工作原理:</h3><ol><li>如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行；</li><li>如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器；</li><li>如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式。</li><li>父类加载器一层一层往下分配任务，如果子类加载器能加载，则加载此类，如果将加载任务分配至系统类加载器也无法加载此类，则抛出异常</li></ol><p><img src="../jvm-sgg2/018.png" alt=""></p><p><img src="../jvm-sgg2/019.png" alt=""></p><h3 id="双亲委派机制优势">双亲委派机制优势</h3><p>通过上面的例子，我们可以知道，双亲机制可以</p><ul><li><p>避免类的重复加载</p></li><li><p>保护程序安全，防止核心API被随意篡改</p><ul><li><p>自定义类：自定义 java.lang.String 没有被加载。</p></li><li><p>自定义类：java.lang.ShkStart（报错：阻止创建 java.lang开头的类）</p></li></ul></li></ul><h3 id="沙箱安全机制">沙箱安全机制</h3><ol><li>自定义 String 类时：在加载自定义 String 类的时候会率先使用引导类加载器加载，而引导类加载器在加载的过程中会先加载jdk自带的文件（rt.jar包中java.lang.String.class），报错信息说没有 main 方法，就是因为加载的是 rt.jar 包中的 String 类。</li><li>这样可以保证对 Java 核心源代码的保护，这就是沙箱安全机制。</li></ol>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM-01-JVM与Java体系结构</title>
      <link href="/2023/12/15/jvm-sgg1/"/>
      <url>/2023/12/15/jvm-sgg1/</url>
      
        <content type="html"><![CDATA[<h2 id="JVM和Java体系架构">JVM和Java体系架构</h2><h3 id="前言">前言</h3><ol><li>运行着的线上系统突然卡死，系统无法访问，甚至直接 OOM！</li><li>想解决线上 JVM GC 问题，但却无从下手。</li><li>新项目上线，对各种 JVM 参数设置一脸茫然，直接默认吧然后就JJ了。</li><li>每次面试之前都要重新背一遍JVM的一些原理概念性的东西，然而面试官却经常问你在实际项目中如何调优 VM 参数，如何解决 GC、OOM 等问题，一脸懵逼。</li></ol><img src="../jvm-sgg1/0001.png" style="zoom:33%;" /><p>大部分 Java 开发人员，除了会在项目中使用到与Java平台相关的各种高精尖技术，对于 Java 技术的核心 Java 虚拟机了解甚少。</p><h3 id="开发人员如何看待上层框架">开发人员如何看待上层框架</h3><ol><li>如果我们把核心类库的 API 比做数学公式的话，那么 Java 虚拟机的知识就好比公式的推导过程。</li></ol><img src="../jvm-sgg1/0002.png" style="zoom:33%;" /><ol start="2"><li>计算机系统体系对我们来说越来越远，在不了解底层实现方式的前提下，通过高级语言很容易编写程序代码。但事实上计算机并不认识高级语言。</li></ol><h3 id="我们为什么要学习JVM">我们为什么要学习JVM</h3><ol><li>面试的需要（BATJ、TMD，PKQ 等面试都爱问）</li><li>中高级程序员必备技能</li><li>项目管理、调优的需要</li><li>追求极客的精神，</li></ol><ul><li>比如：垃圾回收算法、JIT、底层原理</li></ul><h3 id="Java-VS-C">Java VS C++</h3><ol><li>垃圾收集机制为我们打理了很多繁琐的工作，大大提高了开发的效率，但是，垃圾收集也不是万能的，懂得 JVM 内部的内存结构、工作机制，是设计高扩展性应用和诊断运行时问题的基础，也是 Java 工程师进阶的必备能力。</li><li>C++ 语言需要程序员自己来分配内存和回收内存，对于高手来说可能更加舒服，但是对于普通开发者，如果技术实力不够，很容易造成内存泄漏。而 Java 全部交给 JVM 进行内存分配和回收，这也是一种趋势，减少程序员的工作量。</li></ol><img src="../jvm-sgg1/0003.png" style="zoom:33%;" /><h3 id="推荐及参考书籍">推荐及参考书籍</h3><p><strong>官方文档</strong></p><p><strong>英文文档规范</strong>：<a href="https://docs.oracle.com/javase/specs/index.html">https://docs.oracle.com/javase/specs/index.html</a></p><img src="../jvm-sgg1/0004.png" style="zoom:33%;" /><p><strong>中文书籍：</strong></p><img src="../jvm-sgg1/0005.png" style="zoom:33%;" /><blockquote><p>周志明老师的这本书<strong>非常推荐看</strong>，不过只推荐看第三版，第三版较第二版更新了很多，个人觉得没必要再看第二版。</p></blockquote><img src="../jvm-sgg1/0006.png" style="zoom:33%;" /><img src="../jvm-sgg1/0007.png" style="zoom:33%;" /><h3 id="Java生态圈">Java生态圈</h3><p>Java 是目前应用最为广泛的软件开发平台之一。随着 Java 以及 Java 社区的不断壮大 Java 也早已不再是简简单单的一门计算机语言了，它更是一个平台、一种文化、一个社区。</p><ol><li>作为一个平台，Java 虚拟机扮演着举足轻重的作用<ul><li>Groovy、Scala、JRuby、Kotlin 等都是 Java 平台的一部分</li></ul></li><li>作为一种文化，Java 几乎成为了“开源”的代名词。<ul><li>第三方开源软件和框架。如 Tomcat、Struts，MyBatis，Spring 等。</li><li>就连 JDK 和 JVM 自身也有不少开源的实现，如 openJDK、Harmony。</li></ul></li><li>作为一个社区，Java 拥有全世界最多的技术拥护者和开源社区支持，有数不清的论坛和资料。从桌面应用软件、嵌入式开发到企业级应用、后台服务器、中间件，都可以看到 Java 的身影。其应用形式之复杂、参与人数之众多也令人咋舌。</li></ol><h3 id="Java-跨平台的语言">Java-跨平台的语言</h3><img src="../jvm-sgg1/0009.png" style="zoom:33%;" /><h3 id="JVM-跨语言的平台">JVM-跨语言的平台</h3><img src="../jvm-sgg1/0010.png" style="zoom:33%;" /><ol><li>随着 Java7 的正式发布，Java 虚拟机的设计者们通过 JSR-292 规范基本实现在 Java 虚拟机平台上运行非 Java 语言编写的程序。</li><li>Java 虚拟机根本不关心运行在其内部的程序到底是使用何种编程语言编写的，它只关心“字节码”文件。也就是说 Java 虚拟机拥有语言无关性，并不会单纯地与 Java 语言“终身绑定”，只要其他编程语言的编译结果满足并包含 Java 虚拟机的内部指令集、符号表以及其他的辅助信息，它就是一个有效的字节码文件，就能够被虚拟机所识别并装载运行。</li></ol><ul><li>Java 不是最强大的语言，但是 JVM 是最强大的虚拟机</li></ul><ol><li><p>我们平时说的 Java 字节码，指的是用 Java 语言编译成的字节码。准确的说任何能在 JVM 平台上执行的字节码格式都是一样的。所以应该统称为：JVM 字节码。</p></li><li><p>不同的编译器，可以编译出相同的字节码文件，字节码文件也可以在不同的 JVM 上运行。</p></li><li><p>Java 虚拟机与 Java 语言并没有必然的联系，它只与特定的二进制文件格式——Class 文件格式所关联，Class 文件中包含了 Java 虚拟机指令集（或者称为字节码、Bytecodes）和符号表，还有一些其他辅助信息。</p></li></ol><h3 id="多语言混合编程">多语言混合编程</h3><ol><li><p>Java 平台上的多语言混合编程正成为主流，通过特定领域的语言去解决特定领域的问题是当前软件开发应对日趋复杂的项目需求的一个方向。</p></li><li><p>试想一下，在一个项目之中，并行处理用 Clojure 语言编写，展示层使用 JRuby/Rails，中间层则是 Java，每个应用层都将使用不同的编程语言来完成，而且，接口对每一层的开发者都是透明的，各种语言之间的交互不存在任何困难，就像使用自己语言的原生 API 一样方便，因为它们最终都运行在一个虚拟机之上。</p></li><li><p>对这些运行于 Java 虚拟机之上、Java 之外的语言，来自系统级的、底层的支持正在迅速增强，以 JSR-292 为核心的一系列项目和功能改进（如 DaVinci Machine 项目、Nashorn 引擎、InvokeDynamic 指令、java.lang.invoke 包等），推动 Java 虚拟机从“Java 语言的虚拟机”向 “多语言虚拟机”的方向发展。</p></li></ol><h3 id="如何真正搞懂JVM？">如何真正搞懂JVM？</h3><p>Java 虚拟机非常复杂，要想真正理解它的工作原理，最好的方式就是自己动手编写一个！</p><img src="../jvm-sgg1/0011.png" style="zoom: 30%;" /><h3 id="Java发展重大事件">Java发展重大事件</h3><ul><li>1990年，在 Sun 计算机公司中，由 Patrick Naughton、MikeSheridan 及 James Gosling 领导的小组 Green Team，开发出的新的程序语言，命名为 Oak，后期命名为 Java</li><li>1995年，Sun 正式发布 Java 和 HotJava 产品，Java 首次公开亮相。</li><li>1996年1月23日 Sun Microsystems 发布了JDK 1.0。</li><li>1998年，JDK1.2 版本发布。同时，Sun 发布了 JSP/Servlet、EJB 规范，以及将 Java 分成了 J2EE、J2SE 和 J2ME。这表明了 Java 开始向企业、桌面应用和移动设备应用 3 大领域挺进。</li><li>2000年，JDK1.3发布，Java HotSpot Virtual Machine 正式发布，成为 Java 的默认虚拟机。</li><li>2002年，JDK1.4 发布，古老的 Classic 虚拟机退出历史舞台。</li><li>2003年年底，Java 平台的 scala 正式发布，同年 Groovy 也加入了 Java 阵营。</li><li>2004年，JDK1.5 发布。同时 JDK1.5 改名为 JavaSE5.0。</li><li>2006年，JDK6 发布。同年，Java 开源并建立了 OpenJDK。顺理成章，Hotspot 虚拟机也成为了 OpenJDK 中的默认虚拟机。</li><li>2007年，Java 平台迎来了新伙伴 Clojure。</li><li>2008年，Oracle 收购了 BEA，得到了 JRockit 虚拟机。</li><li>2009年，Twitter 宣布把后台大部分程序从 Ruby 迁移到 Scala，这是 Java 平台的又一次大规模应用。</li><li>2010年，Oracle 收购了 Sun，获得 Java 商标和最真价值的HotSpot虚拟机。此时，Oracle 拥有市场占用率最高的两款虚拟机HotSpot 和 JRockit，并计划在未来对它们进行整合：HotRockit。JCP 组织管理 Java 语言</li><li>2011年，JDK7 发布。在 JDK1.7u4 中，正式启用了新的垃圾回收器 G1。</li><li><strong>2017年，JDK9发布。将G1设置为默认GC，替代CMS</strong></li><li>同年，IBM 的 J9 开源，形成了现在的 Open J9 社区</li><li>2018年，Android 的 Java 侵权案判决，Google 赔偿 Oracle 计 88亿美元</li><li>同年，Oracle 宣告 JavagE 成为历史名词 JDBC、JMS、Servlet 赠予 Eclipse 基金会</li><li><strong>同年，JDK11 发布，LTS 版本的 JDK，发布革命性的 ZGC，调整 JDK 授权许可</strong></li><li>2019年，JDK12 发布，加入 RedHat 领导开发的 Shenandoah GC</li></ul><h3 id="Open-JDK和Oracle-JDK">Open JDK和Oracle JDK</h3><img src="../jvm-sgg1/0012.png" style="zoom:33%;" /><ul><li>在 JDK11 之前，Oracle JDK 中还会存在一些 Open JDK 中没有的，闭源的功能。但在 JDK11 中，我们可以认为 Open JDK 和 Oracle JDK 代码实质上已经达到完全一致的程度了。</li><li>主要的区别就是两者更新周期不一样</li></ul><h3 id="虚拟机">虚拟机</h3><h4 id="虚拟机概念">虚拟机概念</h4><ul><li><p>所谓虚拟机（Virtual Machine），就是一台虚拟的计算机。它是一款软件，用来执行一系列虚拟计算机指令。大体上，虚拟机可以分为系统虚拟机和程序虚拟机。</p><ul><li>大名鼎鼎的 Virtual Box，VMware 就属于系统虚拟机，它们完全是对物理计算机硬件的仿真(模拟)，提供了一个可运行完整操作系统的软件平台。</li></ul><ul><li>程序虚拟机的典型代表就是 Java 虚拟机，它专门为执行单个计算机程序而设计，在 Java 虚拟机中执行的指令我们称为 Java 字节码指令。</li></ul></li><li><p>无论是系统虚拟机还是程序虚拟机，在上面运行的软件都被限制于虚拟机提供的资源中。</p></li></ul><h4 id="Java虚拟机">Java虚拟机</h4><ol><li>Java 虚拟机是一台执行 Java 字节码的虚拟计算机，它拥有独立的运行机制，其运行的 Java 字节码也未必由 Java 语言编译而成。</li><li>JVM 平台的各种语言可以共享 Java 虚拟机带来的跨平台性、优秀的垃圾回器，以及可靠的即时编译器。</li><li><strong>Java技术的核心就是Java虚拟机</strong>（JVM，Java Virtual Machine），因为所有的Java程序都运行在Java虚拟机内部。</li></ol><p><strong>作用：</strong></p><p>Java 虚拟机就是二进制字节码的运行环境，负责装载字节码到其内部，解释/编译为对应平台上的机器指令执行。每一条Java指令，Java虚拟机规范中都有详细定义，如怎么取操作数，怎么处理操作数，处理结果放在哪里。</p><p><strong>特点：</strong></p><ol><li>一次编译，到处运行</li><li>自动内存管理</li><li>自动垃圾回收功能</li></ol><h3 id="JVM的位置">JVM的位置</h3><p>JVM 是运行在操作系统之上的，它与硬件没有直接的交互</p><img src="../jvm-sgg1/0013.png" style="zoom:33%;" /><img src="../jvm-sgg1/0014.png" style="zoom:33%;" /><h3 id="JVM的整体结构">JVM的整体结构</h3><ol><li>HotSpot VM 是目前市面上高性能虚拟机的代表作之一。</li><li>它采用解释器与即时编译器并存的架构。</li><li>在今天，Java 程序的运行性能早已脱胎换骨，已经达到了可以和 C/C++ 程序一较高下的地步。</li></ol><img src="../jvm-sgg1/0015.png" style="zoom:50%;" /><h3 id="Java代码执行流程">Java代码执行流程</h3><p>凡是能生成被 Java 虚拟机所能解释、运行的字节码文件，那么理论上我们就可以自己设计一套语言了</p><p><img src="../jvm-sgg1/0016.png" alt=""></p><h3 id="JVM的架构模型">JVM的架构模型</h3><p>Java 编译器输入的指令流基本上是一种<strong>基于栈的指令集架构</strong>，另外一种指令集架构则是<strong>基于寄存器的指令集架构</strong>。具体来说：这两种架构之间的区别：</p><h3 id="基于栈的指令集架构">基于栈的指令集架构</h3><p>基于栈式架构的特点：</p><ol><li>设计和实现更简单，适用于资源受限的系统；</li><li>避开了寄存器的分配难题：使用零地址指令方式分配</li><li>指令流中的指令大部分是零地址指令，其执行过程依赖于操作栈。指令集更小，编译器容易实现</li><li>不需要硬件支持，可移植性更好，更好实现跨平台</li></ol><h3 id="基于寄存器的指令级架构">基于寄存器的指令级架构</h3><p>基于寄存器架构的特点：</p><ol><li>典型的应用是x86的二进制指令集：比如传统的 PC 以及 Android 的 Davlik 虚拟机。</li><li>指令集架构则完全依赖硬件，与硬件的耦合度高，可移植性差</li><li>性能优秀和执行更高效</li><li>花费更少的指令去完成一项操作</li><li>在大部分情况下，基于寄存器架构的指令集往往都以一地址指令、二地址指令和三地址指令为主，而基于栈式架构的指令集却是以零地址指令为主</li></ol><h3 id="两种架构的举例">两种架构的举例</h3><p>同样执行 2+3 这种逻辑操作，其指令分别如下：</p><ul><li><p><strong>基于栈的计算流程（以Java虚拟机为例）：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">iconst_2 <span class="token comment">//常量2入栈</span>istore_1iconst_3 <span class="token comment">// 常量3入栈</span>istore_2iload_1iload_2iadd <span class="token comment">//常量2/3出栈，执行相加</span>istore_0 <span class="token comment">// 结果5入栈</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8 个指令</p></li><li><p><strong>而基于寄存器的计算流程</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">mov eax<span class="token punctuation">,</span><span class="token number">2</span> <span class="token comment">//将eax寄存器的值设为1</span>add eax<span class="token punctuation">,</span><span class="token number">3</span> <span class="token comment">//使eax寄存器的值加3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2 个指令</p></li></ul><blockquote><p>具体后面会讲</p></blockquote><h3 id="JVM架构总结">JVM架构总结</h3><ol><li><p><strong>由于跨平台性的设计，Java 的指令都是根据栈来设计的</strong>。不同平台 CPU 架构不同，所以不能设计为基于寄存器的。栈的优点：跨平台，指令集小，编译器容易实现，缺点是性能比寄存器差一些。</p></li><li><p>时至今日，尽管嵌入式平台已经不是 Java 程序的主流运行平台了（准确来说应该是 HotSpot VM 的宿主环境已经不局限于嵌入式平台了），那么为什么不将架构更换为基于寄存器的架构呢？</p></li></ol><ul><li>因为基于栈的架构跨平台性好、指令集小，虽然相对于基于寄存器的架构来说，基于栈的架构编译得到的指令更多，执行性能也不如基于寄存器的架构好，但考虑到其跨平台性与移植性，我们还是选用栈的架构</li></ul><h3 id="JVM的生命周期">JVM的生命周期</h3><h4 id="虚拟机的启动">虚拟机的启动</h4><p>Java 虚拟机的启动是通过引导类加载器（bootstrap class loader）创建一个初始类（initial class）来完成的，这个类是由虚拟机的具体实现指定的。</p><h4 id="虚拟机的执行">虚拟机的执行</h4><ol><li>一个运行中的 Java 虚拟机有着一个清晰的任务：执行Java程序</li><li>程序开始执行时他才运行，程序结束时他就停止</li><li><strong>执行一个所谓的 Java 程序的时候，真真正正在执行的是一个叫做 Java 拟机的进程</strong></li></ol><h4 id="虚拟机的退出">虚拟机的退出</h4><p><strong>有如下的几种情况：</strong></p><ol><li><p>程序正常执行结束</p></li><li><p>程序在执行过程中遇到了异常或错误而异常终止</p></li><li><p>由于操作系统用现错误而导致 Java 虚拟机进程终止</p></li><li><p>某线程调用 Runtime 类或 System 类的 exit() 方法，或 Runtime 类的 halt() 方法，并且 Java 安全管理器也允许这次 exit() 或 halt() 操作。</p></li><li><p>除此之外，JNI（Java Native Interface）规范描述了用 JNI Invocation API 来加载或卸载  Java 虚拟机时，Java 虚拟机的退出情况。</p></li></ol><h3 id="JVM发展历程">JVM发展历程</h3><h4 id="Sun-Classic-VM">Sun Classic VM</h4><ol><li>早在 1996 年 Java1.0 版本的时候，Sun 公司发布了一款名为 sun classic VM 的 Java虚拟机，它同时也是<strong>世界上第一款商用 Java 虚拟机</strong>，JDK1.4 时完全被淘汰。</li><li>这款虚拟机内部只提供解释器，没有即时编译器，因此效率比较低。【即时编译器会把热点代码的本地机器指令缓存起来，那么以后使用热点代码的时候，效率就比较高】</li><li>如果使用 JIT 编译器，就需要进行外挂。但是一旦使用了 JIT 编译器，JIT 就会接管虚拟机的执行系统。解释器就不再工作，解释器和编译器不能配合工作。<ul><li>我们将字节码指令翻译成机器指令也是需要花时间的，如果只使用 JIT，就需要把所有字节码指令都翻译成机器指令，就会导致翻译时间过长，也就是说在程序刚启动的时候，等待时间会很长。</li><li>而解释器就是走到哪，解释到哪。</li></ul></li><li>现在 Hotspot 内置了此虚拟机。</li></ol><h4 id="Exact-VM">Exact VM</h4><ol><li><p>为了解决上一个虚拟机问题，jdk1.2 时，Sun 提供了此虚拟机。</p></li><li><p>Exact Memory Management：准确式内存管理</p><ul><li><p>也可以叫Non-Conservative/Accurate Memory Management</p></li><li><p>虚拟机可以知道内存中某个位置的数据具体是什么类型。</p></li></ul></li><li><p>具备现代高性能虚拟机的维形</p><ul><li><p>热点探测（寻找出热点代码进行缓存）</p></li><li><p>编译器与解释器混合工作模式</p></li></ul></li><li><p>只在 Solaris 平台短暂使用，其他平台上还是 classic vm，英雄气短，终被 Hotspot 虚拟机替换</p></li></ol><h4 id="HotSpot-VM（重点）">HotSpot VM（重点）</h4><ol><li><p>HotSpot 历史</p><ul><li><p>最初由一家名为“Longview Technologies”的小公司设计</p></li><li><p>1997年，此公司被 Sun 收购；2009年，Sun 公司被甲骨文收购。</p></li><li><p>JDK1.3时，HotSpot VM 成为默认虚拟机</p></li></ul></li><li><p>目前<strong>Hotspot占有绝对的市场地位，称霸武林</strong>。</p><ul><li><p>不管是现在仍在广泛使用的 JDK6，还是使用比例较多的 JDK8 中，默认的虚拟机都是 HotSpot</p></li><li><p>Sun/oracle JDK 和 openJDK 的默认虚拟机</p></li><li><p>因此本课程中默认介绍的虚拟机都是 HotSpot，相关机制也主要是指 HotSpot 的 GC 机制。（比如其他两个商用虚机都没有方法区的概念）</p></li></ul></li><li><p>从服务器、桌面到移动端、嵌入式都有应用。</p></li><li><p>名称中的 HotSpot 指的就是它的热点代码探测技术。</p><ul><li><p>通过计数器找到最具编译价值代码，触发即时编译或栈上替换</p></li><li><p>通过编译器与解释器协同工作，在最优化的程序响应时间与最佳执行性能中取得平衡</p></li></ul></li></ol><h4 id="JRockit（商用三大虚拟机之一）">JRockit（商用三大虚拟机之一）</h4><ol><li><p>专注于服务器端应用：它可以不太关注程序启动速度，因此JRockit内部不包含解析器实现，全部代码都靠即时编译器编译后执行。</p></li><li><p>大量的行业基准测试显示，JRockit JVM 是世界上最快的 JVM：使用 JRockit 产品，客户已经体验到了显著的性能提高（一些超过了70%）和硬件成本的减少（达50%）。</p></li><li><p>优势：全面的Java运行时解决方案组合</p><ul><li><p>JRockit 面向延迟敏感型应用的解决方案 JRockit Real Time 提供以毫秒或微秒级的 JVM 响应时间，适合财务、军事指挥、电信网络的需要</p></li><li><p>Mission Control 服务套件，它是一组以极低的开销来监控、管理和分析生产环境中的应用程序的工具。</p></li></ul></li><li><p>2008年，JRockit 被 Oracle 收购。</p></li><li><p>Oracle 表达了整合两大优秀虚拟机的工作，大致在 JDK8 中完成。整合的方式是在 HotSpot 的基础上，移植 JRockit 的优秀特性。</p></li><li><p>高斯林：目前就职于谷歌，研究人工智能和水下机器人</p></li></ol><h4 id="IBM的J9（商用三大虚拟机之一）">IBM的J9（商用三大虚拟机之一）</h4><ol><li><p>全称：IBM Technology for Java Virtual Machine，简称 IT4J，内部代号：J9</p></li><li><p>市场定位与 HotSpot 接近，服务器端、桌面应用、嵌入式等多用途 VM 广泛用于 IBM 的各种 Java 产品。</p></li><li><p>目前，有影响力的三大商用虚拟机之一，也号称是世界上最快的 Java 虚拟机。</p></li><li><p>2017年左右，IBM 发布了开源 J9VM，命名为 openJ9，交给 Eclipse 基金会管理，也称为 Eclipse OpenJ9</p></li><li><p>OpenJDK -&gt; 是 JDK 开源了，包括了虚拟机</p></li></ol><h4 id="KVM和CDC-CLDC-Hotspot">KVM和CDC/CLDC Hotspot</h4><ol><li><p>Oracle 在 Java ME 产品线上的两款虚拟机为：CDC/CLDC HotSpot Implementation VM</p></li><li><p>KVM（Kilobyte）是 CLDC-HI 早期产品</p></li><li><p>目前移动领域地位尴尬，智能机被 Android 和 iOS 二分天下。</p></li><li><p>KVM 简单、轻量、高度可移植，面向更低端的设备上还维持自己的一片市场</p><ul><li><p>智能控制器、传感器</p></li><li><p>老人手机、经济欠发达地区的功能手机</p></li></ul></li><li><p>所有的虚拟机的原则：一次编译，到处运行。</p></li></ol><h4 id="Azul-VM">Azul VM</h4><ol><li>前面三大“高性能 Java 虚拟机”使用在<strong>通用硬件平台上</strong></li><li>这里 Azul VW 和 BEA Liquid VM 是与<strong>特定硬件平台绑定</strong>、软硬件配合的专有虚拟机：高性能 Java 虚拟机中的战斗机。</li><li>Azul VM 是 Azul Systems 公司在 HotSpot 基础上进行大量改进，运行于 Azul Systems 公司的专有硬件 Vega 系统上的 Java 虚拟机。</li><li>每个 Azul VM 实例都可以管理至少数十个 CPU 和数百GB内存的硬件资源，并提供在巨大内存范围内实现可控的GC时间的垃圾收集器、专有硬件优化的线程调度等优秀特性。</li><li>2010年，Azul Systems 公司开始从硬件转向软件，发布了自己的 Zing JVM，可以在通用 x86 平台上提供接近于 Vega 系统的特性。</li></ol><h4 id="Liquid-VM">Liquid VM</h4><ol><li>高性能 Java 虚拟机中的战斗机。</li><li>BEA 公司开发的，直接运行在自家 Hypervisor 系统上</li><li>Liquid VM 即是现在的 JRockit VE（Virtual Edition）。<strong>Liquid VM 不需要操作系统的支持，或者说它自己本身实现了一个专用操作系统的必要功能，如线程调度、文件系统、网络支持等</strong>。</li><li>随着 JRockit 虚拟机终止开发，Liquid VM 项目也停止了。</li></ol><h4 id="Apache-Marmony">Apache Marmony</h4><ol><li><p>Apache 也曾经推出过与 JDK1.5 和 JDK1.6 兼容的 Java 运行平台 Apache Harmony。</p></li><li><p>它是 IElf 和 Intel 联合开发的开源 JVM，受到同样开源的 Open JDK 的压制，Sun 坚决不让 Harmony 获得 JCP 认证，最终于 2011 年退役，IBM 转而参与 OpenJDK</p></li><li><p>虽然目前并没有 Apache Harmony 被大规模商用的案例，但是它的 Java 类库代码吸纳进了 Android SDK。</p></li></ol><h4 id="Micorsoft-JVM">Micorsoft JVM</h4><ol><li><p>微软为了在 IE3 浏览器中支持 Java Applets，开发了 Microsoft JVM。</p></li><li><p>只能在 Window 平台下运行。但确是当时 Windows 下性能最好的 Java VM。</p></li><li><p>1997年，Sun 以侵犯商标、不正当竞争罪名指控微软成功，赔了Sun 很多钱。微软 WindowsXP SP3 中抹掉了其 VM。现在 Windows 上安装的 jdk 都是 HotSpot。</p></li></ol><h4 id="Taobao-JVM">Taobao JVM</h4><ol><li><p>由 AliJVM 团队发布。阿里，国内使用 Java 最强大的公司，覆盖云计算、金融、物流、电商等众多领域，需要解决高并发、高可用、分布式的复合问题。有大量的开源产品。</p></li><li><p><strong>基于 OpenJDK 开发了自己的定制版本 AlibabaJDK</strong>，简称 AJDK。是整个阿里 Java 体系的基石。</p></li><li><p>基于 OpenJDK Hotspot VM 发布的国内第一个优化、深度定制且开源的高性能服务器版 Java 虚拟机。</p><ul><li>创新的 GCIH（GCinvisible heap）技术实现了 off-heap，<strong>即将生命周期较长的 Java 对象从 heap 中移到 heap 之外，并且 GC 不能管理 GCIH 内部的 Java 对象，以此达到降低 GC 的回收频率和提升 GC 的回收效率的目的</strong>。</li><li>GCIH 中的<strong>对象还能够在多个 Java 虚拟机进程中实现共享</strong></li><li>使用 crc32 指令实现 JVM intrinsic 降低 JNI 的调用开销</li><li>PMU hardware 的 Java profiling tool 和诊断协助功能</li><li>针对大数据场景的 ZenGC</li></ul></li><li><p>taobao vm 应用在阿里产品上性能高，<strong>硬件严重依赖 inte1 的 cpu，损失了兼容性，但提高了性能</strong></p></li></ol><ul><li>目前已经在淘宝、天猫上线，把 Oracle 官方 JVM 版本全部替换了。</li></ul><h4 id="Dalvik-VM">Dalvik VM</h4><ol><li><p>谷歌开发的，应用于 Android 系统，并在 Android2.2 中提供了 JIT，发展迅猛。</p></li><li><p><strong>Dalvik VM 只能称作虚拟机，而不能称作“Java虚拟机”</strong>，它没有遵循 Java 虚拟机规范</p></li><li><p>不能直接执行 Java 的 Class 文件</p></li><li><p>基于寄存器架构，不是 jvm 的栈架构。</p></li><li><p>执行的是编译以后的 dex（Dalvik Executable）文件。执行效率比较高。</p></li></ol><ul><li>它执行的 dex（Dalvik Executable）文件可以通过 class 文件转化而来，使用 Java 语法编写应用程序，可以直接使用大部分的 Java API 等。</li></ul><ol start="7"><li>Android 5.0 使用支持提前编译（Ahead of Time Compilation，AoT）的 ART VM 替换 Dalvik VM。</li></ol><h4 id="Graal-VM（未来虚拟机）">Graal VM（未来虚拟机）</h4><ol><li><p>2018年4月，Oracle Labs 公开了 GraalvM，号称 “<strong>Run Programs Faster Anywhere</strong>”，勃勃野心。与1995年java的”write once，run anywhere&quot;遥相呼应。</p></li><li><p>GraalVM 在 HotSpot VM 基础上增强而成的**跨语言全栈虚拟机，可以作为“任何语言”**的运行平台使用。语言包括：Java、Scala、Groovy、Kotlin；C、C++、Javascript、Ruby、Python、R等</p></li><li><p>支持不同语言中混用对方的接口和对象，支持这些语言使用已经编写好的本地库文件</p></li><li><p>工作原理是将这些语言的源代码或源代码编译后的中间格式，通过解释器转换为能被 Graal VM 接受的中间表示。Graal VM 提供 Truffle 工具集快速构建面向一种新语言的解释器。在运行时还能进行即时编译优化，获得比原生编译器更优秀的执行效率。</p></li><li><p><strong>如果说 HotSpot 有一天真的被取代，Graalvm 希望最大</strong>。但是 Java 的软件生态没有丝毫变化。</p></li></ol><h3 id="总结">总结</h3><p>具体JVM的内存结构，其实取决于其实现，不同厂商的 JVM，或者同一厂商发布的不同版本，都有可能存在一定差异。主要以 Oracle HotSpot VM 为默认虚拟机。</p>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-mindmap</title>
      <link href="/2023/12/13/hexo-mindmap/"/>
      <url>/2023/12/13/hexo-mindmap/</url>
      
        <content type="html"><![CDATA[<h2 id="Hexo绘制思维导图">Hexo绘制思维导图</h2><p><a href="https://github.com/MaxChang3/hexo-markmap/blob/main/README_HANS.md">hexo-markmap/GitHub链接</a></p><h4 id="插件安装">插件安装</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-markmap <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="使用方式">使用方式</h4><pre class="line-numbers language-null" data-language="null"><code class="language-null">&#123;% markmap height [depth] %&#125;- markmap  - Demo    - [链接](http:&#x2F;&#x2F;localhost:4000&#x2F;2023&#x2F;12&#x2F;13&#x2F;hexo-mindmap&#x2F;)    - **inline** ~~text~~ *styles*    - multiline      content    - HTML code is quite long          - [标签链接](#标签链接)- links- **inline** ~~text~~ *styles*- multiline  text- &#96;inline code&#96;&#123;% endmarkmap %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="markmap-container" style="height:height">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;markmap&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;Demo&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;&lt;a href=\&quot;http://localhost:4000/2023/12/13/hexo-mindmap/\&quot;&gt;链接&lt;/a&gt;&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;&lt;strong&gt;inline&lt;/strong&gt; &lt;del&gt;text&lt;/del&gt; &lt;em&gt;styles&lt;/em&gt;&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[4,6]},&quot;v&quot;:&quot;multiline&lt;br&gt;\ncontent&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;HTML code is quite long&quot;}]}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;links&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;&lt;strong&gt;inline&lt;/strong&gt; &lt;del&gt;text&lt;/del&gt; &lt;em&gt;styles&lt;/em&gt;&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[9,11]},&quot;v&quot;:&quot;multiline&lt;br&gt;\ntext&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[11,12]},&quot;v&quot;:&quot;&lt;code&gt;inline code&lt;/code&gt;&quot;}],&quot;p&quot;:{}}"></svg></div><h6 id="标签链接"><strong>标签链接</strong></h6><h4 id="优化">优化</h4><p>由于此主题是无边界的, 有时候想滚动页面, 结果进入脑图就会进行放大缩小, 因此给脑图增加边界</p><ol><li>全局搜索<code>.markmap-container svg</code> 位置在 <code>themes/xxx/source/css/dark.css</code></li><li>在该文件添加如下</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.markmap-container svg</span> <span class="token punctuation">&#123;</span>    <span class="token property">border</span><span class="token punctuation">:</span> 1px dotted #1a97a8<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Hexo实现链接跳转">Hexo实现链接跳转</h2><h4 id="当前文章锚点跳转">当前文章锚点跳转</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">[自定义文本](#标签链接)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="#%E6%A0%87%E7%AD%BE%E9%93%BE%E6%8E%A5">自定义文本</a></p><h4 id="站内文章跳转">站内文章跳转</h4><p><a href="https://hexo.io/zh-cn/docs/tag-plugins#%E5%BC%95%E7%94%A8%E6%96%87%E7%AB%A0">官网方式</a></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&#123;% post_link filename [title] [escape] %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="站内文章标题跳转">站内文章标题跳转</h4><pre class="line-numbers language-htnl" data-language="htnl"><code class="language-htnl">&lt;a href&#x3D;&quot;&#123;% post_path filename(不要后缀) %&#125;#章节名&quot;&gt;escape&lt;&#x2F;a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意</p><p><code>#章节名</code>处英文字母要全小写，空格要转换为<code>-</code></p></blockquote><h6 id="我是一个标签">我是一个标签</h6>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM-字节码文件概述</title>
      <link href="/2023/12/13/jvm-note/"/>
      <url>/2023/12/13/jvm-note/</url>
      
        <content type="html"><![CDATA[<h2 id="JVM-字节码文件概述">JVM-字节码文件概述</h2><div class="markmap-container" style="height:height">  <svg data="{&quot;t&quot;:&quot;root&quot;,&quot;d&quot;:0,&quot;v&quot;:&quot;&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;字节码文件是跨平台的吗&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[3,4],&quot;f&quot;:true},&quot;v&quot;:&quot;class文件里是什么?&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[5,6],&quot;f&quot;:true},&quot;v&quot;:&quot;能介绍下生成class文件的编译器吗&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[7,8],&quot;f&quot;:true},&quot;v&quot;:&quot;javac编译器的编译步骤&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[9,10],&quot;f&quot;:true},&quot;v&quot;:&quot;目前前端编译器的局限性&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[11,12]},&quot;v&quot;:&quot;&lt;a href=\&quot;#哪些类型对应有Class对象\&quot;&gt;哪些类型对应有Class对象? &lt;/a&gt;&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[13,14]},&quot;v&quot;:&quot;字节码指令&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[15,16],&quot;f&quot;:true},&quot;v&quot;:&quot;&lt;a href=\&quot;#什么是字节码指令\&quot;&gt;什么是字节码指令&lt;/a&gt;&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[16,17],&quot;f&quot;:true},&quot;v&quot;:&quot;&lt;a href=\&quot;\&quot;&gt;为什么要懂字节码指令? &lt;/a&gt;&quot;}]},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[18,19]},&quot;v&quot;:&quot;如何解读class文件&quot;}],&quot;p&quot;:{}}"></svg></div><h6 id="哪些类型对应有Class对象">哪些类型对应有Class对象</h6><blockquote><ol><li><p>class:</p><p>外部类, 成员(成员内部类, 静态内部类), 局部内部类, 匿名内部类</p></li><li><p>interface: 接口</p></li><li><p>[ ] : 数组</p></li><li><p>enum: 枚举</p></li><li><p>annotation: 注解@interface</p></li><li><p>primitive type: 基本数据类型</p></li><li><p>void</p></li></ol></blockquote><h6 id="什么是字节码指令">什么是字节码指令</h6><blockquote><p>什么是字节码指令(byte code)</p><p>Java虚拟机的指令由<strong>一个字节</strong>长度的、代表着某种特定操作含义的<strong>操作码</strong>(opcode)<br>以及跟随其后的零至多个代表此操作所需参数的<strong>操作数</strong>(operand)所构成.<br>虚拟机中许多指令并不包含操作数, 只有一个操作码.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mail-demo</title>
      <link href="/2023/12/09/mail-demo/"/>
      <url>/2023/12/09/mail-demo/</url>
      
        <content type="html"><![CDATA[<h3 id="依赖">依赖</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-mail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置文件">配置文件</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">mail</span><span class="token punctuation">:</span>    <span class="token comment">#配置smtp服务主机地址</span>    <span class="token comment"># qq邮箱为smtp.qq.com          端口号465或587</span>    <span class="token comment"># sina    smtp.sina.cn</span>    <span class="token comment"># aliyun  smtp.aliyun.com</span>    <span class="token comment"># 163     smtp.163.com       端口号465或994</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> smtp.qq.com    <span class="token comment">#发送者邮箱</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> xxxxxxxx@qq.com    <span class="token comment">#配置密码,注意不是真正的密码，而是刚刚申请到的授权码</span>    <span class="token key atrule">password</span><span class="token punctuation">:</span> axloxxxxxxfqbdgc    <span class="token comment">#端口号465或587</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">587</span>    <span class="token comment">#默认的邮件编码为UTF-8</span>    <span class="token key atrule">default-encoding</span><span class="token punctuation">:</span> UTF<span class="token punctuation">-</span><span class="token number">8</span>    <span class="token comment">#其他参数</span>    <span class="token key atrule">properties</span><span class="token punctuation">:</span>      <span class="token key atrule">mail</span><span class="token punctuation">:</span>        <span class="token comment">#配置SSL 加密工厂</span>        <span class="token key atrule">smtp</span><span class="token punctuation">:</span>          <span class="token key atrule">ssl</span><span class="token punctuation">:</span>            <span class="token comment">#本地测试，先放开ssl</span>            <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>            <span class="token key atrule">required</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>          <span class="token comment">#开启debug模式，这样邮件发送过程的日志会在控制台打印出来，方便排查错误</span>        <span class="token key atrule">debug</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="mail工具类">mail工具类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span></span><span class="token class-name">StringUtils</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileSystemResource</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>mail<span class="token punctuation">.</span>javamail<span class="token punctuation">.</span></span><span class="token class-name">JavaMailSenderImpl</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>mail<span class="token punctuation">.</span>javamail<span class="token punctuation">.</span></span><span class="token class-name">MimeMessageHelper</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>mail<span class="token punctuation">.</span></span><span class="token class-name">MessagingException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span><span class="token comment">/** * 邮件业务类 * @author qzz */</span><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MailService</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 注入邮件工具类     */</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">JavaMailSenderImpl</span> javaMailSender<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;spring.mail.username&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> sendMailer<span class="token punctuation">;</span>    <span class="token comment">/**     * 检测邮件信息类     * @param to 收件人     * @param subject 主题     * @param text 文本     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkMail</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token keyword">to</span><span class="token punctuation">,</span><span class="token class-name">String</span> subject<span class="token punctuation">,</span><span class="token class-name">String</span> text<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"邮件收信人不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"邮件主题不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"邮件内容不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 发送纯文本邮件     * @param to 收件人     * @param subject 主题     * @param text 文本     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendTextMailMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token keyword">to</span><span class="token punctuation">,</span><span class="token class-name">String</span> subject<span class="token punctuation">,</span><span class="token class-name">String</span> text<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//true 代表支持复杂的类型</span>            <span class="token class-name">MimeMessageHelper</span> mimeMessageHelper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMessageHelper</span><span class="token punctuation">(</span>javaMailSender<span class="token punctuation">.</span><span class="token function">createMimeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//邮件发信人</span>            mimeMessageHelper<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span>sendMailer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//邮件收信人  1或多个</span>            mimeMessageHelper<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//邮件主题</span>            mimeMessageHelper<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//邮件内容</span>            mimeMessageHelper<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//邮件发送时间</span>            mimeMessageHelper<span class="token punctuation">.</span><span class="token function">setSentDate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//发送邮件</span>            javaMailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>mimeMessageHelper<span class="token punctuation">.</span><span class="token function">getMimeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"发送邮件成功: &#123;&#125; -> &#123;&#125;"</span><span class="token punctuation">,</span> sendMailer<span class="token punctuation">,</span> <span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MessagingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"发送邮件失败: &#123;&#125;"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 发送html邮件     * @param to 收件人     * @param subject 主题     * @param content 邮件内容     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendHtmlMailMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token keyword">to</span><span class="token punctuation">,</span><span class="token class-name">String</span> subject<span class="token punctuation">,</span><span class="token class-name">String</span> content<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        content<span class="token operator">=</span><span class="token string">"&lt;!DOCTYPE html>\n"</span> <span class="token operator">+</span>                <span class="token string">"&lt;html>\n"</span> <span class="token operator">+</span>                <span class="token string">"&lt;head>\n"</span> <span class="token operator">+</span>                <span class="token string">"&lt;meta charset=\"utf-8\">\n"</span> <span class="token operator">+</span>                <span class="token string">"&lt;title>邮件&lt;/title>\n"</span> <span class="token operator">+</span>                <span class="token string">"&lt;/head>\n"</span> <span class="token operator">+</span>                <span class="token string">"&lt;body>\n"</span> <span class="token operator">+</span>                <span class="token string">"\t&lt;h3>这是一封HTML邮件！&lt;/h3>\n"</span> <span class="token operator">+</span>                <span class="token string">"&lt;/body>\n"</span> <span class="token operator">+</span>                <span class="token string">"&lt;/html>"</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//true 代表支持复杂的类型</span>            <span class="token class-name">MimeMessageHelper</span> mimeMessageHelper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMessageHelper</span><span class="token punctuation">(</span>javaMailSender<span class="token punctuation">.</span><span class="token function">createMimeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//邮件发信人</span>            mimeMessageHelper<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span>sendMailer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//邮件收信人  1或多个</span>            mimeMessageHelper<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//邮件主题</span>            mimeMessageHelper<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//邮件内容   true 代表支持html</span>            mimeMessageHelper<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//邮件发送时间</span>            mimeMessageHelper<span class="token punctuation">.</span><span class="token function">setSentDate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//发送邮件</span>            javaMailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>mimeMessageHelper<span class="token punctuation">.</span><span class="token function">getMimeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"发送邮件成功: &#123;&#125; -> &#123;&#125;"</span><span class="token punctuation">,</span> sendMailer<span class="token punctuation">,</span> <span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MessagingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"发送邮件失败: &#123;&#125;"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 发送带附件的邮件     * @param to      邮件收信人     * @param subject 邮件主题     * @param content 邮件内容     * @param filePath 附件路径     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendAttachmentMailMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token keyword">to</span><span class="token punctuation">,</span><span class="token class-name">String</span> subject<span class="token punctuation">,</span><span class="token class-name">String</span> content<span class="token punctuation">,</span><span class="token class-name">String</span> filePath<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//true 代表支持复杂的类型</span>            <span class="token class-name">MimeMessageHelper</span> mimeMessageHelper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMessageHelper</span><span class="token punctuation">(</span>javaMailSender<span class="token punctuation">.</span><span class="token function">createMimeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//邮件发信人</span>            mimeMessageHelper<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span>sendMailer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//邮件收信人  1或多个</span>            mimeMessageHelper<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//邮件主题</span>            mimeMessageHelper<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//邮件内容   true 代表支持html</span>            mimeMessageHelper<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//邮件发送时间</span>            mimeMessageHelper<span class="token punctuation">.</span><span class="token function">setSentDate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//添加邮件附件</span>            <span class="token class-name">FileSystemResource</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileSystemResource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> fileName <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mimeMessageHelper<span class="token punctuation">.</span><span class="token function">addAttachment</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//发送邮件</span>            javaMailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>mimeMessageHelper<span class="token punctuation">.</span><span class="token function">getMimeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"发送邮件成功: &#123;&#125; -> &#123;&#125;"</span><span class="token punctuation">,</span> sendMailer<span class="token punctuation">,</span> <span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MessagingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"发送邮件失败: &#123;&#125;"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试类">测试类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Resource</span><span class="token keyword">private</span> <span class="token class-name">MailService</span> mailService<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">test08</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    mailService<span class="token punctuation">.</span><span class="token function">sendTextMailMessage</span><span class="token punctuation">(</span><span class="token string">"xxxxx@qq.com"</span><span class="token punctuation">,</span> <span class="token string">"测试标题"</span><span class="token punctuation">,</span> <span class="token string">"用来测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>service-register</title>
      <link href="/2023/10/26/service-register/"/>
      <url>/2023/10/26/service-register/</url>
      
        <content type="html"><![CDATA[<h1>服务注册</h1><h2 id="Linux">Linux</h2><h3 id="服务文件路径">服务文件路径</h3><ul><li>/lib/systemd/system/</li><li>/usr/lib/systemd/system/</li></ul><p><code>systemctl daemon-reload</code></p><h3 id="Nginx案例">Nginx案例</h3><h4 id="配置文件-nginx-service">配置文件 nginx.service</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span><span class="token assign-left variable">Description</span><span class="token operator">=</span>nginx - web server<span class="token assign-left variable">After</span><span class="token operator">=</span>network.target remote-fs.target nss-lookup.target<span class="token punctuation">[</span>Service<span class="token punctuation">]</span><span class="token assign-left variable">Type</span><span class="token operator">=</span>forking<span class="token assign-left variable">PIDFile</span><span class="token operator">=</span>/usr/local/nginx/logs/nginx.pid<span class="token assign-left variable">ExecStartPre</span><span class="token operator">=</span>/usr/local/nginx/sbin/nginx <span class="token parameter variable">-t</span> <span class="token parameter variable">-c</span> /usr/local/nginx/conf/nginx.conf<span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/local/nginx/sbin/nginx <span class="token parameter variable">-c</span> /usr/local/nginx/conf/nginx.conf<span class="token assign-left variable">ExecReload</span><span class="token operator">=</span>/usr/local/nginx/sbin/nginx <span class="token parameter variable">-s</span> reload<span class="token assign-left variable">ExecStop</span><span class="token operator">=</span>/usr/local/nginx/sbin/nginx <span class="token parameter variable">-s</span> stop<span class="token assign-left variable">ExecQuit</span><span class="token operator">=</span>/usr/local/nginx/sbin/nginx <span class="token parameter variable">-s</span> quit<span class="token assign-left variable">PrivateTmp</span><span class="token operator">=</span>true<span class="token punctuation">[</span>Install<span class="token punctuation">]</span><span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="注册脚本-参考">注册脚本(参考)</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment">## -bash: ./initdee.sh: /bin/bash^M: bad interpreter: No such file or directory</span><span class="token comment">## vim或者vi的命令模式下, 输入命令 set ff=unix 即可解决换行问题</span><span class="token builtin class-name">cd</span> /root<span class="token comment"># 此处是nginx位置</span><span class="token assign-left variable">nginxdir</span><span class="token operator">=</span><span class="token string">'/usr/local/nginx'</span><span class="token function">touch</span> nginx.service<span class="token builtin class-name">echo</span> <span class="token string">'[Unit]'</span> <span class="token operator">>></span> nginx.service<span class="token builtin class-name">echo</span> <span class="token string">'Description=nginx - web server'</span> <span class="token operator">>></span> nginx.service<span class="token builtin class-name">echo</span> <span class="token string">'After=network.target remote-fs.target nss-lookup.target'</span> <span class="token operator">>></span> nginx.service<span class="token builtin class-name">echo</span> <span class="token string">''</span> <span class="token operator">>></span> nginx.service<span class="token builtin class-name">echo</span> <span class="token string">'[Service]'</span> <span class="token operator">>></span> nginx.service<span class="token builtin class-name">echo</span> <span class="token string">'Type=forking'</span> <span class="token operator">>></span> nginx.service<span class="token builtin class-name">echo</span> <span class="token string">"PIDFile=<span class="token variable">$nginxdir</span>/logs/nginx.pid"</span> <span class="token operator">>></span> nginx.service<span class="token builtin class-name">echo</span> <span class="token string">"ExecStartPre=<span class="token variable">$nginxdir</span>/sbin/nginx -t -c <span class="token variable">$nginxdir</span>/conf/nginx.conf"</span> <span class="token operator">>></span> nginx.service<span class="token builtin class-name">echo</span> <span class="token string">"ExecStart=<span class="token variable">$nginxdir</span>/sbin/nginx -c <span class="token variable">$nginxdir</span>/conf/nginx.conf"</span> <span class="token operator">>></span> nginx.service<span class="token builtin class-name">echo</span> <span class="token string">"ExecReload=<span class="token variable">$nginxdir</span>/sbin/nginx -s reload"</span> <span class="token operator">>></span> nginx.service<span class="token builtin class-name">echo</span> <span class="token string">"ExecStop=<span class="token variable">$nginxdir</span>/sbin/nginx -s stop"</span> <span class="token operator">>></span> nginx.service<span class="token builtin class-name">echo</span> <span class="token string">"ExecQuit=<span class="token variable">$nginxdir</span>/sbin/nginx -s quit"</span> <span class="token operator">>></span> nginx.service<span class="token builtin class-name">echo</span> <span class="token string">'PrivateTmp=true'</span> <span class="token operator">>></span> nginx.service<span class="token builtin class-name">echo</span> <span class="token string">''</span> <span class="token operator">>></span> nginx.service<span class="token builtin class-name">echo</span> <span class="token string">'[Install]'</span> <span class="token operator">>></span> nginx.service<span class="token builtin class-name">echo</span> <span class="token string">'WantedBy=multi-user.target'</span> <span class="token operator">>></span> nginx.service<span class="token function">mv</span> nginx.service /usr/lib/systemd/system<span class="token builtin class-name">unset</span> nginxdirsystemctl daemon-reloadsystemctl <span class="token builtin class-name">enable</span> nginx.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Redis案例">Redis案例</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment">## -bash: ./initdee.sh: /bin/bash^M: bad interpreter: No such file or directory</span><span class="token comment">## vim或者vi的命令模式下, 输入命令 set ff=unix 即可解决换行问题</span><span class="token builtin class-name">cd</span> /usr/local/redis*<span class="token assign-left variable">redisdir</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">pwd</span><span class="token variable">`</span></span><span class="token function">touch</span> redis.service<span class="token builtin class-name">echo</span> <span class="token string">'[Unit]'</span> <span class="token operator">>></span> redis.service<span class="token builtin class-name">echo</span> <span class="token string">'Description=Redis'</span> <span class="token operator">>></span> redis.service<span class="token builtin class-name">echo</span> <span class="token string">'After=syslog.target network.target remote-fs.target nss-lookup.target'</span> <span class="token operator">>></span> redis.service<span class="token builtin class-name">echo</span> <span class="token string">''</span> <span class="token operator">>></span> redis.service<span class="token builtin class-name">echo</span> <span class="token string">'[Service]'</span> <span class="token operator">>></span> redis.service<span class="token builtin class-name">echo</span> <span class="token string">'Type=forking'</span> <span class="token operator">>></span> redis.service<span class="token builtin class-name">echo</span> <span class="token string">'PIDFile=/var/run/redis_6379.pid'</span> <span class="token operator">>></span> redis.service<span class="token builtin class-name">echo</span> <span class="token string">"ExecStart=<span class="token variable">$redisdir</span>/src/redis-server <span class="token variable">$redisdir</span>/redis.conf"</span> <span class="token operator">>></span> redis.service<span class="token builtin class-name">echo</span> <span class="token string">"ExecReload=<span class="token variable">$redisdir</span>/src/redis-server -s reload"</span> <span class="token operator">>></span> redis.service<span class="token builtin class-name">echo</span> <span class="token string">"ExecStop=<span class="token variable">$redisdir</span>/src/redis-server -s stop"</span> <span class="token operator">>></span> redis.service<span class="token builtin class-name">echo</span> <span class="token string">'PrivateTmp=true'</span> <span class="token operator">>></span> redis.service<span class="token builtin class-name">echo</span> <span class="token string">''</span> <span class="token operator">>></span> redis.service<span class="token builtin class-name">echo</span> <span class="token string">'[Install]'</span> <span class="token operator">>></span> redis.service<span class="token builtin class-name">echo</span> <span class="token string">'WantedBy=multi-user.target'</span> <span class="token operator">>></span> redis.service<span class="token function">mv</span> redis.service /usr/lib/systemd/systemsystemctl daemon-reloadsystemctl <span class="token builtin class-name">enable</span> redis.service<span class="token comment">## 修改redis.conf </span><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/daemonize no/daemonize yes/g'</span> redis.conf<span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/# supervised auto/supervised auto/g'</span> redis.conf<span class="token builtin class-name">cd</span> ~<span class="token builtin class-name">unset</span> redisdir<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Java项目案例-动态注册">Java项目案例(动态注册)</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment">## -bash: ./initdee.sh: /bin/bash^M: bad interpreter: No such file or directory</span><span class="token comment">## vim或者vi的命令模式下, 输入命令 set ff=unix 即可解决换行问题</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Windows">Windows</h2><p>本案例采取winsw, 并且通过<code>bat</code>脚本进行服务的管理. 也可以通过服务管理器进行管理</p><h3 id="所需文件">所需文件</h3><ol><li><code>winsw.exe</code> 启动文件</li><li><code>winsw.xml</code> 配置文件</li></ol><h3 id="java-项目案例">java 项目案例</h3><h4 id="注册服务">注册服务</h4><pre class="line-numbers language-bat" data-language="bat"><code class="language-bat">@echo offecho -----------------------echo Sentinel 一键安装程序echo -----------------------%~d0cd %~dp0echo Sentinel安装服务中winsw installecho Sentinel安装完成pause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="启动服务">启动服务</h4><pre class="line-numbers language-bat" data-language="bat"><code class="language-bat">@echo offecho -----------------------echo Sentinel 一键启动程序echo ----------------------- net start Sentinelpause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="关闭服务">关闭服务</h4><pre class="line-numbers language-bat" data-language="bat"><code class="language-bat">@echo offecho -----------------------echo Sentinel 一键关闭echo -----------------------:: 此处是服务名net stop Sentinelpause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="卸载服务">卸载服务</h4><pre class="line-numbers language-bat" data-language="bat"><code class="language-bat">@echo offecho -----------------------echo saddyfire Sentinel 一键卸载程序echo -----------------------%~d0cd %~dp0echo Sentinel卸载服务中winsw uninstallecho Sentinel卸载完成pause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置文件-xml">配置文件 xml</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>service</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 指定在Windows系统内部使用的识别服务的ID。在系统中安装的所有服务中，这必须是唯一的，它应该完全由字母数字字符组成 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>Sentinel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!-- 服务的简短名称，它可以包含空格和其他字符。尽量简短，就像“id”一样，在系统的所有服务名称中，也要保持唯一 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Sentinel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 该服务可读描述。当选中该服务时，它将显示在Windows服务管理器中 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Sentinel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 环境变量设置 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>env</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JAVA_HOME<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>%JAVA_HOME%<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token comment">&lt;!-- 启动方式: 开机自启 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>startmode</span><span class="token punctuation">></span></span>Automatic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>startmode</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 可执行文件传递的参数 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arguments</span><span class="token punctuation">></span></span>-Xrs -Xmx256m -jar "%BASE%\sentinel-dashboard-1.8.1.jar"  --server.port=9999<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>arguments</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 该元素指定要启动的可执行文件 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executable</span><span class="token punctuation">></span></span>java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executable</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 日志输出位置 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logmode</span><span class="token punctuation">></span></span>rotate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logmode</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>service</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="nacos服务案例">nacos服务案例</h3><h4 id="服务注册">服务注册</h4><pre class="line-numbers language-bat" data-language="bat"><code class="language-bat">@echo offecho -----------------------echo nacos 一键安装程序echo -----------------------%~d0cd %~dp0:: 复制winsw.exe至 \binxcopy &#x2F;Y &#x2F;E &#x2F;i winsw.exe ..\bin\:: 复制winsw.xml 配置文件至 \bincopy &#x2F;Y winsw.xml ..\bin\:: 进入 \bincd ..\bin\echo saddyfire安装服务中winsw installecho saddyfire安装完成pause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="启动服务-2">启动服务</h4><pre class="line-numbers language-bat" data-language="bat"><code class="language-bat">@echo offecho -----------------------echo saddyfire 666 一键启动程序echo ----------------------- net start Nacospause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="关闭服务-2">关闭服务</h4><pre class="line-numbers language-bat" data-language="bat"><code class="language-bat">@echo offecho -----------------------echo saddyfire 666 一键关闭echo -----------------------:: 此处是服务名net stop Nacospause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="卸载服务-2">卸载服务</h4><pre class="line-numbers language-bat" data-language="bat"><code class="language-bat">@echo offecho -----------------------echo saddyfire 666 一键卸载程序echo -----------------------%~d0cd %~dp0echo Nacos卸载服务中winsw uninstallecho Nacos卸载完成pause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置文件-xml-2">配置文件 xml</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>service</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 指定在Windows系统内部使用的识别服务的ID。在系统中安装的所有服务中，这必须是唯一的，它应该完全由字母数字字符组成 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>Nacos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 服务的简短名称，它可以包含空格和其他字符。尽量简短，就像“id”一样，在系统的所有服务名称中，也要保持唯一 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Nacos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 该服务可读描述。当选中该服务时，它将显示在Windows服务管理器中 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>注册中心<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 该元素指定要启动的可执行文件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executable</span><span class="token punctuation">></span></span>%BASE%\startup.cmd<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executable</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 日志输出位置 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logmode</span><span class="token punctuation">></span></span>rotate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logmode</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>service</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="PS-普通命令启动Nacos">PS: 普通命令启动Nacos</h4><pre class="line-numbers language-bat" data-language="bat"><code class="language-bat">@echo off:: 此处为nacos位置start cmd &#x2F;k &quot;cd &#x2F;d D:\develop\nacos-server-1.4.1\nacos\bin\ &amp;&amp; startup.cmd -m standalone&quot;exit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DM备份还原笔记</title>
      <link href="/2023/10/21/dm-move/"/>
      <url>/2023/10/21/dm-move/</url>
      
        <content type="html"><![CDATA[<h1>DM备份还原笔记</h1><h2 id="还原">还原</h2><h3 id="备份文件拆分-Linux">备份文件拆分(Linux)</h3><p>当库体积太大时, 需要对备份文件进行拆分</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># -b 输出文件大小</span><span class="token comment"># -d 使用数字命名尾缀</span><span class="token comment"># -a 尾椎的长度(默认2)</span><span class="token function">split</span> <span class="token parameter variable">-b</span> 1G <span class="token parameter variable">-d</span> DB_DAMENG1_FULL_2023_09_23_01_00_22.bak DB_DAMENG1_FULL_2023_09_23_01_00_22.bak.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="合并备份文件并解压-Windows">合并备份文件并解压(Windows)</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">d:<span class="token builtin class-name">cd</span> dmcopy /b DB_DAMENG1_FULL_2023_09_23_01_00_22.bak.* DB_DAMENG1_FULL_2023_09_23_01_00_22.bak<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>补充（Linux环境下打包后进行拆分）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> <span class="token parameter variable">-zcvf</span> dmbak.tar.gz DB_DAMENG1_FULL_2023_09_16_01_00_53.bak <span class="token operator">|</span> <span class="token function">split</span> <span class="token parameter variable">-b</span> 1G <span class="token parameter variable">-d</span> <span class="token parameter variable">-a</span> <span class="token number">2</span> - dmbak.tar.gz.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="DM备份还原">DM备份还原</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">backup database backupset <span class="token string">'/data/dmbak/BACKUP_FILE_01'</span><span class="token punctuation">;</span>--还原./dmrman <span class="token assign-left variable">CTLSTMT</span><span class="token operator">=</span><span class="token string">"RESTORE DATABASE '/data/dmdata/DAMENG1/dm.ini' FROM BACKUPSET '/data/dmbak/BACKUP_FILE_01'"</span>--恢复./dmrman <span class="token assign-left variable">CTLSTMT</span><span class="token operator">=</span><span class="token string">"RECOVER DATABASE '/data/dmdata/DAMENG1/dm.ini' FROM BACKUPSET '/data/dmbak/BACKUP_FILE01'"</span>--更新魔术./dmrman <span class="token assign-left variable">CTLSTMT</span><span class="token operator">=</span><span class="token string">"RECOVER DATABASE '/data/dmdata/DAMENG1/dm.ini' UPDATE DB_MAGIC"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="备份">备份</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 清理备份</span>SF_BAKSET_BACKUP_DIR_ADD<span class="token punctuation">(</span><span class="token string">'DISK'</span><span class="token punctuation">,</span><span class="token string">'/data/dmbak'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CALL</span> SP_DB_BAKSET_REMOVE_BATCH<span class="token punctuation">(</span><span class="token string">'DISK'</span><span class="token punctuation">,</span>SYSDATE<span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="../dm-move/image-20231023105654298.png" alt="全量备份"></p><p><img src="../dm-move/image-20231023105722948.png" alt="增量备份"></p>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NIO</title>
      <link href="/2023/09/14/nio/"/>
      <url>/2023/09/14/nio/</url>
      
        <content type="html"><![CDATA[<h2 id="ByteBuffer">ByteBuffer</h2><h3 id="结构">结构</h3><ul><li>capacity 容量</li><li>position 写入(读取)位置</li><li>limit 写入(读取)限制</li></ul><ol><li>初始状态, 写模式(图1-1)</li></ol><p><img src="../Nio/image-20231021144519852.png" alt="图1-1"></p><ol start="2"><li>写入数据后, position为写入位置, limit=capacity(图1-2)</li></ol><p><img src="../Nio/image-20231021144841728.png" alt="图1-2"></p><ol start="3"><li>flip转换模式后, postition切换为读取位置, limit切换为读取限制(图1-3)</li></ol><p><img src="../Nio/image-20231021145049802.png" alt="图1-3"></p><ol start="4"><li>读取4个字节后(图1-4)</li></ol><p><img src="../Nio/image-20231021145221000.png" alt="图1-4"></p><ol start="5"><li>clear动作, 清除数据, 重置为写模式(图1-5)</li></ol><p><img src="../Nio/image-20231021145402124.png" alt="图1-5"></p><ol start="6"><li>compact动作, 将未读完的向前压缩, 再重置为写模式(图1-6)</li></ol><p><img src="../Nio/image-20231021145507817.png" alt="图1-6"></p><h3 id="常用方法">常用方法</h3><h4 id="分配空间">分配空间</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// java.nio.HeapByteBuffer  - Java 堆内存(读写效率较低,受到GC的影响)</span><span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocateDirect</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// java.nio.DirectByteBuffer  - 直接内存(读写效率高,少一次拷贝, 分配效率低, 使用不当会造成内存泄漏)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="写入数据">写入数据</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileChannel</span> channel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// channel的读取</span><span class="token keyword">int</span> readBytes <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 或者buffer自己的方法</span>buffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token number">127</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="读取数据">读取数据</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 切换至读模式</span><span class="token keyword">byte</span> b <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 或者channel的方法</span><span class="token keyword">int</span> writeByte <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// get方法会让position读指针向后走</span>buffer<span class="token punctuation">.</span><span class="token function">rewind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将position重置</span>buffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取索引内容, 不会移动读指针</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="字符串转为ByteBuffer">字符串转为ByteBuffer</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 1. 字符串转为 ByteBuffer</span><span class="token class-name">ByteBuffer</span> buffer1 <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>buffer1<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2. Charset (自动切换为读模式)</span><span class="token class-name">ByteBuffer</span> buffer2 <span class="token operator">=</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">defaultCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"hello\nworld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3. wrap (自动切换为读模式)</span><span class="token class-name">ByteBuffer</span> buffer3 <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4. 转为字符串</span><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>buffer2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 5. </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="黏包、分包demo">黏包、分包demo</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">ByteBuffer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">StandardCharsets</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestByteBufferExamDee</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ByteBuffer</span> source <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        source<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Hello,world\nI'm zhangsan\nHo"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">split</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>        source<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"w are you?\n"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">split</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span> source<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 切换读模式</span>        source<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 遍历buffer</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> source<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'\n'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 接收者的长度 = \n 的位置 - 当前读指针位置 + 1</span>                <span class="token keyword">int</span> l <span class="token operator">=</span> i <span class="token operator">-</span> source<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    buffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                source<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 此处要让position再接着走一步, 跳过\n</span>                buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 读取完重新压缩 buffer(此处不能使用clear)</span>        source<span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="网络编程">网络编程</h2><h3 id="多路复用">多路复用</h3><p>单线程可以配合 Selector 完成对多个 Channel 可读写事件的监控，这称之为多路复用</p><ul><li>多路复用仅针对网络 IO、普通文件 IO 没法利用多路复用</li><li>如果不用 Selector 的非阻塞模式，线程大部分时间都在做无用功，而 Selector 能够保证<ul><li>有可连接事件时才去连接</li><li>有可读事件才去读取</li><li>有可写事件才去写入<ul><li>限于网络传输能力，Channel 未必时时可写，一旦 Channel 可写，会触发 Selector 的可写事件</li></ul></li></ul></li></ul><p><img src="../Nio/image-20231029230052355.png" alt="Selector模型"></p><h3 id="处理Read事件demo">处理Read事件demo</h3><ul><li>服务端</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">InetSocketAddress</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">ByteBuffer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span></span><span class="token class-name">SelectableChannel</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span></span><span class="token class-name">SelectionKey</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span></span><span class="token class-name">Selector</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span></span><span class="token class-name">ServerSocketChannel</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span></span><span class="token class-name">SocketChannel</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">StandardCharsets</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Iterator</span></span><span class="token punctuation">;</span><span class="token comment">/** * @author Dee * @date 2023/10/19 * &lt;p>Description: NIO demo, 使用Selector管理 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeeServer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 开启服务器</span>        <span class="token class-name">ServerSocketChannel</span> ssc <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置为非阻塞</span>        ssc<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 绑定端口</span>        ssc<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建select管理多个channel</span>        <span class="token class-name">Selector</span> sel <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 注册ssc</span>        <span class="token class-name">SelectionKey</span> sscKey <span class="token operator">=</span> ssc<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>sel<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"注册ssc, &#123;&#125;"</span><span class="token punctuation">,</span> sscKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 关注接收事件</span>        sscKey<span class="token punctuation">.</span><span class="token function">interestOps</span><span class="token punctuation">(</span><span class="token class-name">SelectionKey</span><span class="token punctuation">.</span><span class="token constant">OP_ACCEPT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sel<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 无事件阻塞, 有事件继续执行</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"有事件接入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 遍历selKeys</span>            <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">></span></span> ite <span class="token operator">=</span> sel<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>ite<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">SelectionKey</span> sk <span class="token operator">=</span> ite<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"迭代sk, &#123;&#125;"</span><span class="token punctuation">,</span> sk<span class="token punctuation">)</span><span class="token punctuation">;</span>                ite<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 处理key的时候一定用删除, 否则每次循环处理相同key会npe</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>sk<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 如果是访问事件</span>                    <span class="token comment">// 获取通道</span>                    <span class="token class-name">SelectableChannel</span> channel <span class="token operator">=</span> sk<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 强转为 ssc</span>                    <span class="token class-name">ServerSocketChannel</span> ssch <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ServerSocketChannel</span><span class="token punctuation">)</span> channel<span class="token punctuation">;</span>                    <span class="token comment">// 建立连接</span>                    <span class="token class-name">SocketChannel</span> sc <span class="token operator">=</span> ssch<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    sc<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置为非阻塞</span>                    <span class="token comment">// 分配空间</span>                    <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// attachment</span>                    <span class="token comment">// 注册sc, 将buffer作为附件关联</span>                    <span class="token class-name">SelectionKey</span> scKey <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>sel<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 关注读事件</span>                    scKey<span class="token punctuation">.</span><span class="token function">interestOps</span><span class="token punctuation">(</span><span class="token class-name">SelectionKey</span><span class="token punctuation">.</span><span class="token constant">OP_READ</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"连接成功, &#123;&#125;"</span><span class="token punctuation">,</span> sc<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sk<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 如果是读取事件</span>                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">// 获取通道并强转</span>                        <span class="token class-name">SocketChannel</span> channel <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SocketChannel</span><span class="token punctuation">)</span> sk<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// 获取附件(buffer)</span>                        <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">)</span> sk<span class="token punctuation">.</span><span class="token function">attachment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">int</span> read <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果是正常断开, read是-1</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>read <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            sk<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                            <span class="token comment">// 截取\n</span>                            <span class="token function">split</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment">// 如果截取后发现指针没变, 说明没接到\n, 需要扩容</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> buffer<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                                <span class="token comment">// 创建新的bf并替换attachment</span>                                <span class="token class-name">ByteBuffer</span> newBuffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                newBuffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                                sk<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>newBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        sk<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 事件取消注册, 因为客户端已经断开, 会产生一个读事件, 因此不处理会死循环</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     *     * @param source     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span> source<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        source<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 循环遍历</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> source<span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">'\n'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> l <span class="token operator">=</span> i <span class="token operator">-</span> source<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    buffer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                source<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 此处别忘了, 转换为读模式</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        source<span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>客户端</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">InetSocketAddress</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">SocketAddress</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span></span><span class="token class-name">SocketChannel</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">StandardCharsets</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SocketChannel</span> sc <span class="token operator">=</span> <span class="token class-name">SocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sc<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SocketAddress</span> address <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">getLocalAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"waiting..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        sc.write(Charset.defaultCharset().encode("hello\nworld"));</span>        sc<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"helloworldabcdefghdf\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        sc.close();</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="处理Write事件demo">处理Write事件demo</h3><ul><li>服务端</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">InetSocketAddress</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">ByteBuffer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span></span><span class="token class-name">SelectionKey</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span></span><span class="token class-name">Selector</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span></span><span class="token class-name">ServerSocketChannel</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span></span><span class="token class-name">SocketChannel</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">Charset</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Iterator</span></span><span class="token punctuation">;</span><span class="token comment">/** * @author Dee * @date 2023/10/23 * &lt;p>Description: 处理write写事件 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeeWriteServer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ServerSocketChannel</span> ssc <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ssc<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Selector</span> selector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ssc<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span><span class="token constant">OP_ACCEPT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ssc<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">></span></span> iter <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>iter<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">SelectionKey</span> sk <span class="token operator">=</span> iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                iter<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>sk<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 此处因为知道一定是 ssc的连接, 因此就不再从sk中取通道</span>                    <span class="token class-name">SocketChannel</span> sc <span class="token operator">=</span> ssc<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"已连接"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    sc<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">SelectionKey</span> sck <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span><span class="token constant">OP_READ</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 测试写 三百万个长度的 字符串</span>                    <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token class-name">ByteBuffer</span> bf <span class="token operator">=</span> <span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">defaultCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 先写一次</span>                    <span class="token keyword">int</span> write <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bf<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>write<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打印写了多少的长度</span>                    <span class="token comment">// 防止写不完, 如果还有剩余的继续写</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>bf<span class="token punctuation">.</span><span class="token function">hasRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">// 未写完的会触发新的事件, 因此需要关注写事件, 同时也要拿到之前的事件</span>                        sck<span class="token punctuation">.</span><span class="token function">interestOps</span><span class="token punctuation">(</span>sck<span class="token punctuation">.</span><span class="token function">interestOps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span><span class="token constant">OP_WRITE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//                        sk.interestOps(sk.interestOps() + SelectionKey.OP_WRITE); // 两种写法</span>                        <span class="token comment">// 把buffer存起来</span>                        sck<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>bf<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sk<span class="token punctuation">.</span><span class="token function">isWritable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 把上次未写完的buffer拿出来</span>                    <span class="token class-name">ByteBuffer</span> bf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">)</span> sk<span class="token punctuation">.</span><span class="token function">attachment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">SocketChannel</span> sc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SocketChannel</span><span class="token punctuation">)</span> sk<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> write <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bf<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>write<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 如果没有数据可写了, 则删除附件, 并且去除关注的读事件</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bf<span class="token punctuation">.</span><span class="token function">hasRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        sk<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        sk<span class="token punctuation">.</span><span class="token function">interestOps</span><span class="token punctuation">(</span>sk<span class="token punctuation">.</span><span class="token function">interestOps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token class-name">SelectionKey</span><span class="token punctuation">.</span><span class="token constant">OP_WRITE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>客户端</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">InetSocketAddress</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">ByteBuffer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>channels<span class="token punctuation">.</span></span><span class="token class-name">SocketChannel</span></span><span class="token punctuation">;</span><span class="token comment">/** * @author Dee * @date 2023/10/24 * &lt;p>Description: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeeWriteClient</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SocketChannel</span> sc <span class="token operator">=</span> <span class="token class-name">SocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sc<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 定义总共读取的长度</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            count <span class="token operator">+=</span> sc<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"读取的长度："</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="selector不阻塞情况">selector不阻塞情况</h3><blockquote><ul><li>事件发生时<ul><li>客户端发起连接请求，会触发 accept 事件</li><li>客户端发送数据过来，客户端正常、异常关闭时，都会触发 read 事件，另外如果发送的数据大于 buffer 缓冲区，会触发多次读取事件</li><li>channel 可写，会触发 write 事件</li><li>在 linux 下 nio bug 发生时</li></ul></li><li>调用 selector.wakeup()</li><li>调用 selector.close()</li><li>selector 所在线程 interrupt</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> NIO </tag>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>crontab定时任务</title>
      <link href="/2023/09/08/crontab/"/>
      <url>/2023/09/08/crontab/</url>
      
        <content type="html"><![CDATA[<h3 id="命令">命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">crontab</span> <span class="token parameter variable">-l</span>  <span class="token comment"># 查看定时任务</span><span class="token function">crontab</span> <span class="token parameter variable">-e</span>  <span class="token comment"># 编辑定时任务</span>cron表达式 + 执行的命令 <span class="token comment"># 定时格式</span><span class="token comment">#### 常用cron表达式(ps: linux没有秒)</span><span class="token comment"># 分 时 日 月 日/周(星期天为0)</span><span class="token number">0</span> */1 * * *  <span class="token comment"># 每隔1小时执行, 等价于 ==> 0 * * * *</span><span class="token number">0</span> <span class="token number">8</span> * * <span class="token number">1</span>-5  <span class="token comment"># 从周一至周五, 每天8:00执行</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">1,15</span> * * <span class="token comment"># 每月1/15号执行</span>* * * * * <span class="token comment"># 每分钟执行一次</span><span class="token number">1</span> * * * *  <span class="token comment"># 每小时第一分执行</span><span class="token number">30</span> <span class="token number">6</span> */10 * * <span class="token comment"># 从1日开始每隔10天的6:30执行</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> * <span class="token comment"># 每年执行一次(因为月,日,时,分都已指定,因此可以确定是每年)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一些清理命令">一些清理命令</h3><ul><li>删除目标文件夹下的文件</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> /tmp <span class="token parameter variable">-name</span> <span class="token string">"*.jpg"</span> <span class="token parameter variable">-type</span> f <span class="token parameter variable">-delete</span>  <span class="token comment"># 查询/tmp文件夹下的所有"*.jpg"的文件并删除</span><span class="token function">find</span> /logs/ <span class="token parameter variable">-type</span> f <span class="token parameter variable">-mmin</span> +30 <span class="token parameter variable">-name</span> <span class="token string">'*'</span> <span class="token parameter variable">-exec</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">\</span>  <span class="token comment"># 查询/logs/文件夹下修改时间是30分钟之外的所有文件并删除 </span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +<span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token variable">`</span></span> <span class="token operator">>></span> /logs/clear.out <span class="token comment"># 输出当前时间到清理日志中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>goaccess</title>
      <link href="/2023/09/02/goaccess/"/>
      <url>/2023/09/02/goaccess/</url>
      
        <content type="html"><![CDATA[<h1>Nginx日志分析</h1><h2 id="linux-工具">linux 工具</h2><p>获取前20的ip访问数量</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 具体截取位置根据日志格式</span><span class="token function">awk</span> <span class="token string">'&#123;print $1&#125;'</span> access-<span class="token variable"><span class="token variable">`</span><span class="token function">date</span> <span class="token string">"+%Y-%m-%d"</span><span class="token variable">`</span></span>.log <span class="token operator">|</span> <span class="token function">sort</span> <span class="token operator">|</span> <span class="token function">uniq</span> <span class="token parameter variable">-c</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-nr</span> <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-n</span> <span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="goaccess统计分析">goaccess统计分析</h2><p>window安装教程</p><h3 id="下载goaccess包">下载goaccess包</h3><p><a href="https://goaccess.io/">https://goaccess.io/</a></p><h3 id="安装cygwin">安装cygwin</h3><ol><li><p>官网地址</p><p><a href="http://www.cygwin.com/">http://www.cygwin.com/</a></p></li><li><p>在cygwin中需要安装的包</p><pre class="line-numbers language-none"><code class="language-none">libGeoIP-devel           | GeoIP2 C librarylibncurses-devel         | Terminal display librarylibncursesw10            | Terminal display library (wide-character)gcc-core (C)             | GNU Compiler Collectionmake                     | make utilityautomake                 | GNU Makefilesgettext                  | GNU Gettextautomake wrapper scripts | wrapper scripts for automake and aclocal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="安装goaccess">安装goaccess</h3><ol><li><p>将<code>goaccess-1.7.2.tar.gz</code>放入<code>cygwin</code>目录下</p></li><li><p>打开cygwin</p><pre class="line-numbers language-none"><code class="language-none">tar -xzvf goaccess-1.7.2.tar.gzcd goaccess-1.7.2.&#x2F;configure --enable-utf8 --enable-geoip&#x3D;legacy# 如果不成功则执行 .&#x2F;configure --enable-utf8makemake install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="配置文件格式">配置文件格式</h3><p>nginx.conf</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">log_format</span>  main  <span class="token string">'<span class="token variable">$remote_addr</span> - <span class="token variable">$remote_user</span> [<span class="token variable">$time_iso8601]</span> requesthost:"<span class="token variable">$http_host</span>"; "<span class="token variable">$request</span>" requesttime:"<span class="token variable">$request_time</span>"; '</span><span class="token string">'<span class="token variable">$status</span> <span class="token variable">$body_bytes_sent</span> "<span class="token variable">$http_referer</span>" - <span class="token variable">$request_body</span>'</span>                      <span class="token string">'"<span class="token variable">$http_user_agent</span>" "<span class="token variable">$http_x_forwarded_for</span>"'</span></span><span class="token punctuation">;</span><span class="token comment">## 日志输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>goaccess.conf</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">time-format %Tdate-format %Y-%m-%dlog-format %h - %^ <span class="token punctuation">[</span>%dT%t+%^<span class="token punctuation">]</span> requesthost:<span class="token string">"%v"</span><span class="token punctuation">;</span> <span class="token string">"%r"</span> requesttime:<span class="token string">"%T"</span><span class="token punctuation">;</span> %s %b <span class="token string">"%R"</span> - %^<span class="token string">"%u"</span><span class="token comment">##########</span><span class="token comment"># 参数说明</span><span class="token comment">##########</span><span class="token comment"># $remote_addr  >>>  %h</span><span class="token comment"># $remote_user  >>>  %^</span><span class="token comment"># $time_iso8601 >>>  %dT%t+%^</span><span class="token comment"># $http_host    >>>  %v</span><span class="token comment"># $request      >>>  %r</span><span class="token comment"># $request_time >>>  %T</span><span class="token comment"># $status >>>  %s</span><span class="token comment"># $body_bytes_sent >>> %b</span><span class="token comment"># $http_referer >>>  %R</span><span class="token comment"># $request_body >>>  %^</span><span class="token comment"># $http_user_agent >>> %u</span><span class="token comment"># $http_x_forwarded_for >>> </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="启动命令">启动命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 此处采用动态文件路径, 将日志文件输出至cygwin目录下</span><span class="token assign-left variable"><span class="token environment constant">LANG</span></span><span class="token operator">=</span><span class="token string">"zh_CN.UTF-8"</span> goaccess /cygdrive/d/nginx-1.20.2/nginx-1.19.5.1/logs/access-<span class="token variable"><span class="token variable">`</span><span class="token function">date</span> <span class="token string">"+%Y-%m-%d"</span><span class="token variable">`</span></span>.log <span class="token parameter variable">-p</span> /cygdrive/d/cygwin64/goaccess-1.7.2/config/goaccess.conf <span class="token parameter variable">-o</span> D:/cygwin64/report.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wsl-note</title>
      <link href="/2023/08/22/wsl-note/"/>
      <url>/2023/08/22/wsl-note/</url>
      
        <content type="html"><![CDATA[<h2 id="系统安装与启动">系统安装与启动</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wsl <span class="token parameter variable">--install</span>  <span class="token comment"># 安装后重启计算机</span>wsl <span class="token parameter variable">-l</span> <span class="token parameter variable">-o</span>  <span class="token comment"># 查看可用发行版列表</span>wsl <span class="token parameter variable">-l</span> <span class="token parameter variable">-v</span><span class="token comment"># 查看当前的wsl版本以及状态</span>wsl <span class="token parameter variable">--shutdown</span>  <span class="token comment"># 立即终止所有正在运行的分发和WSL2轻型工具虚拟机</span>wsl <span class="token parameter variable">--terminate</span> <span class="token operator">&lt;</span>Distribution Name<span class="token operator">></span>  <span class="token comment"># 关闭指定发行版</span>wsl <span class="token parameter variable">-d</span> Ubuntu <span class="token comment"># 启动</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="迁移系统位置">迁移系统位置</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wsl <span class="token parameter variable">-l</span> <span class="token parameter variable">--all</span> <span class="token parameter variable">-v</span>  <span class="token comment"># 查看所有分发版本</span>wsl <span class="token parameter variable">--export</span> Ubuntu D:<span class="token punctuation">\</span>ubuntu.tar<span class="token comment"># 导出分发版为tar文件到D盘</span>wsl <span class="token parameter variable">--unregister</span> Ubuntu<span class="token comment"># 注销当前分发版</span>wsl <span class="token parameter variable">--import</span> Ubuntu D:<span class="token punctuation">\</span>develop<span class="token punctuation">\</span>wsl<span class="token punctuation">\</span>ubuntu D:<span class="token punctuation">\</span>ubuntu.tar <span class="token parameter variable">--version</span> <span class="token number">2</span>  <span class="token comment"># 重新导入并安装分发版在D:\wsl\ubuntu</span>Ubuntu config --default-user <span class="token punctuation">&#123;</span>dee<span class="token punctuation">&#125;</span><span class="token comment"># 设置默认登陆用户为安装时用户名</span>del D:<span class="token punctuation">\</span>ubuntu.tar<span class="token comment"># 删除导出的tar文件(可选)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="基础配置">基础配置</h2><p>设置apt国内镜像源可以加速下载</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/apt/sources.list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>替换全部</p><pre class="line-numbers language-null" data-language="null"><code class="language-null"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; jammy main restricted universe multiverse# deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; jammy main restricted universe multiversedeb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; jammy-updates main restricted universe multiverse# deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; jammy-updates main restricted universe multiversedeb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; jammy-backports main restricted universe multiverse# deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; jammy-backports main restricted universe multiversedeb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; jammy-security main restricted universe multiverse# deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; jammy-security main restricted universe multiverse# 预发布软件源，不建议启用# deb https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; jammy-proposed main restricted universe multiverse# deb-src https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;ubuntu&#x2F; jammy-proposed main restricted universe multiverse<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>apt 命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> update <span class="token comment"># 列出所有可更新的软件清单命令</span><span class="token function">sudo</span> <span class="token function">apt</span> upgrade <span class="token comment"># 升级软件包</span><span class="token function">apt</span> list <span class="token parameter variable">--upgradeable</span> <span class="token comment"># 列出可更新的软件包及版本信息</span><span class="token function">sudo</span> <span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt</span> upgrade <span class="token parameter variable">-y</span> <span class="token comment"># 组合命令</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token operator">&lt;</span>package_name<span class="token operator">>=</span><span class="token operator">&lt;</span>version_number<span class="token operator">></span>  <span class="token comment"># 安装指定版本</span><span class="token function">sudo</span> <span class="token function">apt</span> remove <span class="token operator">&lt;</span>package_name<span class="token operator">></span> <span class="token comment"># 删除软件包</span><span class="token function">sudo</span> <span class="token function">apt</span> autoremove <span class="token comment"># 清理不再使用的依赖和库文件</span><span class="token function">sudo</span> <span class="token function">apt</span> purge <span class="token operator">&lt;</span>package_name<span class="token operator">></span> <span class="token comment"># 移除软件包及配置文件</span><span class="token function">sudo</span> <span class="token function">apt</span> search <span class="token operator">&lt;</span>keyword<span class="token operator">></span> <span class="token comment"># 查找软件包</span><span class="token function">apt</span> list <span class="token parameter variable">--installed</span> <span class="token comment"># 列出所有已安装的包</span><span class="token function">apt</span> list --all-versions <span class="token comment"># 列出所有已安装的包的版本信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开机自启</p><ol><li><p><code>win+R</code> 运行 <code>shell:startup</code></p></li><li><p>在目录中创建 <code>wsl-startup.vbs</code>文件</p><pre class="line-numbers language-visual-basic" data-language="visual-basic"><code class="language-visual-basic"><span class="token keyword">set</span> ws<span class="token operator">=</span>wscript<span class="token punctuation">.</span>CreateObject<span class="token punctuation">(</span><span class="token string">"wscript.shell"</span><span class="token punctuation">)</span>ws<span class="token punctuation">.</span>run <span class="token string">"wsl -d Ubuntu"</span><span class="token punctuation">,</span> vbhide<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>重启电脑</p></li></ol><h2 id="mysql安装">mysql安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> search mysql-server <span class="token comment"># 搜索版本</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> mysql-server <span class="token parameter variable">-y</span> <span class="token comment"># 安装</span>systmctl start mysql <span class="token comment"># 启动</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>mysql登录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/mysql/debian.cnf <span class="token comment"># 查看密码(注意vim中要 ctrl+shift+c是全局复制)</span>    user     <span class="token operator">=</span> debian-sys-maint    password <span class="token operator">=</span> vkOJolrKJqv950Hjmysql <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span> <span class="token comment"># 登录</span>复制密码后登录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更改密码</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">use</span> mysql<span class="token punctuation">;</span><span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> authentication_string<span class="token operator">=</span><span class="token string">''</span> <span class="token keyword">where</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span>  <span class="token comment">--将字段置为空</span><span class="token keyword">alter</span> <span class="token keyword">user</span> <span class="token string">'root'</span><span class="token variable">@'localhost'</span> identified <span class="token keyword">with</span> mysql_native_password <span class="token keyword">by</span> <span class="token string">'root'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>更改访问权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/mysql/mysql.conf.d/mysqld.cnf<span class="token comment"># 注释下面这段</span><span class="token comment"># bind-address          = 127.0.0.1</span><span class="token function">sudo</span> systemctl restart mysql <span class="token comment"># 重启</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>linux端登录mysql</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> host<span class="token punctuation">,</span><span class="token keyword">user</span> <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span>  <span class="token comment">-- 查询各用户放开权限</span><span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> host <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token keyword">where</span> <span class="token keyword">user</span> <span class="token operator">=</span> <span class="token string">'root'</span><span class="token punctuation">;</span>  <span class="token comment">-- 修改成%表示，所有主机都可以通过root用户访问数据库</span>flush <span class="token keyword">privileges</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="windows访问wsl文件">windows访问wsl文件</h2><p>资源管理器输入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">\</span><span class="token punctuation">\</span>wsl$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="暴露端口至局域网-以ssh为例">暴露端口至局域网(以ssh为例)</h2><h3 id="1-wsl下重装ssh">1. wsl下重装ssh</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> remove openssh-server<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> openssh-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-编辑sshd-config文件">2. 编辑sshd_config文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vi</span> /etc/ssh/sshd_config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>Port 22</li><li>PermitRootLogin yes</li><li>PasswordAuthentication yes</li></ul><h3 id="3-编辑sudo-vim-etc-hosts-allow，添加一行">3. 编辑sudo vim /etc/hosts.allow，添加一行</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/hosts.allow<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>添加的内容为 <strong>sshd: ALL</strong></li></ul><h3 id="4-重启ssh服务">4. 重启ssh服务</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> <span class="token function">ssh</span> --full-restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-查看wsl-IP地址">5. 查看wsl IP地址</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ifconfig</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="../wsl-note/image-20230822222811064.png" alt=""></p><h3 id="6-windows终端中转发WSL2">6. windows终端中转发WSL2</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">## 添加端口映射</span>netsh interface portproxy <span class="token function">add</span> v4tov4 <span class="token assign-left variable">listenaddress</span><span class="token operator">=</span><span class="token number">0.0</span>.0.0 <span class="token assign-left variable">listenport</span><span class="token operator">=</span><span class="token number">22</span> <span class="token assign-left variable">connectaddress</span><span class="token operator">=</span><span class="token operator">&lt;</span>xxx.xxx.xxx.xxx<span class="token operator">></span> <span class="token assign-left variable">connectport</span><span class="token operator">=</span><span class="token number">22</span><span class="token comment">## 删除端口</span>netsh interface portproxy delete v4tov4 <span class="token assign-left variable">listenaddress</span><span class="token operator">=</span><span class="token number">0.0</span>.0.0 <span class="token assign-left variable">listenport</span><span class="token operator">=</span><span class="token number">22</span><span class="token comment">## 同理转发mysql</span>netsh interface portproxy <span class="token function">add</span> v4tov4 <span class="token assign-left variable">listenaddress</span><span class="token operator">=</span><span class="token number">0.0</span>.0.0 <span class="token assign-left variable">listenport</span><span class="token operator">=</span><span class="token number">13306</span> <span class="token assign-left variable">connectaddress</span><span class="token operator">=</span><span class="token operator">&lt;</span>xxx.xxx.xxx.xxx<span class="token operator">></span> <span class="token assign-left variable">connectport</span><span class="token operator">=</span><span class="token number">3306</span><span class="token comment">## 通过主机IP:13306连接即可</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="../wsl-note/image-20230822222946020.png" alt=""></p><h3 id="7-连接windows端口">7. 连接windows端口</h3><p><img src="../wsl-note/image-20230822223239388.png" alt=""></p><blockquote><p>转载至: [如何用笔记本ssh连接局域网内其他电脑上的wsl2 ubuntu - 知乎 (<a href="http://zhihu.com">zhihu.com</a>)](<a href="https://zhuanlan.zhihu.com/p/357038111#:~:text=%E5%9C%A8windows%E4%B8%8B%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90%E6%89%93%E5%BC%80cmd%EF%BC%8C%E8%BE%93%E5%85%A5%E5%91%BD%E4%BB%A4%E5%B0%86%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E5%88%B0WSL2">https://zhuanlan.zhihu.com/p/357038111#:~:text=在windows下管理员权限打开cmd，输入命令将端口转发到WSL2</a> netsh interface portproxy add v4tov4,listenaddress%3D0.0.0.0 listenport%3D22 connectaddress%<a href="http://3Dxxx.xxx.xxx.xxx">3Dxxx.xxx.xxx.xxx</a> connectport%3D22 此处 <a href="http://xxx.xxx.xxx.xxx">xxx.xxx.xxx.xxx</a> 替换成wsl的IP地址，如172.18.195.3)</p></blockquote><h2 id="开启hyper-v">开启hyper-v</h2><p>控制面板 - 程序 - 启用或关闭Windows功能 - Hyper-V</p><p><img src="../wsl-note/image-20230822113615201.png" alt=""></p><p>如果没有打开终端, 输入 <code>systeminfo</code> 命令</p><p>末尾Hyper-V要求, 如果可以支持</p><p>新建文本, 复制如下代码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">pushd</span> <span class="token string">"%~dp0"</span><span class="token function">dir</span> /b %SystemRoot%<span class="token punctuation">\</span>servicing<span class="token punctuation">\</span>Packages<span class="token punctuation">\</span>*Hyper-V*.mum <span class="token operator">></span>hyper-v.txt<span class="token keyword">for</span> /f %%i <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">'findstr /i . hyper-v.txt 2^>nul'</span><span class="token punctuation">)</span> <span class="token keyword">do</span> dism /online /norestart /add-package:<span class="token string">"%SystemRoot%\servicing\Packages\%%i"</span>del hyper-v.txtDism /online /enable-feature /featurename:Microsoft-Hyper-V-All /LimitAccess /ALL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用批处理 <code>.bat</code> 以管理员身份运行, 代码结束后<strong>重启电脑</strong>即可</p>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> WSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云南Happy日记</title>
      <link href="/2023/08/19/yunnan-diary/"/>
      <url>/2023/08/19/yunnan-diary/</url>
      
        <content type="html"><![CDATA[<h1>云南Happy日记</h1><h3 id="1️⃣大理篇">1️⃣大理篇</h3><p>杭州✈昆明🚆大理🚕大理古镇附近🛖投宿</p><h4 id="😋超级超级好吃的清蒸街">😋超级超级好吃的清蒸街</h4><p><img src="../yunnan-diary/872c4f0ff30ce6398ac77bdee5cdde5.jpg" alt="小山一样的新鲜牛肉"></p><p><img src="../yunnan-diary/9adb820d9f5b7f6624d696dce833819.jpg" alt="鸳鸯铜锅"></p><p>冬阴锅口感不太习惯, 锅不小, 是牛肉太大盘啦</p><p><img src="../yunnan-diary/3a347ae5c334245a44cb5952a75790a.jpg" alt="边涮火锅边烧烤"></p><h4 id="🛵环洱海">🛵环洱海</h4><p>❗❗❗一定要顺时针骑行, 顺时针是靠近洱海这边, 并且洱海北边很多路是没有逆时针骑行道</p><p><img src="../yunnan-diary/fa37a560d60705f11c42e17cee6a3a8.jpg" alt="沿路的第一亮眼"></p><p><img src="../yunnan-diary/6e2c244ea593a7f07fc8c573d5aceb7.jpg" alt="绿油油的麦田"></p><p><img src="../yunnan-diary/1dec4002f8d4c2fd55f0327489bb140.jpg" alt="自助打卡"></p><p><img src="../yunnan-diary/0c115f238bfbc9e2068bf19a81a51bc.jpg" alt="芜湖起飞"></p><h4 id="⛩️喜洲小镇">⛩️喜洲小镇</h4><p><img src="../yunnan-diary/69823da4633e234bd2288752f75be8f.jpg" alt="背箩筐的阿婆"></p><p><img src="../yunnan-diary/92bbc345ceecc3a962dc9782cb28add.jpg" alt="上午10点的喜洲人还不多哦"></p><p><img src="../yunnan-diary/161d38ff332e961220c6b5b75985aaf.jpg" alt="包浆豆腐好吃到破防"></p><p><img src="../yunnan-diary/500e1ebca2c4456eec7aef85e2a9040.jpg" alt=""></p><p><img src="../yunnan-diary/58c0d620827f2d8b23e1622284c0f20.jpg" alt=""></p><p><img src="../yunnan-diary/92a02fd9237358aa17b09601dde2685.jpg" alt=""></p><p><img src="../yunnan-diary/65356f747dfab60cfee3b1c1679f0f1.jpg" alt=""></p><p><img src="../yunnan-diary/edc7a8f3e7d31f39035dcfb3f5d0afe.jpg" alt=""></p><p><img src="../yunnan-diary/d2b462c80da9d11bda928d9051ae6fe.jpg" alt="海边的青瓦小镇"></p><p><img src="../yunnan-diary/f4cc94dae3405b29982651dae85e4be.jpg" alt="小洲隔镇相望"></p><p><img src="../yunnan-diary/2cacafb0e863e969771695e601bbd1e.jpg" alt="继续上路"></p><p><img src="../yunnan-diary/ccadb48d1d63262fc451e060ba30667.jpg" alt="风有点大,停下休息休息"></p><p><img src="../yunnan-diary/b32f4f227cfaff31035cd5afd9b0ee4.jpg" alt="继续上路"></p><p><img src="../yunnan-diary/2c88a0719ff9feb0b0a5857d4399dd5.jpg" alt="真美真美, 再拍一张"></p><p><img src="../yunnan-diary/f69adcf78f588171ee5a8ebcb42472b.jpg" alt=""></p><p><img src="../yunnan-diary/588883fbec2b5f0936ef1ce14289f01.jpg" alt="春水共长天一色"></p><p><img src="../yunnan-diary/69578a9898a01cf7d758790ef56402b.jpg" alt=""></p><p>再回古镇清真街, 来一顿手抓饭</p><p><img src="../yunnan-diary/392506640118608b549d6cc262c5821.jpg" alt=""></p><p><img src="../yunnan-diary/ee21bb81a2d5ebc5fc7c4e12b2dc997.jpg" alt=""></p><h4 id="🎵大理古镇的夜">🎵大理古镇的夜</h4><p><img src="../yunnan-diary/1697983433275-180706d28201154c4ad9caa526e97d59.gif" alt="火把转转转"></p><p><img src="../yunnan-diary/619bd5a6812dba0164f2a778ce12cd9.jpg" alt="酒吧街"></p><p><img src="../yunnan-diary/596a6be3994e03a0aaf1c34a588c265b.gif" alt="樱花屋"></p><h4 id="⛰️苍山">⛰️苍山</h4><p><img src="../yunnan-diary/b1b8c647f09f3be70e6c5fd924aa09a.jpg" alt="早上一碗炸酱米线, 古镇北门菜市街左边"></p><p>去苍山的那天大雨, 基本看了个寂寞😭😭😭</p><p><img src="../yunnan-diary/cc2c683998d8c9159152bacd2183a7c.jpg" alt="三九六六"></p><p><img src="../yunnan-diary/c04a5daf7142a552cf7c3b02e4a8aba.jpg" alt="雨蒙蒙的洗马潭"></p><p><img src="../yunnan-diary/51a5c069a9cd47ab1adc16118ae355a.jpg" alt=""></p><img src="../yunnan-diary/bea97d4ecec6d45fc36c8ff3402860a.jpg" style="zoom:33%;" /><h4 id="🎞️天龙八部影视城">🎞️天龙八部影视城</h4><p><img src="../yunnan-diary/0d36cbf61e4e1602eeb89d14c8fa3ab.jpg" alt=""></p><p><img src="../yunnan-diary/6f6c13fd405a4ff4efefa6b17e496fd.jpg" alt=""></p><p><img src="../yunnan-diary/36da6ab478011332d9b062fd477176d.jpg" alt=""></p><p><img src="../yunnan-diary/b081f37c78e8e4737aeef6a3a7a85eb.jpg" alt="扇子舞"></p><img src="../yunnan-diary/7aae249afd8faf74b4852c59dcd738f.jpg" alt="哼❗❗" style="zoom:33%;" /><img src="../yunnan-diary/88c3c003353dc8c689c2747789bc276.jpg" alt="必吃老奶洋芋👍👍👍" style="zoom: 38%;" /><h3 id="2️⃣香格里拉篇">2️⃣香格里拉篇</h3><h3 id="3️⃣丽江篇">3️⃣丽江篇</h3><h3 id="4️⃣昆明篇">4️⃣昆明篇</h3>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旅游 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>el-ui-积累</title>
      <link href="/2023/08/18/el-ui-advance/"/>
      <url>/2023/08/18/el-ui-advance/</url>
      
        <content type="html"><![CDATA[<h2 id="el-table-column压缩单行">el-table-column压缩单行</h2><p>div</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content(替换)<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>内容(替换)<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123; row &#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-tooltip</span> <span class="token attr-name">:content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row.content(替换)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>oneline<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">text-align</span><span class="token punctuation">:</span> center</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>&#123;&#123; row.content(替换) &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-tooltip</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>style</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.oneline</span> <span class="token punctuation">&#123;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span>  <span class="token comment">/* 将对象作为弹性伸缩盒子模型显示 */</span>  <span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span>  <span class="token comment">/* 限制在一个块元素显示的文本的行数 */</span>  <span class="token comment">/* -webkit-line-clamp 其实是一个不规范属性，使用了WebKit的CSS扩展属性，该方法适用于WebKit浏览器及移动端；*/</span>  <span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>  <span class="token comment">/* 设置或检索伸缩盒对象的子元素的排列方式 */</span>  <span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span> vertical<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文本复制">文本复制</h2><p>div</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 按钮复制 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>medium<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>success<span class="token punctuation">"</span></span> <span class="token attr-name">plain</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleCopy(respData.pass)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> &#123;&#123; respData.pass &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 表格复制 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>st_loginname<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>登录名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123; row &#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>small<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleCopy(row.st_loginname)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&#123;&#123; row.st_loginname &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>script</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">handleCopy</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>text<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">warning</span><span class="token punctuation">(</span><span class="token string">'无内容'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> textarea <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'textarea'</span><span class="token punctuation">)</span>    textarea<span class="token punctuation">.</span>value <span class="token operator">=</span> text    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>textarea<span class="token punctuation">)</span>    textarea<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    document<span class="token punctuation">.</span><span class="token function">execCommand</span><span class="token punctuation">(</span><span class="token string">'copy'</span><span class="token punctuation">)</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>textarea<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">'复制成功'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于websocket实现实时日志输出</title>
      <link href="/2023/08/17/websocket-log/"/>
      <url>/2023/08/17/websocket-log/</url>
      
        <content type="html"><![CDATA[<blockquote><p>由于本demo是在原有服务进行拓展, 为减少耦合故新建模块</p></blockquote><h2 id="依赖及配置文件">依赖及配置文件</h2><h3 id="pom文件">pom文件</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>publish-plat-log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- springboot websocket --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-websocket<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- thymeleaf模板 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意:</p><p>由于此模块没有启动类, 故本依赖及父依赖不能不能有打包插件</p><p>spring-boot-maven-plugin</p></blockquote><h3 id="application文件">application文件</h3><p>此处取名为<code>application-wslog.yml</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">thymeleaf</span><span class="token punctuation">:</span>    <span class="token key atrule">prefix</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>/static/view/    <span class="token key atrule">check-template</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">config</span><span class="token punctuation">:</span>    <span class="token key atrule">activate</span><span class="token punctuation">:</span>      <span class="token key atrule">on-profile</span><span class="token punctuation">:</span> wslog<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主模块添加配置引用改模块</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev    <span class="token key atrule">include</span><span class="token punctuation">:</span> wslog<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="资源包">资源包</h2><p><code>resources</code> 下新建 <code>static</code> 包</p><h3 id="jquery-js工具包">jquery js工具包</h3><p>放在<code>static.js</code>, 用于页面引用</p><h3 id="HTML页面">HTML页面</h3><p><code>static.view</code> 下新建 <code>logging.html</code></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!DOCTYPE</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--解决idea thymeleaf 表达式模板报红波浪线--></span><span class="token comment">&lt;!--suppress ALL --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>实时日志<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- jquery --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@&#123;/js/jquery-1.9.1.min.js&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 标题 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>实时日志<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 显示区 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loggingText<span class="token punctuation">"</span></span> <span class="token attr-name">contenteditable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>     <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span>100%<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> ghostwhite<span class="token punctuation">;</span> <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 操作栏 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#loggingText'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 35px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>清屏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#loggingText'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">scrollTop</span><span class="token operator">:</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#loggingText'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>scrollHeight<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span>            <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 35px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>滚动至底部    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>loggingAutoBottom<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">'开启自动滚动'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">'关闭自动滚动'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span>loggingAutoBottom <span class="token operator">=</span> <span class="token operator">!</span>window<span class="token punctuation">.</span>loggingAutoBottom</span><span class="token punctuation">"</span></span></span>            <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 35px<span class="token punctuation">;</span> </span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>开启自动滚动    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name"><span class="token namespace">th:</span>inline</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">//websocket对象</span>    <span class="token keyword">let</span> websocket <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">//判断当前浏览器是否支持WebSocket</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'WebSocket'</span> <span class="token keyword">in</span> window<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        websocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">"ws://localhost:28822/websocket/logging"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"不支持WebSocket"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//连接发生错误的回调方法</span>    websocket<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"WebSocket连接发生错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">//连接成功建立的回调方法</span>    websocket<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"WebSocket连接成功"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">//接收到消息的回调方法</span>    websocket<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//追加</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//日志内容</span>            <span class="token keyword">let</span> $loggingText <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#loggingText"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            $loggingText<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>data <span class="token operator">+</span> <span class="token string">'&lt;br/>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// //是否开启自动底部</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>loggingAutoBottom<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//滚动条自动到最底部</span>                $loggingText<span class="token punctuation">.</span><span class="token function">scrollTop</span><span class="token punctuation">(</span>$loggingText<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>scrollHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//连接关闭的回调方法</span>    websocket<span class="token punctuation">.</span><span class="token function-variable function">onclose</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"WebSocket连接关闭"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实现代码">实现代码</h2><h3 id="Endpoint">Endpoint</h3><p>WebSocket获取实时日志并输出到Web页面</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">ch<span class="token punctuation">.</span>qos<span class="token punctuation">.</span>logback<span class="token punctuation">.</span>classic<span class="token punctuation">.</span></span><span class="token class-name">LoggerContext</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>websocket<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ServerEndpoint</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span></span><span class="token punctuation">;</span><span class="token comment">/** * WebSocket获取实时日志并输出到Web页面 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ServerEndpoint</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/websocket/logging"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoggingWSServer</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//与某个客户端的连接会话，需要通过它来给客户端发送数据</span>    <span class="token keyword">private</span> <span class="token class-name">Session</span> session<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> sessionId<span class="token punctuation">;</span>    <span class="token comment">/**     * 连接建立成功调用的方法     */</span>    <span class="token annotation punctuation">@OnOpen</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onOpen</span><span class="token punctuation">(</span><span class="token class-name">Session</span> session<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>session <span class="token operator">=</span> session<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sessionId <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LoggerContext</span> lc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">LoggerContext</span><span class="token punctuation">)</span><span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getILoggerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 第二步：获取日志对象 （日志是有继承关系的，关闭上层，下层如果没有特殊说明也会关闭）</span>        <span class="token class-name"><span class="token namespace">ch<span class="token punctuation">.</span>qos<span class="token punctuation">.</span>logback<span class="token punctuation">.</span>classic<span class="token punctuation">.</span></span>Logger</span> rootLogger <span class="token operator">=</span> lc<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MyAppender</span> myAppender <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyAppender</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        myAppender<span class="token punctuation">.</span><span class="token function">setContext</span><span class="token punctuation">(</span>lc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 自定义Appender设置name</span>        myAppender<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"myAppender"</span> <span class="token operator">+</span> sessionId<span class="token punctuation">)</span><span class="token punctuation">;</span>        myAppender<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rootLogger<span class="token punctuation">.</span><span class="token function">addAppender</span><span class="token punctuation">(</span>myAppender<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====注入成功===="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 连接关闭调用的方法     */</span>    <span class="token annotation punctuation">@OnClose</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">LoggerContext</span> lc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">LoggerContext</span><span class="token punctuation">)</span><span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getILoggerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token namespace">ch<span class="token punctuation">.</span>qos<span class="token punctuation">.</span>logback<span class="token punctuation">.</span>classic<span class="token punctuation">.</span></span>Logger</span> rootLogger <span class="token operator">=</span> lc<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 通过name移除Appender</span>        rootLogger<span class="token punctuation">.</span><span class="token function">detachAppender</span><span class="token punctuation">(</span><span class="token string">"myAppender"</span> <span class="token operator">+</span> sessionId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====移除成功===="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 服务器主动发送消息     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">getBasicRemote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendText</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="WebSocketConfig">WebSocketConfig</h3><p>此处为了偷懒将测试controller也放在此处</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Value</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">ApplicationRunner</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ModelAndView</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>server<span class="token punctuation">.</span>standard<span class="token punctuation">.</span></span><span class="token class-name">ServerEndpointExporter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">InetAddress</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">UnknownHostException</span></span><span class="token punctuation">;</span><span class="token comment">/** * WebSocket配置 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 用途：扫描并注册所有携带@ServerEndpoint注解的实例。 @ServerEndpoint("/websocket")     * PS：如果使用外部容器 则无需提供ServerEndpointExporter。     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ServerEndpointExporter</span> <span class="token function">serverEndpointExporter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ServerEndpointExporter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 端口     */</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;server.port&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> port<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">ApplicationRunner</span> <span class="token function">applicationRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> applicationArguments <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">InetAddress</span> ia <span class="token operator">=</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//获取本机内网IP</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"启动成功："</span> <span class="token operator">+</span> <span class="token string">"http://"</span> <span class="token operator">+</span> ia<span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> port <span class="token operator">+</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnknownHostException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 跳转实时日志     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/logging"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">logging</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token string">"logging.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 测试日志输出     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/testLog"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">testLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"测试日志输出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"异常测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token string">"testLog"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="日志格式拓展">日志格式拓展</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">ch<span class="token punctuation">.</span>qos<span class="token punctuation">.</span>logback<span class="token punctuation">.</span>classic<span class="token punctuation">.</span>spi<span class="token punctuation">.</span></span><span class="token class-name">ILoggingEvent</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">ch<span class="token punctuation">.</span>qos<span class="token punctuation">.</span>logback<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">AppenderBase</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAppender</span> <span class="token keyword">extends</span> <span class="token class-name">AppenderBase</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ILoggingEvent</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">LoggingWSServer</span> webSocketServer<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">MyAppender</span><span class="token punctuation">(</span><span class="token class-name">LoggingWSServer</span> webSocketServer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>webSocketServer <span class="token operator">=</span> webSocketServer<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 添加日志 * @param iLoggingEvent */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">ILoggingEvent</span> iLoggingEvent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>webSocketServer<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token function">doLayout</span><span class="token punctuation">(</span>iLoggingEvent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 格式化日志 * @param event */</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">doLayout</span><span class="token punctuation">(</span><span class="token class-name">ILoggingEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">StringBuilder</span> sbuf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> event <span class="token operator">&amp;&amp;</span> <span class="token keyword">null</span> <span class="token operator">!=</span> event<span class="token punctuation">.</span><span class="token function">getMDCPropertyMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">SimpleDateFormat</span> simpleDateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss:SSS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sbuf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getTimeStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sbuf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sbuf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sbuf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sbuf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getThreadName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sbuf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sbuf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getLoggerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sbuf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sbuf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getFormattedMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"\""</span><span class="token punctuation">,</span> <span class="token string">"\\\""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sbuf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> sbuf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="完整层级结构">完整层级结构</h2><p><img src="../websocket-log/image-20230818095923636.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nutz.dao笔记整理</title>
      <link href="/2023/08/15/nutz/"/>
      <url>/2023/08/15/nutz/</url>
      
        <content type="html"><![CDATA[<h2 id="基础封装">基础封装</h2><p>封装单个对象查询</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 1.获取dao</span><span class="token class-name">Dao</span> dao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NutDao</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 伪代码</span><span class="token class-name">Sql</span> sql <span class="token operator">=</span> <span class="token class-name">Sqls</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"select * from tb_user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setParam</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"小明"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 伪代码</span><span class="token comment">// 2.使用nutz自带的reocrd对象</span>sql<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token class-name">Sqls</span><span class="token punctuation">.</span>callback<span class="token punctuation">.</span><span class="token function">record</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 3.实体设置</span>sql<span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span>dao<span class="token punctuation">.</span><span class="token function">getEntity</span><span class="token punctuation">(</span><span class="token class-name">Record</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 可自定义实体</span><span class="token comment">// 4.执行sql</span>dao<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 5.接收对象</span><span class="token class-name">Record</span> record <span class="token operator">=</span> sql<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token class-name">Record</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 此处是接收单个对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>封装结合对象查询</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">sql<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token class-name">Sqls</span><span class="token punctuation">.</span>callback<span class="token punctuation">.</span><span class="token function">records</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sql<span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span>dao<span class="token punctuation">.</span><span class="token function">getEntity</span><span class="token punctuation">(</span><span class="token class-name">Record</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 可自定义实体</span>dao<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Record</span><span class="token punctuation">></span></span> records <span class="token operator">=</span> sql<span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token class-name">Record</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>封装数字查询</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">sql<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token class-name">Sqls</span><span class="token punctuation">.</span>callback<span class="token punctuation">.</span><span class="token function">integer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dao<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> count <span class="token operator">=</span> sql<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>封装DDL</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">sql<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token class-name">Sqls</span><span class="token punctuation">.</span>callback<span class="token punctuation">.</span><span class="token function">integer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dao<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> rows <span class="token operator">=</span> sql<span class="token punctuation">.</span><span class="token function">getUpdateCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="condition花式用法"><code>condition</code>花式用法</h2><p>首先创建<code>sql</code>对象(注意此处的占位符是<code>$</code>)</p><p><code>select * from tb_xxx $condition</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Cnd</span><span class="token punctuation">.</span><span class="token function">exps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 将一个条件表达式封装为条件表达式组</span><span class="token class-name">Cnd</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 将一个表达式封装成一个Cnd实例</span><span class="token comment">// 通过以上两个方法组合搭配形成嵌套, 如:</span><span class="token class-name">Cnd</span> cnd <span class="token operator">=</span> <span class="token class-name">Cnd</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"="</span><span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token string">"between"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>                <span class="token class-name">Cnd</span><span class="token punctuation">.</span><span class="token function">NEW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">andIn</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">,</span> <span class="token string">"上海"</span><span class="token punctuation">,</span> <span class="token string">"广东"</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">orIn</span><span class="token punctuation">(</span><span class="token string">"hobby"</span><span class="token punctuation">,</span> <span class="token string">"篮球"</span><span class="token punctuation">,</span> <span class="token string">"网球"</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>                <span class="token class-name">Cnd</span>                        <span class="token comment">// 生成条件组(后可继续拼接)</span>                        <span class="token punctuation">.</span><span class="token function">exps</span><span class="token punctuation">(</span><span class="token string">"gender"</span><span class="token punctuation">,</span> <span class="token string">"="</span><span class="token punctuation">,</span> <span class="token string">"女"</span><span class="token punctuation">)</span>                        <span class="token comment">// 动态条件</span>                        <span class="token punctuation">.</span><span class="token function">andEX</span><span class="token punctuation">(</span><span class="token string">"height"</span><span class="token punctuation">,</span> <span class="token string">"like"</span><span class="token punctuation">,</span> <span class="token string">"180"</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">andEX</span><span class="token punctuation">(</span><span class="token string">"phone"</span><span class="token punctuation">,</span> <span class="token string">"="</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>        <span class="token comment">// 静态条件,直接拼入sql,不做任何转义</span>        <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Static</span><span class="token punctuation">(</span><span class="token string">"isnull(is_delete)"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成后的<code>sql</code></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">WHERE</span> name<span class="token operator">=</span><span class="token string">'张三'</span> <span class="token operator">AND</span> age <span class="token operator">BETWEEN</span> <span class="token number">19</span> <span class="token operator">AND</span> <span class="token number">29</span> <span class="token operator">AND</span> <span class="token punctuation">(</span>city <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'上海'</span><span class="token punctuation">,</span><span class="token string">'广东'</span><span class="token punctuation">)</span> <span class="token operator">OR</span> hobby <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'篮球'</span><span class="token punctuation">,</span><span class="token string">'网球'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">AND</span> <span class="token punctuation">(</span>gender<span class="token operator">=</span><span class="token string">'女'</span> <span class="token operator">AND</span> height <span class="token operator">LIKE</span> <span class="token string">'180'</span><span class="token punctuation">)</span> <span class="token operator">AND</span>  isnull<span class="token punctuation">(</span>is_delete<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="like左右模糊"><code>like</code>左右模糊</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Cnd.NEW().where().andLike();</span><span class="token class-name">SimpleCriteria</span> cri <span class="token operator">=</span> <span class="token class-name">Cnd</span><span class="token punctuation">.</span><span class="token function">cri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cri<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">andLike</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 建议传ignoreCase = false, 否则会被拼接成 LOWER(XXX) LIKE LOWER('%XXX%')</span>cri<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">andLike</span><span class="token punctuation">(</span><span class="token string">"idcard"</span><span class="token punctuation">,</span> <span class="token string">"330"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 右侧模糊查询</span>cri<span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">andLike</span><span class="token punctuation">(</span><span class="token string">"hobby"</span><span class="token punctuation">,</span> <span class="token string">"运动"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"%"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成后的<code>sql</code></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">'%李四%'</span> <span class="token operator">AND</span> LOWER<span class="token punctuation">(</span>idcard<span class="token punctuation">)</span> <span class="token operator">LIKE</span> LOWER<span class="token punctuation">(</span><span class="token string">'%330%'</span><span class="token punctuation">)</span> <span class="token operator">AND</span> hobby <span class="token operator">LIKE</span> <span class="token string">'运动%'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="实体动态更新">实体动态更新</h2><p>由于<code>nutz.dao</code>默认<code>update</code>操作是全字段更新, 如果只更新实体类不为空的需要设置字段过滤器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">dao<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>    <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIsDel</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token class-name">FieldFilter</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token class-name">Cnd</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">"is_del"</span><span class="token punctuation">,</span><span class="token string">"="</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Database </tag>
            
            <tag> Nutz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx-location配置</title>
      <link href="/2023/08/14/nginx-location/"/>
      <url>/2023/08/14/nginx-location/</url>
      
        <content type="html"><![CDATA[<h3 id="proxy-pass-端口后紧跟"><code>proxy_pass</code> 端口后紧跟 <code>/</code></h3><img src="../nginx-location/image-20230814221948781.png" alt="P1" width="70%" /><img src="../nginx-location/image-20230814224425902.png"  alt="P2" width="70%" /><blockquote><p><code>proxy_pass</code>有<code>/</code> 👆👆</p><p><code>location</code> 只属于部分匹配, 不属于请求部分, 会在请求路径中删除</p><ol><li>代理路径 =&gt;替换=&gt; 监听路径 : <code>http://localhost:23323//api/server/user</code></li><li>删除location路径: <code>http://localhost:23323/server/user</code> (P1)  <code>http://localhost:23323//server/user</code>(P2)</li></ol></blockquote><hr><h3 id="proxy-pass-端口后不跟"><code>proxy_pass</code> 端口后不跟 <code>/</code></h3><img src="../nginx-location/image-20230814224536607.png" width="70%" /><img src="../nginx-location/image-20230814224604020.png" width="70%" /><blockquote><p><code>proxy_pass</code>无 <code>/</code> 👆👆</p><p><code>location</code> 不管带不带 <code>/</code></p><p>都会将 <code>/api</code> 都添加至 <code>proxy_pass</code> 路径后, 并作为真实请求路径</p></blockquote><hr><h3 id="proxy-pass-后还有路径"><code>proxy_pass</code> 后还有路径</h3><img src="../nginx-location/image-20230814225040203.png" alt="P3" width="70%" /><img src="../nginx-location/image-20230814225243126.png" alt="P4" width="70%" /><blockquote><p>与第一种情况一致👆👆</p><ol><li><p>代理路径 替换 监听路径 : <code>http://localhost:23323/route//api/demo</code></p></li><li><p>删除 location路径:</p></li></ol><p><code>http://localhost:23323/route/demo</code> (P3)</p><p><code>http://localhost:23323/route//demo</code> (P4)</p></blockquote><img src="../nginx-location/image-20230814225957250.png" alt="P5" width="70%" /><img src="../nginx-location/image-20230814230221058.png" alt="P6" width="70%" /><blockquote><p>与第一种情况一致👆👆</p><ol><li><p>代理路径 替换 监听路径: <code>http://localhost:23323/route/api/demo</code></p></li><li><p>删除 location路径:</p></li></ol><p><code>http://localhost:23323/routedemo</code> (P5)</p><p><code>http://localhost:23323/route/demo</code> (P6)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义线程池</title>
      <link href="/2023/08/06/diy-thread-pool/"/>
      <url>/2023/08/06/diy-thread-pool/</url>
      
        <content type="html"><![CDATA[<h1>自定义线程池demo</h1><h2 id="流程图">流程图</h2><pre class="mermaid">graph LRsubgraph Thread Pool        t1[t1]        t2[t2]        t3[t3]endsubgraph Blocking Queuetask1(task1)task2(task2)task3(task3)endm[main]m  --put--> task3task3 --> task2task2 --> task1worker[[worker]]task1 --poll--> t1 -.- workertask1 -.poll.-> t2 -.- workertask1 -.poll.-> t3 -.- worker</pre><blockquote><p>角色说明:</p><p>Blocking Queue: 阻塞队列, main线程负责将任务提交到阻塞队列中, 用于存储任务</p><p>task: 待执行任务</p><p>Thread Pool: 线程池, 用于存储线程对象</p><p>t: 线程对象, 用来执行每个任务</p><p>worker: 此处将每个线程比作工人</p></blockquote><h2 id="类图说明">类图说明</h2><pre class="mermaid">classDiagramclass BlockingQueue~T~ {-Deque~T~ queue // 阻塞队列-ReentrantLock lock // 锁-Condition fullWaitCond-Condition emptyWaitCond-int capcity // 队列大小+poll(long timeout, TimeUnit unit) T+put(T t) void}class ThreadPool {-BlockingQueue~Runnable~ taskQueue // 任务队列-HashSet~Worker~ works // 线程集合-int coreSize // 核心线程数-long timeout // 超时时间-TimeUnit timeUnit // 时间单位+execute(Runnable task) void}class Worker{-Runnable task // 线程任务+run() void}Thread <|-- Worker: 继承ThreadPool *-- BlockingQueue~T~: 组合ThreadPool o-- Worker: 聚合</pre><h2 id="代码部分">代码部分</h2><h3 id="阻塞队列">阻塞队列</h3><p>阻塞队列核心功能是阻塞获取(线程池使用)和推入待执行任务(main线程使用)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayDeque</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Deque</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">Condition</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">ReentrantLock</span></span><span class="token punctuation">;</span><span class="token comment">/** * &lt;p>Description: * 阻塞队列, 采用生产者消费者模式 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 1. 任务队列</span>    <span class="token keyword">private</span> <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2. 锁</span>    <span class="token keyword">private</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3. 生产者条件</span>    <span class="token keyword">private</span> <span class="token class-name">Condition</span> fullWaitCond <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 4. 消费者条件</span>    <span class="token keyword">private</span> <span class="token class-name">Condition</span> emptyWaitCond <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 5. 容量</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> capcity<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">BlockingQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> capcity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>capcity <span class="token operator">=</span> capcity<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 阻塞获取</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 尝试获取锁</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 将时间转为纳秒</span>            <span class="token keyword">long</span> nanos <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 如果任务队列为空, 则进循环尝试</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 如果等待时间为0, 则返回空</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nanos <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// 进入空闲等待, 如果在此期间被唤醒, 则重置等待时间(用于防止虚假唤醒)</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    nanos <span class="token operator">=</span> emptyWaitCond<span class="token punctuation">.</span><span class="token function">awaitNanos</span><span class="token punctuation">(</span>nanos<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 提取队列首个任务</span>            <span class="token class-name">T</span> t <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 唤醒消费者消费</span>            fullWaitCond<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> t<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 尝试获取锁</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> capcity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 如果容量满, 则循环等待</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 进入饱和等待</span>                    fullWaitCond<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// 添加至队列</span>            queue<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 加完队列后, 通知消费者消费</span>            emptyWaitCond<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="线程池">线程池</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashSet</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token punctuation">(</span>topic <span class="token operator">=</span> <span class="token string">"ThreadPool"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPool</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 任务队列     */</span>    <span class="token keyword">private</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span> taskQueue<span class="token punctuation">;</span>    <span class="token comment">// 线程集合: 此处将线程做一个包装</span>    <span class="token keyword">private</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Worker</span><span class="token punctuation">></span></span> works <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 核心线程数</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> coreSize<span class="token punctuation">;</span>    <span class="token comment">// 超时时间, 一旦超过超时时间, 则关闭线程</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> timeout<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">TimeUnit</span> timeUnit<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> coreSize<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> timeUnit<span class="token punctuation">,</span> <span class="token keyword">int</span> queueCapcity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>coreSize <span class="token operator">=</span> coreSize<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>timeout <span class="token operator">=</span> timeout<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>timeUnit <span class="token operator">=</span> timeUnit<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>taskQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>queueCapcity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 执行     *     * @param task     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> task<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 如果当前线程 &lt; 核心线程数时</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>works<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> coreSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Worker</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>                log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"新增 worker &#123;&#125; task=&#123;&#125;"</span><span class="token punctuation">,</span> worker<span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>                works<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>worker<span class="token punctuation">)</span><span class="token punctuation">;</span>                worker<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"加入任务队列 &#123;&#125;"</span><span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>                taskQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 线程对象     */</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Worker</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">Runnable</span> task<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> task<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>task <span class="token operator">=</span> task<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 执行任务</span>            <span class="token comment">// 1) 当有任务时</span>            <span class="token comment">// 2) 当任务队列不为空时</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>task <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>task <span class="token operator">=</span> taskQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>timeout<span class="token punctuation">,</span> timeUnit<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"正在执行...&#123;&#125; "</span><span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>                    task<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                    task <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>works<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"worker 被移除 &#123;&#125;"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                works<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试类">测试类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">class</span> <span class="token class-name">TestPool</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ThreadPool</span> threadPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 由主线程给线程池提交任务</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>            threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span>                log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>线程池工作流程</h1><h2 id="JDK自带">JDK自带</h2><pre class="mermaid">graph LR;c([添加任务])q2(线程数 < coreSize)q3(阻塞队列是否已满)q4(线程数 < maxSize)a1[添加工作线程并执行]a2[添加至阻塞队列并等待工作线程来提取]a3[添加救急线程并执行]r[拒绝任务]q4 --否--> rc --> q2 --否--> q3 --是--> q4q2 --是--> a1q3 --否--> a2q4 --是--> a3</pre><pre class="mermaid">graph LR;c(添加任务)q2falseq3q4falsea1[添加工作线程并执行]a2[添加至阻塞队列并等待工作线程来提取]a3[添加救急线程并执行]r[拒绝任务]q4 --否--> rc --> q2 --否--> q3 --是--> q4q2 --是--> a1q3 --否--> a2q4 --是--> a3</pre><h2 id="Tomcat-NIO-EndPoint">Tomcat NIO EndPoint</h2><h3 id="全流程">全流程</h3><pre class="mermaid">graph LR;ll(LimitLatch) --> a(acceptor)sc1(SocketChannel 1)sc2(SocketChannel 2)a --> sc1a --> sc2p(Poller)sc1 --有读--> psc2 --有读--> psubgraph Executorw1(worker 1)w2(worker 2)endp --socketProcessor--> w1p --socketProcessor--> w2</pre><ul><li>LimitLatch 用来限流, 可以控制最大连接个数, 类似 JUC 中的 Semphore</li><li>Acceptor只负责[接收新的 socket 连接]</li><li>Poller 只负责监听 socket channel 是否有 [可读的 I/O 事件]</li><li>一旦可读, 封装一个任务对象(socketProcessor), 提交给 Executor 线程池处理</li><li>Executor 线程池中的工作线程最终负责 [处理请求]</li></ul><h3 id="网络层流程">网络层流程</h3><pre class="mermaid">graph LR;c([添加任务])q1(任务数 < coreSize)q2(任务数 < maxSize)a1[加入队列]a2[创建救急线程]c --> q1 --是--> a1q1 --否--> q2 --否--> a1q2 --是--> a2</pre><pre class="mermaid">graph LR;c(添加任务)q1falseq2falsea1[加入队列]a2[创建救急线程]c --> q1 --是--> a1q1 --否--> q2 --否--> a1q2 --是--> a2</pre>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Mermaid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lambda</title>
      <link href="/2023/08/05/lambda/"/>
      <url>/2023/08/05/lambda/</url>
      
        <content type="html"><![CDATA[<h1>自定义lambda用法</h1><h2 id="基础用法">基础用法</h2><h3 id="supplier">supplier</h3><blockquote><p>提供者: 无中生有  ()-&gt;结果</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> tSupplier<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">T</span> t <span class="token operator">=</span> tSupplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"已获取参数 >>> "</span> <span class="token operator">+</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="function">function</h3><blockquote><p>函数: 一个参数一个结果   (参数)-&gt;结果,  BiFunction (参数1,参数2)-&gt;结果</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">,</span> <span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token string">"ben"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 使用 String::toUpperCase 作为 Function ，将名字转换为大写形式</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> upperList <span class="token operator">=</span> <span class="token function">demo2</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token operator">::</span><span class="token function">toUpperCase</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>upperList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 使用 String::length 作为 Function ，将名字转换为长度</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> lengthList <span class="token operator">=</span> <span class="token function">demo2</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token operator">::</span><span class="token function">length</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>lengthList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 使用 Function&lt;T, R> 作为参数，通过传递不同的 Function 实现来实现不同的转换操作。</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">></span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">></span></span> <span class="token function">demo2</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> list<span class="token punctuation">,</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">></span></span> function<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//  List&lt;R> collect = list.stream().map(function::apply).collect(Collectors.toList());</span>    <span class="token keyword">return</span> list        <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>function<span class="token punctuation">)</span> <span class="token comment">// 方法引用</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * [TOM, JACK, BEN] * [3, 4, 3] */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="consumer">consumer</h3><blockquote><p>消费者 一个参数没结果  (参数)-&gt;void,      BiConsumer (参数1,参数2)-&gt;void</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">,</span> <span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token string">"ben"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 打印列表</span>    <span class="token function">demo3</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 转为大写后打印</span>    <span class="token function">demo3</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> item <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">demo3</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> list<span class="token punctuation">,</span> <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> consumer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>consumer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="多线程下的ABA问题以及juc包的使用-lambda设计">多线程下的ABA问题以及juc包的使用(lambda设计)</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">demo</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token operator">-></span> array<span class="token punctuation">.</span>length<span class="token punctuation">,</span>            <span class="token punctuation">(</span>array<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">-></span> array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">,</span>            array <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">demo</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">AtomicIntegerArray</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span>array<span class="token punctuation">)</span> <span class="token operator">-></span> array<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span>array<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">-></span> array<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">,</span>            array <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span>        <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> arraySupplier<span class="token punctuation">,</span>        <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> lengthFun<span class="token punctuation">,</span>        <span class="token class-name">BiConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> putConsumer<span class="token punctuation">,</span>        <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> printConsumer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Thread</span><span class="token punctuation">></span></span> ts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 数组</span>    <span class="token class-name">T</span> array <span class="token operator">=</span> arraySupplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 数组长度 l</span>    <span class="token keyword">int</span> length <span class="token operator">=</span> lengthFun<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 定义l个线程</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 每个线程对数组作 10000 次操作</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">/*                 * [0, 0, 0, 0, 0, ...] 对数组中每个数进行遍历, 并只对其中一个进行累加, 执行10000次                 * 说明: 在理想条件下, 每个线程可以累加降数组中每个元素累加至1000, 10个线程可将数组中每个元素累加至10000                 *      但是普通的 ++ 操作非原子性, 线程不安全, 无法累加到1000                 *      因此此处需要使用 AtomicIntegerArray 原子类                 */</span>                putConsumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> j <span class="token operator">%</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    ts<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token operator">::</span><span class="token function">start</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 启动所有线程</span>    ts<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>t <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            t<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 等所有线程结束</span>    printConsumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dm-mysql</title>
      <link href="/2023/07/16/dm-mysql/"/>
      <url>/2023/07/16/dm-mysql/</url>
      
        <content type="html"><![CDATA[<h1>DM - mysql 通用语法/对比</h1><p>由于达梦数据库语法更偏向oracle, 同时兼容部分mysql, 因此整理一些两者都通用语法. 同时对不通用的语法做些许对比</p><h2 id="字符-数字">字符/数字</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 33 补到 8位, 用0补充</span><span class="token keyword">select</span> LPAD<span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">select</span> RPAD<span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">-- instr/locate/position</span><span class="token keyword">select</span> INSTR<span class="token punctuation">(</span><span class="token string">'abcd'</span><span class="token punctuation">,</span> <span class="token string">'abc'</span><span class="token punctuation">)</span> <span class="token comment">-- INSTR(str, substr) 获取子串第一次出现的索引</span><span class="token keyword">select</span> LOCATE<span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token string">'abcd'</span><span class="token punctuation">)</span> <span class="token comment">-- LOCATE(substr,str) 返回substr在字符串str 的第一个出现的位置,没有则返回0 </span><span class="token keyword">select</span> POSITION<span class="token punctuation">(</span><span class="token string">'abc'</span> <span class="token operator">in</span> <span class="token string">'abcd'</span><span class="token punctuation">)</span>  <span class="token comment">-- POSITION(substr in str) 返回substr在字符串str 的第一个出现的位置,没有则返回0</span><span class="token keyword">select</span> ifnull<span class="token punctuation">(</span><span class="token string">'1234'</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">)</span> <span class="token comment">-- eExpression1,eExpression2 不为 NULL的值, 都为NULL则返回NULL</span><span class="token keyword">select</span> isnull<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">-- null返回1, 不为null返回0</span><span class="token comment">-- 大小写转换</span><span class="token keyword">select</span> upper<span class="token punctuation">(</span><span class="token string">'wangdi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> lower<span class="token punctuation">(</span><span class="token string">'WANGDI'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> abs<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.4</span><span class="token punctuation">)</span> <span class="token comment">-- 绝对值</span><span class="token keyword">select</span> CEIL<span class="token punctuation">(</span><span class="token number">1.09</span><span class="token punctuation">)</span> <span class="token comment">-- 向上</span><span class="token keyword">select</span> FLOOR<span class="token punctuation">(</span><span class="token number">1.08</span><span class="token punctuation">)</span>  <span class="token comment">-- 向下</span><span class="token keyword">select</span> <span class="token keyword">truncate</span><span class="token punctuation">(</span><span class="token number">1.23456</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">-- 截断</span><span class="token keyword">select</span> <span class="token function">mod</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">-- 取模</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="日期时间">日期时间</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> timestampadd<span class="token punctuation">(</span><span class="token keyword">second</span><span class="token punctuation">,</span> floor<span class="token punctuation">(</span>DBMS_RANDOM<span class="token punctuation">.</span><span class="token keyword">VALUE</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'2023-01-01'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">-- 随机获取2023-01-01 00:00:00 之上45s到120s之间的时间</span><span class="token comment">-- ====获取具体时间</span><span class="token keyword">select</span> <span class="token keyword">year</span><span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">month</span><span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">DAY</span><span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> CURDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> curtime<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">-- 通用</span><span class="token comment">-- ====格式化日期</span><span class="token keyword">select</span> date_format<span class="token punctuation">(</span><span class="token string">'2022-02-02'</span><span class="token punctuation">,</span><span class="token string">'%Y%m%d'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> date_format<span class="token punctuation">(</span><span class="token string">'2022-02-02'</span><span class="token punctuation">,</span><span class="token string">'%Y"年"%m"月"%d'</span><span class="token punctuation">)</span>   <span class="token comment">-- 20220202 | 2022年02月02 (DM)</span><span class="token keyword">SELECT</span> TO_CHAR<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'yyyy"年"MM"月"dd"日"'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> TO_CHAR<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'yyyy-MM-dd'</span><span class="token punctuation">)</span> <span class="token comment">-- 2022年02月02 | 2022-02-02 (DM)</span><span class="token keyword">select</span> date_format<span class="token punctuation">(</span><span class="token string">'2022-02-02'</span><span class="token punctuation">,</span><span class="token string">'%Y%m%d'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> date_format<span class="token punctuation">(</span><span class="token string">'2022-02-02'</span><span class="token punctuation">,</span><span class="token string">'%Y年%m月%d %H小时%i分钟%s秒'</span><span class="token punctuation">)</span>  <span class="token comment">-- 20220202 | 2022年02月02 (mysql)</span><span class="token comment">-- ====时间差</span><span class="token keyword">select</span> datediff<span class="token punctuation">(</span>HH<span class="token punctuation">,</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'2022-02-12'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- param1 => param2 经过的时间(DM)</span><span class="token keyword">select</span> datediff<span class="token punctuation">(</span><span class="token string">'2020-06-06'</span><span class="token punctuation">,</span><span class="token string">'2022-06-06'</span><span class="token punctuation">)</span> <span class="token comment">-- param1 => param2 经过的天数(mysql)</span><span class="token keyword">select</span> TIMESTAMPDIFF<span class="token punctuation">(</span><span class="token keyword">minute</span><span class="token punctuation">,</span><span class="token string">'2022-02-12 00:00:00'</span><span class="token punctuation">,</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- param1 => param2 经过的时间(mysql)</span><span class="token comment">-- ====时间函数</span><span class="token keyword">select</span> date_sub<span class="token punctuation">(</span>curdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">interval</span> <span class="token string">'1'</span> <span class="token keyword">month</span><span class="token punctuation">)</span> <span class="token comment">-- 距离param1 1个月前的日期 (DM)</span><span class="token keyword">select</span> date_add<span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">interval</span> <span class="token operator">-</span><span class="token number">30</span> <span class="token keyword">minute</span><span class="token punctuation">)</span> <span class="token comment">-- 距离param1 30分钟前的时间(mysql)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="多行转为一列">多行转为一列</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- ====DM</span><span class="token keyword">select</span> id<span class="token punctuation">,</span> wmsys<span class="token punctuation">.</span>wm_concat<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">as</span> name<span class="token punctuation">,</span> wmsys<span class="token punctuation">.</span>wm_concat<span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token keyword">as</span> age <span class="token keyword">from</span> test <span class="token keyword">group</span> id<span class="token punctuation">;</span><span class="token comment">-- ====mysql</span><span class="token keyword">SELECT</span> GROUP_CONCAT<span class="token punctuation">(</span>name SEPARATOR <span class="token string">','</span><span class="token punctuation">)</span> <span class="token keyword">as</span> name <span class="token keyword">from</span> test<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="动态新增-更新-数据">动态新增(更新)数据</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- ====DM</span><span class="token keyword">MERGE</span> <span class="token keyword">INTO</span> <span class="token operator">&lt;</span>表名<span class="token operator">></span> T1 <span class="token keyword">USING</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>查询语句<span class="token operator">></span><span class="token punctuation">)</span>T2 <span class="token keyword">ON</span> <span class="token punctuation">(</span>T2<span class="token punctuation">.</span><span class="token operator">&lt;</span>字段<span class="token operator">></span> <span class="token operator">=</span> T1<span class="token punctuation">.</span><span class="token operator">&lt;</span>字段<span class="token operator">></span><span class="token punctuation">)</span> <span class="token keyword">WHEN</span> <span class="token keyword">MATCHED</span> <span class="token keyword">THEN</span> <span class="token keyword">UPDATE</span> <span class="token keyword">SET</span> T1<span class="token punctuation">.</span><span class="token operator">&lt;</span>更新字段<span class="token operator">>=</span>T2<span class="token punctuation">.</span><span class="token operator">&lt;</span>更新字段<span class="token operator">></span><span class="token keyword">WHEN</span> <span class="token operator">NOT</span> <span class="token keyword">MATCHED</span> <span class="token keyword">THEN</span> <span class="token keyword">INSERT</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>字段<span class="token number">1</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">&lt;</span>字段<span class="token number">2</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>字段<span class="token number">1</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">&lt;</span>字段<span class="token number">2</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- ====mysql(ON DUPLICATE KEY UPDATE 必须要有主键冲突才可以触发更新)</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token operator">&lt;</span>表名<span class="token number">1</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>字段<span class="token number">1</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>字段<span class="token number">2</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token keyword">SELECT</span> <span class="token operator">&lt;</span>字段<span class="token number">1</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>字段<span class="token number">2</span><span class="token operator">></span><span class="token keyword">FROM</span> <span class="token operator">&lt;</span>表名<span class="token number">2</span><span class="token operator">></span> <span class="token keyword">ON</span> <span class="token keyword">DUPLICATE</span> <span class="token keyword">KEY</span> <span class="token keyword">UPDATE</span>     <span class="token operator">&lt;</span>更新字段<span class="token number">1</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>更新字段<span class="token number">1</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token operator">&lt;</span>更新字段<span class="token number">2</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>更新字段<span class="token number">2</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="删除重复数据">删除重复数据</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询表数据量</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">from</span> <span class="token operator">&lt;</span>表名<span class="token operator">></span><span class="token comment">-- 查询去重后的数据量</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">distinct</span> <span class="token operator">&lt;</span>字段<span class="token number">1</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">&lt;</span>字段<span class="token number">2</span><span class="token operator">></span> <span class="token keyword">from</span> <span class="token operator">&lt;</span>表名<span class="token operator">></span><span class="token punctuation">)</span><span class="token comment">-- 查询要去重的数据量</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">&lt;</span>字段<span class="token number">1</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">&lt;</span>字段<span class="token number">2</span><span class="token operator">></span> <span class="token keyword">from</span> <span class="token operator">&lt;</span>表名<span class="token operator">></span><span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token operator">&lt;</span>字段<span class="token number">1</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">&lt;</span>字段<span class="token number">2</span><span class="token operator">></span> <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">-- ====DM</span><span class="token keyword">delete</span> <span class="token keyword">from</span> <span class="token operator">&lt;</span>表名<span class="token operator">></span> T1<span class="token keyword">where</span> <span class="token punctuation">(</span>T1<span class="token punctuation">.</span>idcard<span class="token punctuation">,</span>T1<span class="token punctuation">.</span>certnum<span class="token punctuation">)</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">&lt;</span>字段<span class="token number">1</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">&lt;</span>字段<span class="token number">2</span><span class="token operator">></span> <span class="token keyword">from</span> <span class="token operator">&lt;</span>表名<span class="token operator">></span> <span class="token keyword">group</span> <span class="token keyword">by</span>  <span class="token operator">&lt;</span>字段<span class="token number">1</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">&lt;</span>字段<span class="token number">2</span><span class="token operator">></span> <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">and</span> rowid <span class="token operator">not</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">min</span><span class="token punctuation">(</span>rowid<span class="token punctuation">)</span> <span class="token keyword">from</span> <span class="token operator">&lt;</span>表名<span class="token operator">></span> <span class="token keyword">group</span> <span class="token keyword">by</span>  <span class="token operator">&lt;</span>字段<span class="token number">1</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">&lt;</span>字段<span class="token number">2</span><span class="token operator">></span> <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- ====mysql(由于myql没有默认rowid, 因此需要有主键id作为控制)</span><span class="token keyword">delete</span> <span class="token keyword">from</span> <span class="token operator">&lt;</span>表名<span class="token operator">></span> T1<span class="token keyword">where</span> <span class="token punctuation">(</span>T1<span class="token punctuation">.</span><span class="token operator">&lt;</span>字段<span class="token number">1</span><span class="token operator">></span><span class="token punctuation">,</span>T1<span class="token punctuation">.</span><span class="token operator">&lt;</span>字段<span class="token number">2</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">&lt;</span>字段<span class="token number">1</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">&lt;</span>字段<span class="token number">2</span><span class="token operator">></span> <span class="token keyword">from</span> <span class="token operator">&lt;</span>表名<span class="token operator">></span> <span class="token keyword">group</span> <span class="token keyword">by</span>  <span class="token operator">&lt;</span>字段<span class="token number">1</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">&lt;</span>字段<span class="token number">2</span><span class="token operator">></span> <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">and</span> rowid <span class="token operator">not</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">min</span><span class="token punctuation">(</span>rowid<span class="token punctuation">)</span> <span class="token keyword">from</span> <span class="token operator">&lt;</span>表名<span class="token operator">></span> <span class="token keyword">group</span> <span class="token keyword">by</span>  <span class="token operator">&lt;</span>字段<span class="token number">1</span><span class="token operator">></span><span class="token punctuation">,</span><span class="token operator">&lt;</span>字段<span class="token number">2</span><span class="token operator">></span> <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="存储过程-事件">存储过程&amp;事件</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- ====DM(达梦建议通过DM管理工具代理-计划任务实现)</span><span class="token comment">-- ====mysql</span><span class="token comment">-- ※※※ 存储过程</span><span class="token keyword">drop</span> <span class="token keyword">procedure</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> <span class="token operator">&lt;</span>pro_存储名称<span class="token operator">></span><span class="token punctuation">;</span><span class="token keyword">delimiter</span> $$<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> <span class="token operator">&lt;</span>pro_存储名称<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span><span class="token comment">-- 逻辑</span><span class="token keyword">END</span> $$<span class="token keyword">delimiter</span> <span class="token punctuation">;</span><span class="token comment">-- 查看</span><span class="token keyword">show</span> <span class="token keyword">procedure</span> <span class="token keyword">status</span><span class="token punctuation">;</span><span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">procedure</span> <span class="token operator">&lt;</span>pro_存储名称<span class="token operator">></span><span class="token punctuation">;</span><span class="token comment">-- ※※※ 事件</span><span class="token comment">-- 创建事件</span><span class="token keyword">drop</span> event <span class="token keyword">if</span> <span class="token keyword">exists</span> <span class="token identifier"><span class="token punctuation">`</span>&lt;event_事件名称><span class="token punctuation">`</span></span><span class="token punctuation">;</span><span class="token keyword">create</span> EVENT    <span class="token identifier"><span class="token punctuation">`</span>&lt;event_事件名称><span class="token punctuation">`</span></span>  <span class="token comment">-- 创建一个事件</span>    <span class="token keyword">ON</span> SCHEDULE EVERY        <span class="token number">1</span> <span class="token keyword">DAY</span> <span class="token comment">-- 每间隔一天执行一次</span>        STARTS            <span class="token string">'2023-04-25 00:00:00'</span> <span class="token comment">-- 从2023-04-25 00:00:00后开始</span>    <span class="token keyword">ON</span> COMPLETION        PRESERVE <span class="token keyword">ENABLE</span>  <span class="token comment">-- 执行完成之后不删除定时器</span>    <span class="token keyword">DO</span>    <span class="token keyword">call</span> <span class="token operator">&lt;</span>pro_存储名称<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- 每次触发定时器时执行的语句</span><span class="token comment">-- 查询事件功能</span><span class="token keyword">SELECT</span> @<span class="token variable">@event_scheduler</span><span class="token punctuation">;</span><span class="token comment">-- 开启事件功能</span><span class="token keyword">SET</span> <span class="token keyword">GLOBAL</span> event_scheduler <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">-- 关闭事件功能</span><span class="token keyword">SET</span> <span class="token keyword">GLOBAL</span> event_scheduler <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">-- 关闭事件</span><span class="token keyword">ALTER</span> EVENT event_sync_cxpt_reg_threetype <span class="token keyword">ON</span> COMPLETION PRESERVE <span class="token keyword">DISABLE</span><span class="token punctuation">;</span><span class="token comment">-- 开启事件</span><span class="token keyword">ALTER</span> EVENT event_sync_cxpt_reg_threetype <span class="token keyword">ON</span> COMPLETION PRESERVE <span class="token keyword">ENABLE</span><span class="token punctuation">;</span><span class="token comment">-- 查看当前事件</span><span class="token keyword">SHOW</span> EVENTS<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="触发器">触发器</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- ====DM</span><span class="token comment">-- 知识点: DM抛异常处理</span><span class="token comment">-- 功能: 确保表中某字段不可重复</span><span class="token keyword">create</span>  <span class="token operator">or</span> <span class="token keyword">replace</span> <span class="token keyword">trigger</span> <span class="token string">"模式名"</span><span class="token punctuation">.</span><span class="token string">"触发器名"</span>before <span class="token keyword">INSERT</span> <span class="token keyword">on</span> <span class="token string">"模式名"</span><span class="token punctuation">.</span><span class="token string">"表名"</span>referencing OLD <span class="token keyword">ROW</span> <span class="token keyword">AS</span> <span class="token string">"OLD"</span> NEW <span class="token keyword">ROW</span> <span class="token keyword">AS</span> <span class="token string">"NEW"</span><span class="token keyword">for each row</span><span class="token keyword">BEGIN</span><span class="token keyword">IF</span> <span class="token keyword">EXISTS</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token number">1</span> <span class="token keyword">FROM</span> 表名 <span class="token keyword">WHERE</span> 字段名 <span class="token operator">=</span> :NEW<span class="token punctuation">.</span>字段名<span class="token punctuation">)</span><span class="token keyword">THEN</span>  RAISE_APPLICATION_ERROR<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20001</span><span class="token punctuation">,</span> <span class="token string">'字段已存在，不允许插入数据'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="函数">函数</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- ====DM</span><span class="token comment">-- 知识点: 异常抓取</span><span class="token comment">/***Manager***/</span><span class="token keyword">CREATE</span> <span class="token operator">OR</span> <span class="token keyword">REPLACE</span> <span class="token keyword">FUNCTION</span> <span class="token string">"DMSTAND"</span><span class="token punctuation">.</span><span class="token string">"fun_to_date"</span><span class="token punctuation">(</span><span class="token string">"date_str"</span> <span class="token operator">IN</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">RETURN</span> <span class="token keyword">DATETIME</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token keyword">AS</span><span class="token keyword">BEGIN</span><span class="token comment">/*执行体*/</span><span class="token keyword">BEGIN</span><span class="token comment">-- 定义异常处理</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>to_date<span class="token punctuation">(</span>date_str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    EXCEPTION    <span class="token keyword">WHEN</span> OTHERS <span class="token keyword">THEN</span>        <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">END</span><span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>el-ui-primary</title>
      <link href="/2023/06/03/el-ui-primary/"/>
      <url>/2023/06/03/el-ui-primary/</url>
      
        <content type="html"><![CDATA[<h1>element-ui 笔记</h1><blockquote><p>快速搜索:</p><p>选择框的映射写法 &gt;&gt;&gt; flag_1</p><p>表单重置 &gt;&gt;&gt; flag_2</p><p>分页 &gt;&gt;&gt; flag_3</p><p>时间框的解耦绑定 &gt;&gt;&gt; flag_4</p><p>多标签页的切换与多接口调用 &gt;&gt;&gt; flag_5</p><p>更新表单 &gt;&gt;&gt; flag_6</p><p>新增表单 &gt;&gt;&gt; flag_7</p></blockquote><h2 id="模板">模板</h2><h3 id="Form-表单">Form 表单</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 概念  ref 绑定控件, 可通过$ref用于重置等操作;   :model 表单数据对象, 配合 el-form-item 的prop使用(:rule表单验证规则, 同理)  :inline 如果不设置就会每一个item为一行--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryDto<span class="token punctuation">"</span></span> <span class="token attr-name">:model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryDto<span class="token punctuation">"</span></span> <span class="token attr-name">:inline</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>  <span class="token attr-name">label-width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>80px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 概念    prop 绑定字段名, 从而实现表单校验, 即会验证 el-input 元素绑定的 queryDto.field 是否符合验证  --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inputField<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 概念    v-model 双向绑定; placeholder 占位提示--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryDto.inputField<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>字段1<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span> <span class="token attr-name">clearable</span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 选择框: flag_1    同时展示与字段处于映射关系写法  --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectField<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryDto.selectField<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>字段2<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span> <span class="token attr-name">clearable</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-option</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in queryDic._selectField<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.id<span class="token punctuation">"</span></span> <span class="token attr-name">:label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.label<span class="token punctuation">"</span></span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.value<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-select</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 时间框: flag_4    1. 绑定模型 v-model 因为生成的时间是数组形式, 为与dto解耦因此另外单独使用实体绑定, 因此后续重置表单要单独重置    2. 粘贴快速选择项 :picker-options 注意这是模型data    3. 全局搜索查询剩余要配置的部分  --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>block<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>时间范围样式<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-date-picker</span>      <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>timeRange.timeField<span class="token punctuation">"</span></span>      <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>daterange<span class="token punctuation">"</span></span>      <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span>      <span class="token attr-name">unlink-panels</span>      <span class="token attr-name">range-separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>至<span class="token punctuation">"</span></span>      <span class="token attr-name">start-placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>开始日期<span class="token punctuation">"</span></span>      <span class="token attr-name">end-placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>结束日期<span class="token punctuation">"</span></span>      <span class="token attr-name">:picker-options</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pickerOptions<span class="token punctuation">"</span></span>    <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleQuery()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>查询<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 重置: flag_2    1. 绑定表单 resetForm('xxx')    2. 粘贴方法 resetForm    3. 注意: 如果有模型不在表单内需要额外清空(如本案例中的timeRange)  --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>resetForm('queryDto')<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>重置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleInsert()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>新增<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--   分页: flag_3  1. 绑定当前页 :current-page  2. 设置分页选项: :page-sizes  3. 绑定页总数: :total  4. 粘贴方法:  @size-change, @current-change--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>page<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-pagination</span>    <span class="token attr-name">:current-page</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryDto.page<span class="token punctuation">"</span></span>    <span class="token attr-name">:page-sizes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>[15, 25, 40, 50]<span class="token punctuation">"</span></span>    <span class="token attr-name">:page-size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span>    <span class="token attr-name">layout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>total, sizes, prev, pager, next, jumper<span class="token punctuation">"</span></span>    <span class="token attr-name">:total</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>respData.pager.total<span class="token punctuation">"</span></span>    <span class="token attr-name">@size-change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleSizeChange<span class="token punctuation">"</span></span>    <span class="token attr-name">@current-change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleCurrentChange<span class="token punctuation">"</span></span>  <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">queryDto</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">inputField</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      <span class="token comment">// flag_1</span>      <span class="token literal-property property">selectField</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      <span class="token comment">// 后端请求参数(具体根据接口文档需要) flag_4</span>      <span class="token literal-property property">timeFieldStart</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      <span class="token literal-property property">timeFieldEnd</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      <span class="token comment">// flag_3</span>      <span class="token literal-property property">page</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token literal-property property">size</span><span class="token operator">:</span> <span class="token number">15</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// 通过映射即可实现: 下拉框所展示与传给后端的值形成对应</span>    <span class="token literal-property property">queryDic</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// flag_1</span>      <span class="token literal-property property">_selectField</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'映射1'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'映射2'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">'映射3'</span> <span class="token punctuation">&#125;</span>      <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// 时间范围字段(与dto进行解耦) flag_4</span>    <span class="token literal-property property">timeRange</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">timeField</span><span class="token operator">:</span> <span class="token string">''</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// 此处不关心返回数据的格式, 仅举例获取total</span>    <span class="token literal-property property">respData</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">list</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token comment">// flag_3</span>      <span class="token literal-property property">pager</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">total</span><span class="token operator">:</span> <span class="token number">0</span>  <span class="token comment">// 注意此处不能用 ''</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// 快速选择时间范围(注意此处是data()内不是methods) flag_4</span>    <span class="token literal-property property">pickerOptions</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">shortcuts</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'最近一周'</span><span class="token punctuation">,</span>        <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token parameter">picker</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">const</span> end <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token keyword">const</span> start <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          start<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>start<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">3600</span> <span class="token operator">*</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">7</span><span class="token punctuation">)</span>          picker<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'pick'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>start<span class="token punctuation">,</span> end<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'最近一个月'</span><span class="token punctuation">,</span>        <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token parameter">picker</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">const</span> end <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token keyword">const</span> start <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          start<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>start<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">3600</span> <span class="token operator">*</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span>          picker<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'pick'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>start<span class="token punctuation">,</span> end<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">'最近三个月'</span><span class="token punctuation">,</span>        <span class="token function">onClick</span><span class="token punctuation">(</span><span class="token parameter">picker</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">const</span> end <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token keyword">const</span> start <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          start<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>start<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">3600</span> <span class="token operator">*</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">90</span><span class="token punctuation">)</span>          picker<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'pick'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>start<span class="token punctuation">,</span> end<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token function">handleQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 查询方法(此处后端因为定义的时间范围是start和end, 因此查询前要做封装) flag_4</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timeRange<span class="token punctuation">.</span>timeField<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 封装时间dto(方法见下面)</span>      <span class="token keyword">const</span> _timeRange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleDateRange</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timeRange<span class="token punctuation">.</span>timeField<span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>queryDto<span class="token punctuation">.</span>timeFieldStart <span class="token operator">=</span> _timeRange<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>queryDto<span class="token punctuation">.</span>timeFieldEnd <span class="token operator">=</span> _timeRange<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>      <span class="token comment">// 开始查询</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 处理日期格式(具体日期格式转换见 附:date-format.js) flag_4</span>  <span class="token function">handleDateRange</span><span class="token punctuation">(</span><span class="token parameter">dateRange</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dateRange<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token function">formatDate</span><span class="token punctuation">(</span>dateRange<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">formatDate</span><span class="token punctuation">(</span>dateRange<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 重置表单 flag_2</span>  <span class="token function">resetForm</span><span class="token punctuation">(</span><span class="token parameter">formName</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">[</span>formName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">resetFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 此处要把时间范围的字段单独重置 flag_4</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>timeRange<span class="token punctuation">.</span>timeField <span class="token operator">=</span> <span class="token string">''</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 分页size/page变更 flag_3</span>  <span class="token function">handleSizeChange</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>queryDto<span class="token punctuation">.</span>size <span class="token operator">=</span> val    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// size变更后重新查询</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">handleCurrentChange</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>queryDto<span class="token punctuation">.</span>page <span class="token operator">=</span> val    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// page变更后重新查询</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token comment">/* 附: 分页栏底部居中样式 */</span><span class="token selector">.page</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/*设置为Flexbox容器*/</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token comment">/*垂直居中*/</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token comment">/*水平居中*/</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>附: 时间格式化工具类 <code>date-format.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 时间格式化工具类</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">formatDate</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> pattern</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> dt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>pattern <span class="token operator">===</span> <span class="token string">'yyyy-M-d'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// yyyy-M-d</span>    <span class="token keyword">const</span> year <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> month <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">const</span> date <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>year<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>month<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>date<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pattern <span class="token operator">===</span> <span class="token string">'yyyy-M-d H:m:s'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// yyyy-M-d H:m:s</span>    <span class="token keyword">const</span> year <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> month <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">const</span> date <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> hour <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> minute <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> second <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>year<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>month<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>date<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>hour<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>minute<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>second<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pattern <span class="token operator">===</span> <span class="token string">'yyyy-MM-dd'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// yyyy-MM-dd</span>    <span class="token keyword">const</span> year <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> month <span class="token operator">=</span> <span class="token punctuation">(</span>dt<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> date <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>year<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>month<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>date<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">// yyyy-MM-dd HH:mm:ss</span>    <span class="token keyword">const</span> year <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> month <span class="token operator">=</span> <span class="token punctuation">(</span>dt<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> date <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> hour <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> minute <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> second <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>year<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>month<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>date<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>hour<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>minute<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>second<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Table-表格-Tag-标签">Table 表格/Tag 标签</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 标签页(可选)   说明: 多标签可能会存在多个接口对应多个表单的情况, 因此handleSearch(查询)时可以根据表单名进行路由接口 flag_5  handleClick 切换标签方法  el-tab-pane 中 form1 表示当前表单唯一标识(重要)--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-tabs</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>activeName<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>border-card<span class="token punctuation">"</span></span> <span class="token attr-name">@tab-click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleClick<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-tab-pane</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>表单一<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>searchTable<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>前置说明<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>remind<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>说明文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-divider</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cTable<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table</span>          <span class="token attr-name">v-loading</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loading.xxx<span class="token punctuation">"</span></span>          <span class="token attr-name">element-loading-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>玩命加载中🤣🤣🤣<span class="token punctuation">"</span></span>          <span class="token attr-name">element-loading-spinner</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>el-icon-loading<span class="token punctuation">"</span></span>          <span class="token attr-name">element-loading-background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rgba(196, 196, 196, 0.8)<span class="token punctuation">"</span></span>          <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>respData.xxxInfo<span class="token punctuation">"</span></span>          <span class="token attr-name">border</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 100%</span><span class="token punctuation">"</span></span></span>           <span class="token attr-name">:header-cell-style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123; background: '#f8f8f8', color: '#000' &#125;<span class="token punctuation">"</span></span>        <span class="token punctuation">></span></span>          <span class="token comment">&lt;!-- 编号字段 --></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>编号<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>auto<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>          <span class="token comment">&lt;!-- 普通字段 --></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>field1<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>字段一<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>          <span class="token comment">&lt;!-- 映射字段 --></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mappingField<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>映射字段<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.row.mappingField === 1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>类型1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.row.mappingField === 2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>类型2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.row.mappingField === 3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>类型3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>          <span class="token comment">&lt;!-- 右侧 删除/修改(详细见动态表单) 按钮 --></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">fixed</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>操作<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>small<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleUpdate(item.row)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>修改<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>small<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleDelete(item.row.id)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-tab-pane</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-tabs</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">formType</span><span class="token operator">:</span> <span class="token string">'form1'</span> <span class="token comment">// 当前表单类型 flag_5</span>    <span class="token literal-property property">respData</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">xxxInfo</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token function">handlerSearch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 根据当前标签类型调取不同接口 flag_5</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>formType <span class="token operator">===</span> <span class="token string">'form1'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 进行form1的接口请求</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 切换标签 flag_5</span>  <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token parameter">tab<span class="token punctuation">,</span> event</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>formType <span class="token operator">=</span> tab<span class="token punctuation">.</span>name  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 执行删除</span>  <span class="token keyword">async</span> <span class="token function">handleDelete</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$confirm</span><span class="token punctuation">(</span><span class="token string">'此操作将删除该数据, 是否继续?'</span><span class="token punctuation">,</span> <span class="token string">'提示'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">confirmButtonText</span><span class="token operator">:</span> <span class="token string">'确定'</span><span class="token punctuation">,</span>        <span class="token literal-property property">cancelButtonText</span><span class="token operator">:</span> <span class="token string">'取消'</span><span class="token punctuation">,</span>        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'warning'</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token keyword">await</span> <span class="token function">deleteById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>      <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'success'</span><span class="token punctuation">,</span>        <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'删除成功'</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'info'</span><span class="token punctuation">,</span>        <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'已取消删除'</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 封装弹框方法</span>  <span class="token function">alertMsg</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">Message</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">message</span><span class="token operator">:</span> msg<span class="token punctuation">,</span>    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'warning'</span><span class="token punctuation">,</span>    <span class="token literal-property property">duration</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1000</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token comment">/* 附: 表格样式 */</span><span class="token selector">.searchTable</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 90%<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> 30px auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 附: 说明狂 */</span><span class="token selector">.remind</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #d9d9d9<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 20px 40px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 附: 此处与前置说明框保持间距 */</span><span class="token selector">.cTable</span> <span class="token punctuation">&#123;</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="el-dialog-对话框">el-dialog 对话框</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">fixed</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>操作<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!-- 打开更新表单面板 flag_6 --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>small<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleUpdate(item.row)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>修改<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>small<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleDelete(item.row.id)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 更新表单: flag_6  :visible.sync 绑定是否显示对象  :model 绑定更新data对象  confirmUpdate() 确认  label-width 表单标签文字宽度  label-position 表单控制文字位置, 但要先设置文字宽度  注意: 此处 el-form-item 标签中没加prop属性, 因为不需要校验操作, 具体qi--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-dialog</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>25%<span class="token punctuation">"</span></span> <span class="token attr-name">:visible.sync</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateDialogVisible<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateForm<span class="token punctuation">"</span></span> <span class="token attr-name">:model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateForm<span class="token punctuation">"</span></span> <span class="token attr-name">label-width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>80px<span class="token punctuation">"</span></span> <span class="token attr-name">label-position</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>updateForm.id<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span> <span class="token attr-name">:readonly</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> auto</span><span class="token punctuation">"</span></span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> auto</span><span class="token punctuation">"</span></span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>confirmUpdate()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>确定<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> auto</span><span class="token punctuation">"</span></span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cancelUpdate()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>取消<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-dialog</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 新增表单: flag_7  :visible.sync 绑定是否显示对象  confirmInsert() 新增  cancelInsert()  取消方法--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-dialog</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>25%<span class="token punctuation">"</span></span> <span class="token attr-name">:visible.sync</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertDialogVisible<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertForm<span class="token punctuation">"</span></span> <span class="token attr-name">:model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertForm<span class="token punctuation">"</span></span> <span class="token attr-name">label-width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>80px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> auto</span><span class="token punctuation">"</span></span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>confirmInsert()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>确定<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mini<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> auto</span><span class="token punctuation">"</span></span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cancelInsert()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>取消<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-dialog</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 更新相关模型 flag_6</span>    <span class="token literal-property property">updateDialogVisible</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token literal-property property">updateForm</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token comment">// 更新唯一键: 通常根据接口从行中所取</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// 新增相关模型 flag_7</span>    <span class="token literal-property property">insertDialogVisible</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token literal-property property">insertForm</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 表单内容</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 打开更新表单面板(回显) flag_6</span>  <span class="token function">handleUpdate</span><span class="token punctuation">(</span><span class="token parameter">row</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>updateDialogVisible <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token comment">// 解构对象(此处是因为还有别的数据封装)</span>    <span class="token keyword">const</span> curUser <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>row <span class="token punctuation">&#125;</span>    curUser<span class="token punctuation">.</span>roles <span class="token operator">=</span> curUser<span class="token punctuation">.</span>roles <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>updateForm <span class="token operator">=</span> curUser  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 取消更新 </span>  <span class="token function">cancelUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>updateDialogVisible <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'info'</span><span class="token punctuation">,</span>       <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'已取消'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 确认更新</span>  <span class="token keyword">async</span> <span class="token function">confirmUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">await</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>updateForm<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>updateForm<span class="token punctuation">.</span>id<span class="token punctuation">)</span>  <span class="token comment">// 调取更新接口</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>updateDialogVisible <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token comment">// 面板关闭</span>    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleSearch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 查询</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'warning'</span><span class="token punctuation">,</span>      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'更新成功'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 打开新增面板 flag_7</span>  <span class="token function">handleInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>insertDialogVisible <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 取消新增</span>  <span class="token function">cancelInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>insertDialogVisible <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'info'</span><span class="token punctuation">,</span>      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'已取消'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 确认新增</span>  <span class="token keyword">async</span> <span class="token function">confirmInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">await</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>insertForm<span class="token punctuation">)</span> <span class="token comment">// 新增</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>insertDialogVisible <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">// 面板关闭</span>    <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleSearch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 查询</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$message</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'warning'</span><span class="token punctuation">,</span>      <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">'新增成功'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="动态渲染表格-imp">动态渲染表格(imp)</h3><h4 id="思路">思路</h4><ol><li>前置说明: 由于该接口是动态查询数据库接口, 会有sql注入等风险, 因此仅用于个人运维使用. 同时为了接口传参通用性, 在sql中存在 <code>select 1, fieldxxx from tablexxx</code> , 因此在前端提取字段时, 要先将 <code>1</code> 字段删去</li><li>前端调取接口, 先将 <code>1</code> 字段删去, 而后遍历数据, 封装字段名</li><li>动态渲染至 <code>el-table</code> 中</li></ol><h4 id="查询并处理表头方法">查询并处理表头方法</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// methods</span><span class="token comment">// 执行查询 👇</span><span class="token keyword">async</span> <span class="token function">handLeSelect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 查询之前要把动态表头置为空</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>tableHead <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment">// 校验参数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>selectData<span class="token punctuation">.</span>table <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>selectData<span class="token punctuation">.</span>field<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">warning</span><span class="token punctuation">(</span><span class="token string">'请先选择表及字段再进行查询'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 执行查询</span>    <span class="token comment">// 赋值到data</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>loading<span class="token punctuation">.</span>select <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// loading</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">handleSelect</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>selectData<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>loading<span class="token punctuation">.</span>select <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">// loading</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>respData<span class="token punctuation">.</span>msg <span class="token operator">=</span> data<span class="token punctuation">.</span>data<span class="token punctuation">.</span>exceptionMsg    <span class="token keyword">const</span> list <span class="token operator">=</span> data<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data    <span class="token comment">// 遍历删除属性名是数字的</span>    list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">delete</span> item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span>length <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> keyArr <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        keyArr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>tableHead<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">key</span><span class="token operator">:</span> key <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>respData<span class="token punctuation">.</span>selectResult <span class="token operator">=</span> list<span class="token punctuation">&#125;</span><span class="token comment">// data() 👇</span><span class="token comment">// 动态表头</span><span class="token literal-property property">tableHead</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="template渲染">template渲染</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>searchTable<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 此处因为  --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table</span>    <span class="token attr-name">v-loading</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loading.select<span class="token punctuation">"</span></span>    <span class="token attr-name">element-loading-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>玩命加载中🤣🤣🤣<span class="token punctuation">"</span></span>    <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>respData.selectResult<span class="token punctuation">"</span></span>    <span class="token attr-name">border</span>    <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 100%</span><span class="token punctuation">"</span></span></span>    <span class="token attr-name">max-height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>530px<span class="token punctuation">"</span></span>    <span class="token attr-name">:header-cell-style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123; background: '#f8f8f8', color: '#000' &#125;<span class="token punctuation">"</span></span>  <span class="token punctuation">></span></span>    <span class="token comment">&lt;!--模板表格--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span>      <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in tableHead<span class="token punctuation">"</span></span>      <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.key<span class="token punctuation">"</span></span>      <span class="token attr-name">:label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.key<span class="token punctuation">"</span></span>      <span class="token attr-name">:property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.key<span class="token punctuation">"</span></span>      <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>250<span class="token punctuation">"</span></span>    <span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scope<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token comment">&lt;!-- tooltip提示标签卡       注意: tooltip的content需要string, 因此 scope.row[scope.column.property] 拿到字段值之后要 toString()  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-tooltip</span>           <span class="token attr-name">:content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>scope.row[scope.column.property] ? scope.row[scope.column.property].toString() : ''<span class="token punctuation">"</span></span>         <span class="token punctuation">></span></span>           <span class="token comment">&lt;!-- 表格一行显示 👇 copyCellData(复制表格方法)--></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">text-align</span><span class="token punctuation">:</span> center</span><span class="token punctuation">"</span></span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>oneline<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             <span class="token comment">&lt;!-- 复制按钮 --></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span>               <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>               <span class="token attr-name">icon</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>el-icon-copy-document<span class="token punctuation">"</span></span>               <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>copyCellData(scope.row[scope.column.property])<span class="token punctuation">"</span></span>             <span class="token punctuation">/></span></span>             &#123;&#123; scope.row[scope.column.property] &#125;&#125;           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-tooltip</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token comment">// ...methods</span><span class="token function">copyCellData</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>text<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">warning</span><span class="token punctuation">(</span><span class="token string">'无内容'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> textarea <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'textarea'</span><span class="token punctuation">)</span>  textarea<span class="token punctuation">.</span>value <span class="token operator">=</span> text  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>textarea<span class="token punctuation">)</span>  textarea<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  document<span class="token punctuation">.</span><span class="token function">execCommand</span><span class="token punctuation">(</span><span class="token string">'copy'</span><span class="token punctuation">)</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>textarea<span class="token punctuation">)</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">'复制成功'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">.searchTable</span> <span class="token punctuation">&#123;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 90%<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> auto auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.oneline</span> <span class="token punctuation">&#123;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span>  <span class="token comment">/* 将对象作为弹性伸缩盒子模型显示 */</span>  <span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span>  <span class="token comment">/* 限制在一个块元素显示的文本的行数 */</span>  <span class="token comment">/* -webkit-line-clamp 其实是一个不规范属性，使用了WebKit的CSS扩展属性，该方法适用于WebKit浏览器及移动端；*/</span>  <span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>  <span class="token comment">/* 设置或检索伸缩盒对象的子元素的排列方式 */</span>  <span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span> vertical<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token comment">/* 深度选择器-此处是为了解决el-table表头无法复制问题 important */</span><span class="token selector">::v-deep .el-table th.el-table__cell</span> <span class="token punctuation">&#123;</span>  <span class="token property">user-select</span><span class="token punctuation">:</span> initial<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="表格选择事件">表格选择事件</h3><p>只需要在 <code>el-table</code> 中添加 <code>@selection-change</code>事件及新增一个选择列即可, 代码如下👇</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--  1. 添加@selection-change并绑定事件  2. 新增列 &lt;el-table-column type="selection" />  3. methods及data()见下  附: 加载属性的使用: 新增如下属性即可     v-loading="loading.child"  // 绑定的loading字段, 同时要在请求接口前打开, 完成请求后关闭    element-loading-text="玩命加载中🤣🤣🤣"    element-loading-spinner="el-icon-loading"  // 如果全页面加载则删去此行    element-loading-background="rgba(196, 196, 196, 0.8)"  // 如果全页面加载则删去此行--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table</span>  <span class="token attr-name">v-loading</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loading.detail<span class="token punctuation">"</span></span>  <span class="token attr-name">element-loading-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>玩命加载中🤣🤣🤣<span class="token punctuation">"</span></span>  <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span>  <span class="token attr-name">border</span>  <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span> 100%</span><span class="token punctuation">"</span></span></span>  <span class="token attr-name">max-height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>530px<span class="token punctuation">"</span></span>  <span class="token attr-name">:header-cell-style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123; background: '#f8f8f8', color: '#000' &#125;<span class="token punctuation">"</span></span>  <span class="token attr-name">@selection-change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleSelectionChange<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selection<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xxx<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>逻辑名称<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token comment">// ...data()</span><span class="token comment">// 选择列表</span><span class="token literal-property property">selectedRows</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment">// ...methods</span><span class="token comment">// 表格选择事件(配合&lt;el-table-column type="selection" />使用)</span><span class="token function">handleSelectionChange</span><span class="token punctuation">(</span><span class="token parameter">selection</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 此处会将选中的row加入至数组</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>selectedRows <span class="token operator">=</span> selection<span class="token punctuation">&#125;</span><span class="token punctuation">,</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="组件">组件</h2><h3 id="父子组件的引用">父子组件的引用</h3><ol><li><p>子组件引用父组件内容</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Child'</span><span class="token punctuation">,</span>  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 引用后变量后即可通过变量调用(子组件是不建议修改父组件属性内容)</span>    <span class="token literal-property property">dic</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> Object<span class="token punctuation">,</span>      <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// 引用方法后即可调用该方法</span>    <span class="token literal-property property">query</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>父组件引用子组件内容</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token comment">// 导入子组件</span><span class="token keyword">import</span> Child <span class="token keyword">from</span> <span class="token string">'./components/Child.vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> Child <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token function">invokeChildComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>child<span class="token punctuation">.</span><span class="token function">xxxMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!-- 组件的使用: 在需要展示位置放置组件标签     ref 定义子组件引用名     :dic :query 将父组件对象/方法传递给子组件, 子组件通过该名字进行引用  --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>User</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span> <span class="token attr-name">:dic</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>queryDic<span class="token punctuation">"</span></span> <span class="token attr-name">:query</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>handleQuery<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token comment">&lt;!--  标签中引用子组件内容  --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>small<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$refs.user.queryTbUserByGuid(row.toRowGuid)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      &#123;&#123; row.toRowGuid &#125;&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>$refs</code> 是 Vue.js 提供的一个特殊属性，用于获取组件或元素的引用。在模板中，可以使用 <code>ref</code> 属性来为组件或元素设置引用，然后在组件实例中使用 <code>$refs</code> 来访问这个引用。</p></blockquote></li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--  填写账号密码的伪代码  this.$refs.username.focus() 是一种操作 DOM 元素的方式，可以让我们在组件实例中访问元素的引用，并调用元素的方法或属性--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loginForm.username<span class="token punctuation">"</span></span> <span class="token attr-name">:placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$t('login.username')<span class="token punctuation">"</span></span> <span class="token attr-name">...省略</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 如果用户名和密码的输入框没值, 则自动聚焦</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>loginForm<span class="token punctuation">.</span>username <span class="token operator">===</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>username<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>loginForm<span class="token punctuation">.</span>password <span class="token operator">===</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>password<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义组件demo">自定义组件demo</h3><p>以封装Tooltip为例</p><ol><li><p>定义Tooltip.vue</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-tooltip</span> <span class="token attr-name">:content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span> <span class="token attr-name">:effect</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>effect<span class="token punctuation">"</span></span> <span class="token attr-name">:placement</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>placement<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-tooltip</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Tooltip'</span><span class="token punctuation">,</span>  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>      <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// 封装默认参数</span>    <span class="token literal-property property">effect</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">'dark'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">placement</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">'top'</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>组件的引用</p></li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>企业简介<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>150<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123; row &#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-tooltip</span> <span class="token attr-name">:content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row.content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">text-align</span><span class="token punctuation">:</span> center</span><span class="token punctuation">"</span></span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>oneline<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            &#123;&#123; shortConent(row.content) &#125;&#125;          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-tooltip</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token selector">.oneline</span> <span class="token punctuation">&#123;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span>  <span class="token comment">/* 将对象作为弹性伸缩盒子模型显示 */</span>  <span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span>  <span class="token comment">/* 限制在一个块元素显示的文本的行数 */</span>  <span class="token comment">/* -webkit-line-clamp 其实是一个不规范属性，使用了WebKit的CSS扩展属性，该方法适用于WebKit浏览器及移动端；*/</span>  <span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>  <span class="token comment">/* 设置或检索伸缩盒对象的子元素的排列方式 */</span>  <span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span> vertical<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="链接标签的定义">链接标签的定义</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toRowGuid<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>toRowGuid<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>260<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 1. 定义template, 解构当前行 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123; row &#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 2. 调用方法 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>small<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$refs.user.queryTbUserByGuid(row.toRowGuid)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            &#123;&#123; row.toRowGuid &#125;&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="watch的使用">watch的使用</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">watchField</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 监听watchField对象, 如果新值发生了变化, 则执行一下逻辑</span>  <span class="token function-variable function">watchField</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">newV<span class="token punctuation">,</span> oldV</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newV <span class="token operator">!==</span> oldV<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 执行逻辑</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="其他框架积累">其他框架积累</h2><h3 id="CryptoJS-的使用"><code>CryptoJS</code> 的使用</h3><ol><li><p>安装、引用</p><pre class="line-numbers language-none"><code class="language-none">npm install --save crypto-js import CryptoJS from &#39;crypto-js&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>使用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// AES ECB加密</span><span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token string">'待加密内容'</span><span class="token keyword">const</span> key <span class="token operator">=</span> CryptoJS<span class="token punctuation">.</span>enc<span class="token punctuation">.</span>Utf8<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">)</span><span class="token keyword">const</span> encrypted <span class="token operator">=</span> CryptoJS<span class="token punctuation">.</span><span class="token constant">AES</span><span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">mode</span><span class="token operator">:</span> CryptoJS<span class="token punctuation">.</span>mode<span class="token punctuation">.</span><span class="token constant">ECB</span><span class="token punctuation">,</span>    <span class="token literal-property property">padding</span><span class="token operator">:</span> CryptoJS<span class="token punctuation">.</span>pad<span class="token punctuation">.</span>Pkcs7<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> encContent <span class="token operator">=</span> encrypted<span class="token punctuation">.</span>ciphertext<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>CryptoJS<span class="token punctuation">.</span>enc<span class="token punctuation">.</span>Base64<span class="token punctuation">)</span><span class="token comment">// AES ECB解密</span><span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token string">'待解密内容'</span><span class="token keyword">const</span> key <span class="token operator">=</span> CryptoJS<span class="token punctuation">.</span>enc<span class="token punctuation">.</span>Utf8<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">)</span><span class="token keyword">const</span> decrypted <span class="token operator">=</span> CryptoJS<span class="token punctuation">.</span><span class="token constant">AES</span><span class="token punctuation">.</span><span class="token function">decrypt</span><span class="token punctuation">(</span>    <span class="token punctuation">&#123;</span> <span class="token literal-property property">ciphertext</span><span class="token operator">:</span> CryptoJS<span class="token punctuation">.</span>enc<span class="token punctuation">.</span>Base64<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    key<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">mode</span><span class="token operator">:</span> CryptoJS<span class="token punctuation">.</span>mode<span class="token punctuation">.</span><span class="token constant">ECB</span><span class="token punctuation">,</span>        <span class="token literal-property property">padding</span><span class="token operator">:</span> CryptoJS<span class="token punctuation">.</span>pad<span class="token punctuation">.</span>Pkcs7    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> decContent <span class="token operator">=</span> decrypted<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>CryptoJS<span class="token punctuation">.</span>enc<span class="token punctuation">.</span>Utf8<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="xml提取">xml提取</h3><p><code>npm install xml2js --save</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Parser <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'xml2js'</span><span class="token keyword">const</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parser</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">explicitArray</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// 关闭底部数组解析</span><span class="token keyword">const</span> detailXml <span class="token operator">=</span> data<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data<span class="token punctuation">.</span>tableInfo <span class="token comment">// 待处理的xml字符串</span><span class="token comment">// 解析xml至对象</span>parser<span class="token punctuation">.</span><span class="token function">parseString</span><span class="token punctuation">(</span>detailXml<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>tableData <span class="token operator">=</span> result<span class="token punctuation">.</span>EcaTable  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cas</title>
      <link href="/2023/05/20/cas/"/>
      <url>/2023/05/20/cas/</url>
      
        <content type="html"><![CDATA[<h2 id="CAS之Atomic包">CAS之Atomic包</h2><h4 id="updateAndGet实现原理demo">updateAndGet实现原理demo</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">updateAndGet</span><span class="token punctuation">(</span><span class="token class-name">AtomicInteger</span> i<span class="token punctuation">,</span> <span class="token class-name">IntUnaryOperator</span> operator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 获取当前值</span>        <span class="token keyword">int</span> prev <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 计算值</span>        <span class="token keyword">int</span> next <span class="token operator">=</span> operator<span class="token punctuation">.</span><span class="token function">applyAsInt</span><span class="token punctuation">(</span>prev<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 比较并交换, 成功则返回, 不成功则自旋重试</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>prev<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手机扫码登录流程</title>
      <link href="/2023/04/26/scan-code/"/>
      <url>/2023/04/26/scan-code/</url>
      
        <content type="html"><![CDATA[<h2 id="流程图">流程图</h2><pre class="mermaid">sequenceDiagramactor c as 手机端participant p as PC端participant s as Server端p ->> +s: 发送生成二维码请求    s ->> s: 生成二维码ID    s -->> -p: 返回二维码ID    p ->> p: 根据二维码ID生成二维码    loop 定时轮询    p ->> +s: 查询二维码状态, 直到登录成功    endc ->> +p: 扫描二维码p -->> -c: 二维码IDc ->> +s: 将手机端身份信息, 二维码信息发送至Server端s ->> s: 二维码ID和身份证信息绑定, 并生成临时tokens -->> -c: 返回临时tokenalt 已扫码s -->> p: 二维码状态改为: 已扫码, 待确认endc ->> +s: 携带临时token, 确认登录s ->> s: 生成PC端的tokenalt 已确认登录s -->> -p: 二维码状态改为: 已登录ends -->> -p: 返回PC端的tokenp ->> +s: 凭借token进行访问s -->> -p: 返回信息</pre>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> safe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前后端api交互安全</title>
      <link href="/2023/04/16/api-safety/"/>
      <url>/2023/04/16/api-safety/</url>
      
        <content type="html"><![CDATA[<h2 id="demo1">demo1</h2><pre class="mermaid">sequenceDiagramactor c as 客户端participant f as 前端服务器participant b as 后端服务器c ->> f: 触发请求f ->> +b: 发送请求b ->> b: 通过RSA生成pubkey1和prikey1note right of b: pubkey1, prikey1b -->> -f: 将pubkey1返回前端b --> +f: f ->> f: 通过RSA生成pubkey2和prikey2note left of f: pubkey2, prikey2f ->> f: 加密: pubkey1(pubkey2) => secret1f ->> -b: 用secret1请求后端f --> +b: b ->> b: 解密: prikey1(secret1) => pubkey2b ->> b: 加密: pubkey2(AESkey) => secret2b ->> -f: 返回secret2b --> +f: f ->> f: 解密: prikey2(secret2) => AESkeyf ->> f: 加密: AESkey(data) => secretDataf ->> -b: 将加密数据发送给后端</pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;text&quot; &#x2F;&gt;    &lt;button @click&#x3D;&quot;encryptData&quot;&gt;加密&lt;&#x2F;button&gt;    &lt;button @click&#x3D;&quot;decryptData&quot;&gt;解密&lt;&#x2F;button&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;import CryptoJS from &#39;crypto-js&#39;export default &#123;  data() &#123;    return &#123;      text: &#39;&#39;,      key: null,      nonce: null,      ciphertext: null,      tag: null    &#125;  &#125;,  methods: &#123;    &#x2F;&#x2F; 使用AES算法加密数据    encryptData() &#123;      const key &#x3D; CryptoJS.lib.WordArray.random(16)      const nonce &#x3D; CryptoJS.lib.WordArray.random(12)      const encrypted &#x3D; CryptoJS.AES.encrypt(this.text, key, &#123;        mode: CryptoJS.mode.GCM,        iv: nonce      &#125;)      this.key &#x3D; CryptoJS.enc.Base64.stringify(key)      this.nonce &#x3D; CryptoJS.enc.Base64.stringify(nonce)      this.ciphertext &#x3D; encrypted.ciphertext.toString(CryptoJS.enc.Base64)      this.tag &#x3D; CryptoJS.enc.Base64.stringify(encrypted.finalize())    &#125;,    &#x2F;&#x2F; 使用AES算法解密数据    decryptData() &#123;      const key &#x3D; CryptoJS.enc.Base64.parse(this.key)      const nonce &#x3D; CryptoJS.enc.Base64.parse(this.nonce)      const ciphertext &#x3D; CryptoJS.enc.Base64.parse(this.ciphertext)      const tag &#x3D; CryptoJS.enc.Base64.parse(this.tag)      const decrypted &#x3D; CryptoJS.AES.decrypt(        &#123; ciphertext &#125;,        key,        &#123;          mode: CryptoJS.mode.GCM,          iv: nonce,          tag: tag        &#125;      )      this.text &#x3D; decrypted.toString(CryptoJS.enc.Utf8)    &#125;  &#125;&#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">StandardCharsets</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">KeyPair</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">KeyPairGenerator</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">PrivateKey</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">PublicKey</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>bouncycastle<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span></span><span class="token class-name">InvalidCipherTextException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>bouncycastle<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>engines<span class="token punctuation">.</span></span><span class="token class-name">AESEngine</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>bouncycastle<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>modes<span class="token punctuation">.</span></span><span class="token class-name">GCMBlockCipher</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>bouncycastle<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>params<span class="token punctuation">.</span></span><span class="token class-name">AEADParameters</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>bouncycastle<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>params<span class="token punctuation">.</span></span><span class="token class-name">KeyParameter</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>bouncycastle<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">PrivateKeyFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>bouncycastle<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">PublicKeyFactory</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EncryptionUtil</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">KEY_SIZE</span> <span class="token operator">=</span> <span class="token number">2048</span><span class="token punctuation">;</span>    <span class="token comment">// 生成RSA密钥对</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">KeyPair</span> <span class="token function">generateKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">KeyPairGenerator</span> generator <span class="token operator">=</span> <span class="token class-name">KeyPairGenerator</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"RSA"</span><span class="token punctuation">,</span> <span class="token string">"BC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        generator<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token constant">KEY_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> generator<span class="token punctuation">.</span><span class="token function">generateKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 使用RSA公钥加密AES密钥</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">encryptKey</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> key<span class="token punctuation">,</span> <span class="token class-name">PublicKey</span> publicKey<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> encryptedKey <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">GCMBlockCipher</span> cipher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GCMBlockCipher</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AESEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">KeyParameter</span> keyParameter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KeyParameter</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">AEADParameters</span> parameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AEADParameters</span><span class="token punctuation">(</span>keyParameter<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>            encryptedKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>cipher<span class="token punctuation">.</span><span class="token function">getOutputSize</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">processBytes</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> key<span class="token punctuation">.</span>length<span class="token punctuation">,</span> encryptedKey<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>encryptedKey<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvalidCipherTextException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token class-name">PublicKeyFactory</span><span class="token punctuation">.</span><span class="token function">createKey</span><span class="token punctuation">(</span>publicKey<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>encryptedKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 使用RSA私钥解密AES密钥</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">decryptKey</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> encryptedKey<span class="token punctuation">,</span> <span class="token class-name">PrivateKey</span> privateKey<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> decryptedKey <span class="token operator">=</span> <span class="token class-name">PrivateKeyFactory</span><span class="token punctuation">.</span><span class="token function">createKey</span><span class="token punctuation">(</span>privateKey<span class="token punctuation">.</span><span class="token function">getEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decrypt</span><span class="token punctuation">(</span>encryptedKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">GCMBlockCipher</span> cipher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GCMBlockCipher</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AESEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">KeyParameter</span> keyParameter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KeyParameter</span><span class="token punctuation">(</span>decryptedKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">AEADParameters</span> parameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AEADParameters</span><span class="token punctuation">(</span>keyParameter<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> key <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>cipher<span class="token punctuation">.</span><span class="token function">getOutputSize</span><span class="token punctuation">(</span>decryptedKey<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">processBytes</span><span class="token punctuation">(</span>decryptedKey<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> decryptedKey<span class="token punctuation">.</span>length<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> key<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 使用AES算法加密数据</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">encryptData</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> key<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">GCMBlockCipher</span> cipher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GCMBlockCipher</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AESEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">KeyParameter</span> keyParameter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KeyParameter</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">AEADParameters</span> parameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AEADParameters</span><span class="token punctuation">(</span>keyParameter<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ciphertext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>cipher<span class="token punctuation">.</span><span class="token function">getOutputSize</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">processBytes</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>length<span class="token punctuation">,</span> ciphertext<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ciphertext<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 使用AES算法解密数据</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">decryptData</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ciphertext<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> key<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nonce<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tag<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">GCMBlockCipher</span> cipher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GCMBlockCipher</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AESEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">KeyParameter</span> keyParameter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KeyParameter</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">AEADParameters</span> parameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AEADParameters</span><span class="token punctuation">(</span>keyParameter<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> nonce<span class="token punctuation">,</span> tag<span class="token punctuation">)</span><span class="token punctuation">;</span>        cipher<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>cipher<span class="token punctuation">.</span><span class="token function">getOutputSize</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> cipher<span class="token punctuation">.</span><span class="token function">processBytes</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ciphertext<span class="token punctuation">.</span>length<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cipher<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 生成RSA密钥对</span>        <span class="token class-name">KeyPair</span> keyPair <span class="token operator">=</span> <span class="token function">generateKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PublicKey</span> publicKey <span class="token operator">=</span> keyPair<span class="token punctuation">.</span><span class="token function">getPublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PrivateKey</span> privateKey <span class="token operator">=</span> keyPair<span class="token punctuation">.</span><span class="token function">getPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 加密数据</span>        <span class="token class-name">String</span> data <span class="token operator">=</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> key <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> key<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            key<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> encryptedKey <span class="token operator">=</span> <span class="token function">encryptKey</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> publicKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nonce <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nonce<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            nonce<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ciphertext <span class="token operator">=</span> <span class="token function">encryptData</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tag <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">,</span> ciphertext<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">16</span><span class="token punctuation">,</span> tag<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 输出加密后的数据</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Key: "</span> <span class="token operator">+</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Nonce: "</span> <span class="token operator">+</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>nonce<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Ciphertext: "</span> <span class="token operator">+</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Tag: "</span> <span class="token operator">+</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 解密数据</span>        key <span class="token operator">=</span> <span class="token function">decryptKey</span><span class="token punctuation">(</span>encryptedKey<span class="token punctuation">,</span> privateKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> plaintext <span class="token operator">=</span> <span class="token function">decryptData</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">,</span> key<span class="token punctuation">,</span> nonce<span class="token punctuation">,</span> tag<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>plaintext<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：Hello World!</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码使用了CryptoJS库和Bouncy Castle库实现了前后端数据加密。在这个示例中，前端使用AES算法对数据进行加密，然后使用RSA公钥加密AES密钥，将加密后的密钥和加密后的数据一起发送给后端。后端使用RSA私钥解密AES密钥，然后使用解密后的密钥对数据进行解密。同样，后端也可以使用AES算法对数据进行加密，然后使用RSA公钥加密AES密钥，将加密后的密钥和加密后的数据一起发送给前端。前端使用RSA私钥解密AES密钥，然后使用解密后的密钥对数据进行解密。</p><h2 id="demo2">demo2</h2><pre class="mermaid">sequenceDiagramactor a as 用户participant f as 前端服务器participant b as 后端服务器a ->> +f: 触发操作f ->> f: 生成随机AES密钥f ->> f: AES(data) => secretDataf ->> f: RSA_priKey(AES) => aesKeyf ->> +b: aesKey + secretDatab ->> b: RSA_pubKey(aesKey) => AESb ->> b: AES(secretData) => datab ->> b: 同等方式加密b -->> -f: 响应数据f -->> -a: 响应给用户</pre>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> safe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx-ssl</title>
      <link href="/2023/04/15/nginx-ssl/"/>
      <url>/2023/04/15/nginx-ssl/</url>
      
        <content type="html"><![CDATA[<h1>Nginx及SSL配置</h1><h2 id="Nginx安装">Nginx安装</h2><h3 id="编译流程">编译流程</h3><ol><li><p>cd到nginx源码包下(可能在此之前要先tar -zxvf xxx)</p></li><li><p>编译前配置</p><p><code>./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module</code></p></li><li><p>编译</p><p><code>make</code></p><p><code>make install</code></p></li></ol><h3 id="编译中会遇到的依赖缺失">编译中会遇到的依赖缺失</h3><p>gcc缺失</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 报错提示</span>checking <span class="token keyword">for</span> OS+ Linux <span class="token number">3.10</span>.0-693.el7.x86_64 x86_64checking <span class="token keyword">for</span> C compiler <span class="token punctuation">..</span>. not found./configure: error: C compiler cc is not found<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>yum install -y gcc</code></p><p>perl库缺失</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./configure: error: the HTTP rewrite module requires the PCRE library.You can either disable the module by using --without-http_rewrite_moduleoption, or <span class="token function">install</span> the PCRE library into the system, or build the PCRE librarystatically from the <span class="token builtin class-name">source</span> with nginx by using --with-pcre<span class="token operator">=</span><span class="token operator">&lt;</span>path<span class="token operator">></span> option.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>yum install -y pcre pcre-devel</code></p><p>zlib库缺失</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./configure: error: the HTTP <span class="token function">gzip</span> module requires the zlib library.You can either disable the module by using --without-http_gzip_moduleoption, or <span class="token function">install</span> the zlib library into the system, or build the zlib librarystatically from the <span class="token builtin class-name">source</span> with nginx by using --with-zlib<span class="token operator">=</span><span class="token operator">&lt;</span>path<span class="token operator">></span> option.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>yum install -y zlib zlib-devel</code></p><h3 id="启动Nginx">启动Nginx</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># cd到编译后的目录下</span>./nginx 启动./nginx <span class="token parameter variable">-s</span> stop 快速停止./nginx <span class="token parameter variable">-s</span> quit 优雅关闭，在退出前完成已经接受的连接请求./nginx <span class="token parameter variable">-s</span> reload 重新加载配置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注册至服务">注册至服务</h3><p>新建 <code>vi /usr/lib/systemd/system/nginx.service</code> 并添加如下配置</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">[Unit]<span class="token key attr-name">Description</span><span class="token punctuation">=</span><span class="token value attr-value">nginx - web server</span><span class="token key attr-name">After</span><span class="token punctuation">=</span><span class="token value attr-value">network.target remote-fs.target nss-lookup.target</span>[Service]<span class="token key attr-name">Type</span><span class="token punctuation">=</span><span class="token value attr-value">forking</span><span class="token key attr-name">PIDFile</span><span class="token punctuation">=</span><span class="token value attr-value">/usr/local/nginx/logs/nginx.pid</span><span class="token key attr-name">ExecStartPre</span><span class="token punctuation">=</span><span class="token value attr-value">/usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.conf</span><span class="token key attr-name">ExecStart</span><span class="token punctuation">=</span><span class="token value attr-value">/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</span><span class="token key attr-name">ExecReload</span><span class="token punctuation">=</span><span class="token value attr-value">/usr/local/nginx/sbin/nginx -s reload</span><span class="token key attr-name">ExecStop</span><span class="token punctuation">=</span><span class="token value attr-value">/usr/local/nginx/sbin/nginx -s stop</span><span class="token key attr-name">ExecQuit</span><span class="token punctuation">=</span><span class="token value attr-value">/usr/local/nginx/sbin/nginx -s quit</span><span class="token key attr-name">PrivateTmp</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>[Install]<span class="token key attr-name">WantedBy</span><span class="token punctuation">=</span><span class="token value attr-value">multi-user.target</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="服务启动命令">服务启动命令</h3><p>重新加载服务配置</p><p><code>systemctl daemon-reload</code></p><p>启动服务</p><p><code>systemctl start nginx.service</code></p><p>开机启动</p><p><code>systemctl enable nginx.service</code></p><blockquote><p>此时如果依然无法访问nginx检查防火墙配置</p></blockquote><p>相关命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl stop firewalld.servicesystemctl disable firewalld.service<span class="token comment"># 放行端口</span>firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">80</span>/tcp <span class="token parameter variable">--permanent</span><span class="token comment"># 重启防火墙</span>firewall-cmd <span class="token parameter variable">--reload</span><span class="token comment"># 指定端口和ip访问</span>firewall-cmd <span class="token parameter variable">--permanent</span> --add-rich-rule<span class="token operator">=</span><span class="token string">"rule family="</span>ipv4<span class="token string">" source address="</span><span class="token number">192.168</span>.123.100<span class="token string">" port protocol="</span>tcp<span class="token string">" port="</span><span class="token number">8080</span><span class="token string">" accept"</span><span class="token comment"># 移除规则</span>firewall-cmd <span class="token parameter variable">--permanent</span> --remove-rich-rule<span class="token operator">=</span><span class="token string">"rule family="</span>ipv4<span class="token string">" source address="</span><span class="token number">192.168</span>.123.100<span class="token string">" port port="</span><span class="token number">8080</span><span class="token string">" protocol="</span>tcp<span class="token string">" accept"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置SSL">配置SSL</h2><h3 id="SSL证书申请">SSL证书申请</h3><p><img src="../nginx-ssl/20230426232049.png" alt=""></p><blockquote><p>正常情况下会在解析中添加一条TXT记录, 如果没有则需手动添加</p></blockquote><h3 id="添加服务解析">添加服务解析</h3><p><img src="../nginx-ssl/20230426232440.png" alt=""></p><h3 id="证书下载">证书下载</h3><p>根据服务器类型下载, 此处使用Nginx, 后将将公私钥放到nginx的conf目录下</p><h3 id="Nginx配置">Nginx配置</h3><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># HTTPS server</span><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">443</span> ssl</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server_name</span>  localhost    ssl_certificate      9755530_xxxxxx.com.pem</span><span class="token punctuation">;</span>  <span class="token comment"># 配置公钥 公钥的开头是(BEGIN CERTIFICATE)</span>    <span class="token directive"><span class="token keyword">ssl_certificate_key</span>  9755530_xxxxxx.com.key</span><span class="token punctuation">;</span>  <span class="token comment"># 配置私钥 私钥的开头是(BEGIN RSA PRIVATE KEY)</span>    <span class="token directive"><span class="token keyword">ssl_session_cache</span>    shared:SSL:1m</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">ssl_session_timeout</span>  <span class="token number">5m</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">ssl_ciphers</span>  HIGH:!aNULL:!MD5</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">ssl_prefer_server_ciphers</span>  <span class="token boolean">on</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>        <span class="token directive"><span class="token keyword">root</span>   html</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">index</span>  index.html index.htm</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外nginx再添加重定向配置, 根据自己需要, 如果不用泛解析, 添加www和@ 这一步可以不要</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># 监听http</span><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span><span class="token directive"><span class="token keyword">listen</span>       <span class="token number">80</span></span><span class="token punctuation">;</span><span class="token comment">#域名、主机名 匹配站点: 完整匹配、通配符匹配、通配符结束匹配、正则匹配</span><span class="token directive"><span class="token keyword">server_name</span>  www.xxxxxx.cn xxxxxx.cn</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">return</span> <span class="token number">301</span> https://<span class="token variable">$server_name</span><span class="token variable">$request_uri</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更新nginx配置即可</p>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日常查询</title>
      <link href="/2023/04/14/daily/"/>
      <url>/2023/04/14/daily/</url>
      
        <content type="html"><![CDATA[<h2 id="Git">Git</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push <span class="token parameter variable">-u</span> origin dev-dee<span class="token function">git</span> branch <span class="token parameter variable">-D</span> 分支名  -- 强制删除分支<span class="token function">git</span> push origin <span class="token parameter variable">-d</span> 分支名  -- 强制删除远端分支<span class="token function">git</span> stash list  -- 查询暂存区<span class="token function">git</span> stash show <span class="token parameter variable">-p</span> 缓存id  -- 查询具体某个stash变更内容<span class="token function">git</span> stash push <span class="token parameter variable">-m</span> <span class="token string">'xxx'</span>  -- 暂存并取名<span class="token function">git</span> stash drop stash@<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span>  -- 删除某一个暂存<span class="token function">npm</span> i <span class="token parameter variable">-g</span> git-br<span class="token function">git</span> br<span class="token function">git</span> config branch.develop.description 分支备注<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>删除git中.idea文件</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-- <span class="token number">1</span>. 修改.gitignore文件-- <span class="token number">2</span>. 删除本地缓存区.idea文件<span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">--cached</span> <span class="token parameter variable">-r</span> .idea-- <span class="token number">3</span>. 推送<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">'delete .idea'</span><span class="token function">git</span> push origin dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DM">DM</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 已经执行超过2s的活动SQL</span><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> sess_id<span class="token punctuation">,</span>sql_text<span class="token punctuation">,</span>datediff<span class="token punctuation">(</span>ss<span class="token punctuation">,</span>last_recv_time<span class="token punctuation">,</span>sysdate<span class="token punctuation">)</span> Y_EXETIME<span class="token punctuation">,</span>SF_GET_SESSION_SQL<span class="token punctuation">(</span>SESS_ID<span class="token punctuation">)</span> fullsql<span class="token punctuation">,</span>clnt_ip<span class="token punctuation">,</span>clnt_type<span class="token punctuation">,</span>create_time<span class="token keyword">FROM</span> V$SESSIONS <span class="token keyword">WHERE</span> STATE<span class="token operator">=</span><span class="token string">'ACTIVE'</span><span class="token punctuation">)</span><span class="token keyword">where</span> Y_EXETIME<span class="token operator">>=</span><span class="token number">2</span> <span class="token keyword">order</span> <span class="token keyword">by</span> y_exetime <span class="token keyword">desc</span><span class="token punctuation">)</span><span class="token comment">-- 查询当前回滚剩余条数</span><span class="token keyword">select</span> sess_id<span class="token punctuation">,</span>ins_cnt<span class="token operator">+</span>del_cnt<span class="token operator">+</span>upd_cnt<span class="token operator">+</span>upd_ins_cnt<span class="token punctuation">,</span>systimestamp <span class="token keyword">from</span> v$trx <span class="token keyword">where</span> ROLLBACK_FLAG<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">-- 查询具体报锁超时的表对应的会话锁，查询第一列用于杀掉对应SESSION</span><span class="token keyword">select</span> <span class="token string">'sp_close_session('</span><span class="token operator">||</span>sess_id<span class="token operator">||</span><span class="token string">')'</span><span class="token punctuation">,</span><span class="token operator">*</span> <span class="token keyword">from</span> v$sessions <span class="token keyword">where</span> trx_id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> trx_id <span class="token keyword">from</span> v$<span class="token keyword">lock</span> a<span class="token punctuation">,</span>SYSOBJECTS b <span class="token keyword">where</span> a<span class="token punctuation">.</span>table_id <span class="token operator">=</span> b<span class="token punctuation">.</span>id <span class="token operator">and</span> b<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'表名'</span> <span class="token operator">and</span> b<span class="token punctuation">.</span>SUBTYPE$<span class="token operator">=</span><span class="token string">'UTAB'</span> <span class="token operator">and</span> trx_id<span class="token operator">&lt;></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">-- 杀死会话</span>sp_close_session<span class="token punctuation">(</span><span class="token number">140170753999128</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 统计当前阻塞的详情</span><span class="token keyword">select</span> clnt_ip<span class="token punctuation">,</span>clnt_type<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> v$sessions <span class="token keyword">where</span> run_status <span class="token operator">=</span> <span class="token string">'idle'</span> <span class="token keyword">group</span> <span class="token keyword">by</span> clnt_ip<span class="token punctuation">,</span> clnt_type <span class="token keyword">order</span> <span class="token keyword">by</span> clnt_ip<span class="token comment">-- 统计表空间大小</span><span class="token keyword">create</span> <span class="token keyword">table</span> table_count <span class="token punctuation">(</span>owner <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>table_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>used_space_MB <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">declare</span>    <span class="token keyword">begin</span>        <span class="token keyword">for</span> rec <span class="token operator">in</span>        <span class="token punctuation">(</span><span class="token keyword">select</span> owner<span class="token punctuation">,</span> table_name <span class="token keyword">from</span> all_tables <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token keyword">loop</span>            <span class="token keyword">insert</span> <span class="token keyword">into</span> table_count <span class="token keyword">select</span> rec<span class="token punctuation">.</span>owner<span class="token punctuation">,</span> rec<span class="token punctuation">.</span>table_name<span class="token punctuation">,</span>table_used_pages<span class="token punctuation">(</span>rec<span class="token punctuation">.</span>owner<span class="token punctuation">,</span> rec<span class="token punctuation">.</span>table_name<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>page<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1024</span> <span class="token keyword">from</span> dual<span class="token punctuation">;</span>            <span class="token keyword">end</span> <span class="token keyword">loop</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> table_count <span class="token keyword">order</span> <span class="token keyword">by</span> used_space_mb <span class="token keyword">desc</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="进程端口命令">进程端口命令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># linux</span><span class="token function">lsof</span> <span class="token parameter variable">-i:80</span>  <span class="token comment"># 根据端口查看PID及应用名</span><span class="token function">netstat</span> -ntulp<span class="token operator">|</span><span class="token function">grep</span> nginx  <span class="token comment"># 根据应用名查看端口</span><span class="token function">top</span> <span class="token parameter variable">-Hp</span> pid  <span class="token comment"># 查看某个进程下所有子线程</span><span class="token comment">#win</span>tasklist <span class="token operator">|</span> findstr xxx  <span class="token comment"># 查看进程 ps -ef</span>taskkill /T /F /PID <span class="token number">12345</span>  <span class="token comment"># 杀死进程 kill -9</span><span class="token function">netstat</span> -ano<span class="token operator">|</span>findstr <span class="token number">80</span>  <span class="token comment"># 端口查看</span><span class="token comment"># linux查找文件</span><span class="token function">find</span> / <span class="token parameter variable">-iname</span> *abc*  <span class="token comment"># 全局搜索</span><span class="token function">find</span> / <span class="token parameter variable">-type</span> d <span class="token parameter variable">-iname</span> *abc* <span class="token comment"># 搜索文件夹</span><span class="token function">find</span> / <span class="token parameter variable">-size</span> +100M<span class="token function">find</span> / <span class="token parameter variable">-maxdepth</span> <span class="token number">1</span> <span class="token parameter variable">-iname</span> abc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="其他linux常用命令">其他linux常用命令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">journalctl <span class="token parameter variable">-u</span> <span class="token string">'服务名'</span> <span class="token parameter variable">-f</span> <span class="token parameter variable">-n</span> 行数<span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> 解压  <span class="token function">gzip</span> extract verbose <span class="token function">file</span><span class="token function">tar</span> <span class="token parameter variable">-zcvf</span> 压缩  <span class="token function">gzip</span> create <span class="token punctuation">..</span>.yum search <span class="token function">ifconfig</span>yum <span class="token function">install</span> net-toolsyum info net-toolsyum list jdk   查看安装过的包<span class="token function">cp</span> /dev/null nohup.out  <span class="token comment"># 不重启服务清空nohup文件</span><span class="token function">chmod</span> <span class="token number">766</span> <span class="token operator">&lt;</span>name<span class="token operator">></span> <span class="token comment"># user,group,other r=4,w=2,x=1</span><span class="token function">chown</span> <span class="token operator">&lt;</span>user<span class="token operator">></span>:<span class="token operator">&lt;</span>group<span class="token operator">></span> <span class="token operator">&lt;</span>name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="日期">日期</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 格式化日期</span><span class="token class-name">String</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> now <span class="token operator">=</span> <span class="token class-name">DateFormatUtils</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// lang3包下的工具类</span><span class="token class-name">String</span> now <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> now <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 解析日期</span><span class="token class-name">Date</span> parse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2023-12-12 12:12:12"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 要处理异常 Tue Dec 12 12:12:12 CST 2023</span><span class="token class-name">LocalDateTime</span> parse <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2023-12-12 12:12:12"</span><span class="token punctuation">,</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 2023-12-12T12:12:12</span><span class="token comment">// 相互转换</span><span class="token comment">// 1.Date => LocalDateTime</span><span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LocalDateTime</span> localDateTime <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">atZone</span><span class="token punctuation">(</span><span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocalDateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2.LocalDateTime => Date (不常用, 因此多写点备注)</span><span class="token class-name">LocalDateTime</span> localDateTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>localDateTime                      <span class="token comment">// 时区的日期和时间(系统默认时区)</span>                      <span class="token punctuation">.</span><span class="token function">atZone</span><span class="token punctuation">(</span><span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                      <span class="token comment">// 转为即使时间</span>                      <span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Linux </tag>
            
            <tag> Git </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mermaid-note</title>
      <link href="/2023/04/10/mermaid-note/"/>
      <url>/2023/04/10/mermaid-note/</url>
      
        <content type="html"><![CDATA[<h1>mermaid入门(基于hexo)</h1><h2 id="〇、基于Hexo-matery搭建mermaid插件">〇、基于Hexo-matery搭建mermaid插件</h2><p>参考metary配置文件</p><pre class="line-numbers language-none"><code class="language-none"># 图表绘制插件# 建议更换更换hexo-renderer-markdown-it引擎。参考下面链接# https:&#x2F;&#x2F;github.com&#x2F;hexojs&#x2F;hexo-renderer-markdown-it# https:&#x2F;&#x2F;github.com&#x2F;hexojs&#x2F;hexo-renderer-markdown-it&#x2F;wiki&#x2F;Advanced-Configuration# 使用教程： https:&#x2F;&#x2F;blog.17lai.site&#x2F;posts&#x2F;cf0f47fd&#x2F;#Mermaid# 安装配置方法# npm un hexo-renderer-marked --save# npm i hexo-renderer-markdown-it --save# npm install --save hexo-tag-mermaid# 注意：hexo-renderer-markdown-it 比默认引擎更快，可选择插件较多，请认真看上面两个链接教程。# mermaid语法教程 https:&#x2F;&#x2F;mermaid-js.github.io&#x2F;mermaid&#x2F;#&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于主题中的使用方式需要在代码中添加 <code>&#123;% mermaid %&#125; &#123;% endmermaid %&#125;</code>, 在 Typora 中编写不能即使显示, 因此采用其他方式对其进行优化</p><p>参考 <a href="https://cloud.tencent.com/developer/article/1688180">Markdown的时序图、流程图、和甘特图+Hexo的相关配置</a> 以及 <a href="https://github.com/webappdevelp/hexo-filter-mermaid-diagrams">GitHub - webappdevelp/hexo-filter-mermaid-diagrams</a></p><p><strong>安装插件</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> un hexo-renderer-marked <span class="token parameter variable">--save</span><span class="token function">npm</span> i hexo-renderer-markdown-it <span class="token parameter variable">--save</span><span class="token comment"># 安装插件</span><span class="token function">npm</span> i hexo-tag-mermaid <span class="token parameter variable">--save</span> <span class="token function">npm</span> i hexo-filter-mermaid-diagrams <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>配置插件</strong></p><p>首先配置 Hexo 的 <code>_config.yml</code></p><p>需要在配置文件的文末添加</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># mermaid chart</span><span class="token key atrule">mermaid</span><span class="token punctuation">:</span> <span class="token comment">## mermaid url https://github.com/knsv/mermaid</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment"># default true</span>  <span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"7.1.2"</span>  <span class="token comment"># default v7.1.2</span>  <span class="token key atrule">options</span><span class="token punctuation">:</span>    <span class="token comment"># find more api options from https://github.com/knsv/mermaid/blob/master/src/mermaidAPI.js</span>  <span class="token comment">#startOnload: true  // default true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>渲染文件</strong></p><p>由于 metary 内包含 mermaid 配置文件, 因此找到 <code>hexo-theme-matery/layout/layout.ejs</code></p><p>搜索 <code>theme.mermaid.enable</code></p><p>将配置代码更改至 Github/hexo-filter-mermaid-diagrams 中配置</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>mermaid<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>https://unpkg.com/mermaid@<span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> theme<span class="token punctuation">.</span>mermaid<span class="token punctuation">.</span>version </span><span class="token delimiter punctuation">%></span></span>/dist/mermaid.min.js<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>mermaid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        mermaid<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">theme</span><span class="token operator">:</span> <span class="token string">'forest'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>配置文件</strong></p><p>激活 mermaid 配置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">mermaid</span><span class="token punctuation">:</span> <span class="token comment">## mermaid url https://github.com/knsv/mermaid</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># default false</span>  <span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"latest"</span> <span class="token comment"># default v7.1.2</span>  <span class="token key atrule">options</span><span class="token punctuation">:</span>  <span class="token comment"># find more api options from https://github.com/knsv/mermaid/blob/master/src/mermaidAPI.js</span>    <span class="token comment">#startOnload: true  // default true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="一、流程图-graph">一、流程图(graph)</h2><pre class="mermaid">graph TDA --> BA --> Cstyle B fill:#f9f,stroke:#333,stroke-width:4pxstyle C fill:#ccf,stroke:#f66,stroke-width:2px,stroke-dasharray: 5, 5</pre><pre class="line-numbers language-null" data-language="null"><code class="language-null">graph TD    A --&gt; B    A --&gt; C    style B fill:#f9f,stroke:#333,stroke-width:4px %% 样式    style C fill:#ccf,stroke:#f66,stroke-width:2px,stroke-dasharray: 5, 5 %% 样式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方向">方向</h3><ul><li>TB/TD - top bottom/down</li><li>BT - bottom/top</li><li>LR - left right</li><li>RL - right left</li></ul><h3 id="节点">节点</h3><pre class="mermaid">graph LR;B[直角]C(圆角)D((圆形))E>不对称]F{菱形}G([椭圆形])H[(圆柱)]I[[双杠]]K[\平行1\]L[/平行2/]M[\梯形1/]N[/梯形2\]B --> C --> D --> EF --> G --> H --> IK --> L --> M --> N</pre><pre class="line-numbers language-null" data-language="null"><code class="language-null">graph LR;直角[] ---&gt; 圆角(()) ---&gt; 圆形D(()) ---&gt; 不对称&gt;]菱形&#123;&#125; ---&gt; 椭圆形([]) ---&gt; 圆柱[()] ---&gt; 双杠[[]] ---&gt; 六边形&#123;&#123;&#125;&#125;平行1[\\] ---&gt; 平行2[&#x2F;&#x2F;] ---&gt; 梯形1[\&#x2F;] ---&gt; 梯形2[&#x2F;\]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="连线">连线</h3><ul><li>实线</li></ul><pre class="mermaid">graph LRA --> B --- C -- 文字 --- D -- 文字 --> E</pre><pre class="line-numbers language-null" data-language="null"><code class="language-null">%% A(有箭头,无文字) -&gt; B(无箭头，无文字) -&gt; C(有箭头，文字) -&gt; D(有箭头,文字)graph LRA --&gt; B --- C -- 文字 --- D -- 文字 --&gt; E<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>虚线</li></ul><pre class="mermaid">graph LR;A -.-> B -.文字.-> C</pre><pre class="line-numbers language-null" data-language="null"><code class="language-null">%% A(有箭头,无文字) -&gt; B(有箭头，无有文字) graph LRA -.-&gt; B -.文字.-&gt; C<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>大箭头</li></ul><pre class="mermaid">graph LRA ==> B == 文字 ==> C</pre><pre class="line-numbers language-null" data-language="null"><code class="language-null">%% A(大箭头,无文字) -&gt; B(大箭头,有文字)graph LRA &#x3D;&#x3D;&gt; B &#x3D;&#x3D; 文字 &#x3D;&#x3D;&gt; C<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="子图">子图</h3><pre class="mermaid">graph TB    subgraph one    a1-->a2    end    subgraph two    b1-->b2    end    subgraph three    c1-->c2    end    c1-->a2</pre><pre class="line-numbers language-null" data-language="null"><code class="language-null">graph TB    subgraph one    a1--&gt;a2    end    subgraph two    b1--&gt;b2    end    subgraph three    c1--&gt;c2    end    c1--&gt;a2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、时序图-sequenceDiagram">二、时序图(sequenceDiagram)</h2><h3 id="参与者-participant">参与者(participant)</h3><pre class="mermaid">sequenceDiagramdee ->> xian: I'm hungryxian -->> dee: Me too</pre><pre class="line-numbers language-null" data-language="null"><code class="language-null">sequenceDiagramdee -&gt;&gt; xian: I&#39;m hungryxian --&gt;&gt; dee: Me too<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>注: 如果希望自定义参与者顺序, 使用<code>participant</code>关键字</p></blockquote><pre class="mermaid">sequenceDiagramparticipant xianparticipant deedee ->> xian: I'm hungryxian -->> dee: Me too</pre><pre class="line-numbers language-null" data-language="null"><code class="language-null">sequenceDiagramparticipant xianparticipant deedee -&gt;&gt; xian: I&#39;m hungryxian --&gt;&gt; dee: Me too<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="别名-as">别名(as)</h3><pre class="mermaid">sequenceDiagramparticipant A as xianparticipant D as deeA ->> D: How are youD -->> A: Fine</pre><pre class="line-numbers language-null" data-language="null"><code class="language-null">sequenceDiagramparticipant A as xianparticipant D as deeA --&gt; D: How are youD --&gt;&gt; A: Fine<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="连线-2">连线</h3><pre class="mermaid">sequenceDiagramA -> B: 无箭头实线A --> B: 无箭头虚线A ->> B: 有箭头实线A -->> B: 有箭头虚线A -X B: 有箭头x实线A --X B: 有箭头x虚线</pre><pre class="line-numbers language-null" data-language="null"><code class="language-null">sequenceDiagramA -&gt; B: 无箭头实线A --&gt; B: 无箭头虚线A -&gt;&gt; B: 有箭头实线A --&gt;&gt; B: 有箭头虚线A -X B: 有箭头x实线A --X B: 有箭头x虚线<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="控制焦点-±">控制焦点(±)</h3><pre class="mermaid">sequenceDiagramdee ->>+ xian: Let's Fighting!%% +表示激活角色xian -->>- dee: Grate!</pre><pre class="line-numbers language-null" data-language="null"><code class="language-null">sequenceDiagramdee -&gt;&gt;+ xian: Let&#39;s Fighting!%% +表示激活角色xian --&gt;&gt;- dee: Grate!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>焦点嵌套</strong></p><pre class="mermaid">sequenceDiagramxian ->>+ dee: Let's Shopping!    xian ->>+ dee: Can you hear me?    dee -->>- xian: I can hear you.    dee -->>- xian: But I'm tired.</pre><pre class="line-numbers language-null" data-language="null"><code class="language-null">sequenceDiagramxian -&gt;&gt;+ dee: Let&#39;s Shopping!    xian -&gt;&gt;+ dee: Can you hear me?    dee --&gt;&gt;- xian: I can hear you.    dee --&gt;&gt;- xian: But I&#39;m tired.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="备注-Note">备注(Note)</h3><p>Note [ right of | left of | over ] [Actor]</p><pre class="mermaid">sequenceDiagramparticipant ANote right of A: I'm note</pre><pre class="line-numbers language-null" data-language="null"><code class="language-null">sequenceDiagramparticipant ANote right of A: I&#39;m note<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>over用法</p><pre class="mermaid">sequenceDiagramparticipant A as deeparticipant B as xianA ->> B: Let 's shoppingNote over B: I don't want toNote over A,B: Just 20 min</pre><pre class="line-numbers language-null" data-language="null"><code class="language-null">sequenceDiagramparticipant A as deeparticipant B as xianA -&gt;&gt; B: Let &#39;s shoppingNote over B: I don&#39;t want toNote over A,B: Just 20 min<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="循环-loop">循环(loop)</h3><pre class="mermaid">sequenceDiagramxian ->> dee: let's shopping%% loop 后loop 20 mindee --> xian: let me see seeenddee -->> xian: ok</pre><pre class="line-numbers language-null" data-language="null"><code class="language-null">sequenceDiagramxian -&gt;&gt; dee: let&#39;s shopping%% loop 后loop 20 mindee --&gt; xian: let me see seeenddee --&gt;&gt; xian: ok<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="选择">选择</h3><pre class="mermaid">sequenceDiagramdee ->> xian: What do you want to drinkalt summerxian -->> dee: ice creamelse winterxian -->> dee: teaendopt all the timexian -->> dee: milk tea is okend</pre><pre class="line-numbers language-null" data-language="null"><code class="language-null">sequenceDiagramdee -&gt;&gt; xian: What do you want to drinkalt summerxian --&gt;&gt; dee: ice creamelse winterxian --&gt;&gt; dee: teaendopt all the timexian --&gt;&gt; dee: milk tea is okend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="色块">色块</h3><pre class="mermaid">sequenceDiagramactor a as clientparticipant b as serverrect rgb(213, 235, 225)        a ->> +b: quest        b -->> -a: responseendrect rgb(192, 214, 149)a ->> +b: questb ->> -a: responseend</pre><pre class="line-numbers language-null" data-language="null"><code class="language-null">sequenceDiagramactor a as clientparticipant b as serverrect rgb(213, 235, 225)        a -&gt;&gt; +b: quest        b --&gt;&gt; -a: responseendrect rgb(192, 214, 149)a -&gt;&gt; +b: questb -&gt;&gt; -a: responseend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、类图-classDiagram">三、类图(classDiagram)</h2><pre class="mermaid">classDiagramclass Person {+String name // public-int age // private+save() void+eat(food) void+breathe(air) void}class Student~Primary~ {-String studentNo+doHomework(pen) Homework}class Tool {+String function+use() void}class Pen {+use() void}class Air {+String O2}class Eye {+String eyes}class Grade {+Student students}Air <.. Person: 依赖(一个需要另一个的协助)Person <|-- Student: 继承Tool <|.. Pen: 实现Pen <.. Student: 依赖Person *-- Eye: 组合(整体与部分的关系, 部分不能离开整体单独存在)Grade o-- Student: 聚合(整体与部分的关系, 部分可以离开整体单独存在)</pre><pre class="line-numbers language-null" data-language="null"><code class="language-null">classDiagramclass Person &#123;+String name &#x2F;&#x2F; public-int age &#x2F;&#x2F; private+save() void+eat(food) void+breathe(air) void&#125;class Student~Primary~ &#123;-String studentNo+doHomework(pen) Homework&#125;class Tool &#123;+String function+use() void&#125;class Pen &#123;+use() void&#125;class Air &#123;+String O2&#125;class Eye &#123;+String eyes&#125;class Grade &#123;+Student students&#125;Air &lt;.. Person: 依赖(一个需要另一个的协助)Person &lt;|-- Student: 继承Tool &lt;|.. Pen: 实现Pen &lt;.. Student: 依赖Person *-- Eye: 组合(整体与部分的关系, 部分不能离开整体单独存在)Grade o-- Student: 聚合(整体与部分的关系, 部分可以离开整体单独存在)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mermaid </tag>
            
            <tag> Hexo </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>th-login</title>
      <link href="/2023/04/10/th-login/"/>
      <url>/2023/04/10/th-login/</url>
      
        <content type="html"><![CDATA[<h1>第三方登录:</h1><p><em><code>vue-java</code>前后端交互流程<code>demo</code> (本篇以<code>gitee</code> 为例)</em></p><h2 id="时序图">时序图</h2><pre class="mermaid">sequenceDiagramactor c as 客户端participant f as 前端服务器participant b as 后端服务器participant g as giteerect rgb(213, 235, 225)        f ->> +g: 打开新窗口, 请求https://gitee.com/oauth/authorize        note over f, g: 携带client_id以及redirect_url (此处是不安全的)        g ->> g: 校验client_id        g ->> -b: 重定向至后端服务器        note over g,b: 携带code (此处是不安全的)    end    rect rgb(192, 214, 149)        b ->> +g: 请求https://gitee.com/oauth/token        note over b, g: 携带grant_type,client_id,client_secret,code,redirect_uri        g -->> -b: 返回access_token    end        rect rgb(240, 194, 162)        b ->> +g: 请求https://gitee.com/api/v5/user        note over b, g: 携带access_token        g -->> -b: 返回用户信息    end    rect rgb(235, 238, 232)        b ->> f: 生成token, 并将token信息发送给老窗口, 然后关闭新窗口        f ->> f: 监听到token        f ->> c: 将token写入到客户端浏览器end</pre><h2 id="gitee">gitee</h2><p><img src="../th-login/20230413000620.png" alt=""></p><h2 id="代码示例">代码示例</h2><ol><li>前端打开新窗口, 并请求 <code>gitee</code></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">giteeHandleClick</span><span class="token punctuation">(</span><span class="token parameter">thirdpart</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> client_id <span class="token operator">=</span> <span class="token string">'client_idxxxxx'</span> <span class="token comment">// giteeid</span>    <span class="token keyword">const</span> redirect_uri <span class="token operator">=</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span><span class="token string">'http://uri/tp/gitee_cb'</span><span class="token punctuation">)</span> <span class="token comment">// gitee跳转地址</span>    <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://gitee.com/oauth/authorize?client_id=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>client_id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;redirect_uri=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>redirect_uri<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;response_type=code</span><span class="token template-punctuation string">`</span></span>    window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> thirdpart<span class="token punctuation">,</span> <span class="token number">540</span><span class="token punctuation">,</span> <span class="token number">540</span><span class="token punctuation">)</span> <span class="token comment">// url,用户信息</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>后端接收<code>gitee</code> 所传<code>code</code> -&gt; 获取<code>access_token</code> -&gt; 获取用户信息 -&gt; 生成用户<code>token</code> 并返回给前端</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">gitee</span><span class="token punctuation">(</span><span class="token class-name">String</span> code<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//获取访问令牌</span>    <span class="token class-name">String</span> accessToken <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAccessToken</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取用户信息</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> body <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getUserInfo</span><span class="token punctuation">(</span>accessToken<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Object</span> username <span class="token operator">=</span> body<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Object</span> avatar <span class="token operator">=</span> body<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"avatar_url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//用户信息存储本地, 生成JWT令牌给前端</span>    <span class="token class-name">String</span> token <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">loginFromOAuth</span><span class="token punctuation">(</span>username<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> avatar<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//让页面去发送信息给前端调用者</span>    <span class="token class-name">String</span> script <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"&lt;script>\n"</span> <span class="token operator">+</span>                                  <span class="token string">"window.opener.postMessage('%s','%s')\n"</span> <span class="token operator">+</span>                                  <span class="token string">"window.close()\n"</span> <span class="token operator">+</span>                                  <span class="token string">"&lt;/script>"</span><span class="token punctuation">,</span>                                  <span class="token comment">//给调用者发送信息,(详细内容,来源)指明消息来源, 否则会跨域</span>                                  <span class="token comment">//window.opener.postMessage(message,origin)</span>                                  <span class="token comment">//window.close() 关闭小窗口</span>                                  token<span class="token punctuation">,</span>                                  frontendURL<span class="token punctuation">)</span><span class="token punctuation">;</span>    resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getAccessToken</span><span class="token punctuation">(</span><span class="token class-name">String</span> code<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span><span class="token class-name">MapBuilder</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                    <span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"grant_type"</span><span class="token punctuation">,</span> <span class="token string">"authorization_code"</span><span class="token punctuation">)</span>                                    <span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"client_id"</span><span class="token punctuation">,</span> clientId<span class="token punctuation">)</span>                                    <span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"client_secret"</span><span class="token punctuation">,</span> clientSecret<span class="token punctuation">)</span>                                    <span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">,</span> code<span class="token punctuation">)</span>                                    <span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"redirect_uri"</span><span class="token punctuation">,</span> redirectURI<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                                       <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HttpHeaders</span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    headers<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> httpEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> response <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">postForEntity</span><span class="token punctuation">(</span><span class="token string">"https://gitee.com/oauth/token"</span><span class="token punctuation">,</span> httpEntity<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Map</span> body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> body<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span><span class="token string">"access_token"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token class-name">String</span> accessToken<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> response <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForEntity</span><span class="token punctuation">(</span><span class="token constant">URI</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"https://gitee.com/api/v5/user?access_token="</span> <span class="token operator">+</span> accessToken<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Map</span> body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> body<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>前端监听到token信息, 写入用户Cookie</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token parameter">msg</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 可以对消息来源做判断</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>origin<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'8080'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">setToken</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">'/'</span> <span class="token comment">// 浏览器跳转</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue_axios</title>
      <link href="/2023/04/09/vue-axios/"/>
      <url>/2023/04/09/vue-axios/</url>
      
        <content type="html"><![CDATA[<h1>Axios请求示例</h1><p>本篇基于vue2, 简单自定义拦截器, 并发送post请求至后端服务器</p><h2 id="1-安装">1. 安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> axios <span class="token parameter variable">-S</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-拦截器配置示例">2. 拦截器配置示例</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token comment">// 创建axios</span><span class="token keyword">const</span> _axios <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">baseURL</span><span class="token operator">:</span> <span class="token string">"http://localhost:23323"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>_axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>    <span class="token parameter">config</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 设置token请求头</span>        config<span class="token punctuation">.</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">Authorization</span><span class="token operator">:</span> <span class="token string">'222.333.zzZ'</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> config    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>_axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>    <span class="token parameter">rep</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 2xx范围走这里</span>        <span class="token keyword">return</span> rep    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token parameter">error</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>response <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 超出2xx走这里, 示例列举</span>        <span class="token keyword">let</span> status <span class="token operator">=</span> error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status        <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">===</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'请求参数错误'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">===</span> <span class="token number">404</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'资源不存在'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">===</span> <span class="token number">405</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'请求方式错误'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">405</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> _axios<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-axios使用-POST示例">3. axios使用(POST示例)</h2><h3 id="3-1-URL拼接参数">3.1 URL拼接参数</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token function">sendPostWithUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 此处注意,需要进行编码</span>  <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span><span class="token string">'dee+'</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">18</span>  <span class="token keyword">const</span> resp <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/uri?name=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&amp;age=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>age<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Request URL</strong>: <a href="http://ip">http://ip</a>:port/uri?name=dee%2B&amp;age=18 (会自动进行unicode编码)</p><p><strong>Response Headers</strong>: 中无 <code>Content-Type</code></p><h3 id="3-2-将参数对象放入config">3.2 将参数对象放入config</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token function">sendPostWithConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> resp <span class="token operator">=</span> <span class="token keyword">await</span> _axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/uri</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'dee+'</span><span class="token punctuation">,</span>      <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Request URL</strong>: <a href="http://ip">http://ip</a>:port/uri?name=dee%2B&amp;age=20 (会自动进行unicode编码)</p><p><strong>Response Headers :</strong></p><p><strong>Content-Type</strong>: application/x-www-form-urlencoded</p><h3 id="3-3-先urlencode编码-再通过data参数发送请求">3.3 先urlencode编码, 再通过data参数发送请求</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token function">sendPostWithUrlEncoded</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  stu<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'dee+'</span><span class="token punctuation">)</span>  stu<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> resp <span class="token operator">=</span> <span class="token keyword">await</span> _axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/uri</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> stu<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Request URL</strong>: <a href="http://ip">http://ip</a>:port/uri</p><p><strong>Response Headers :</strong></p><p><strong>Content-Type</strong>: application/x-www-form-urlencoded;charset=UTF-8</p><h3 id="3-4-form-data格式请求">3.4 form-data格式请求</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token function">sendPostWithFormdata</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  stu<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">'dee+'</span><span class="token punctuation">)</span>  stu<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> resp <span class="token operator">=</span> <span class="token keyword">await</span> _axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/uri</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> stu<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Request URL</code>: <a href="http://ip">http://ip</a>:port/uri</p><p><strong>Response Headers :</strong></p><p><strong>Content-Type</strong>: multipart/form-data; boundary=----WebKitFormBoundaryvOzpiDlfBzqdp23l</p><h3 id="3-5-json格式请求">3.5 json格式请求</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token function">sendWithJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> stu <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'dee+'</span><span class="token punctuation">,</span>    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">const</span> resp <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/uri</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> stu<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Request URL</strong>: <a href="http://ip">http://ip</a>:port/uri</p><p><strong>Response Headers :</strong></p><p><strong>Content-Type</strong>: application/json</p>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Start</title>
      <link href="/2023/04/08/hexo-start/"/>
      <url>/2023/04/08/hexo-start/</url>
      
        <content type="html"><![CDATA[<h2 id="开始">开始</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> hexo-cli  <span class="token comment"># 安装hexo</span>hexo init myBlog  <span class="token comment"># 初始化服务 如果报错在 隐私和安全->开发者选项->Powershell打开策略</span><span class="token comment"># 进入服务文件夹</span>hexo s  <span class="token comment"># 启动预览服务(hexo server)</span>hexo n <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>title<span class="token operator">></span>  <span class="token comment"># layout(布局) title(标题)</span>hexo g  <span class="token comment"># 生成网页(hexo generate)</span>hexo server <span class="token parameter variable">-p</span> <span class="token number">5000</span>  <span class="token comment"># 指定端口</span>hexo new page <span class="token string">"pagename"</span>  <span class="token comment"># 新建文件夹</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置">配置</h2><h3 id="主题下载">主题下载</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="主配置文件">主配置文件</h3><p><code>_config.yml</code></p><ul><li><p>主题修改</p></li><li><p><code>url</code> 修改( 如：<a href="http://xxx.github.io">http://xxx.github.io</a>)</p></li><li><p><code>per_page</code> 修改为6的倍数</p></li><li><p><code>language</code> 设置中文</p></li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">theme</span><span class="token punctuation">:</span> hexo<span class="token punctuation">-</span>theme<span class="token punctuation">-</span>matery<span class="token key atrule">url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//example.com<span class="token key atrule">index_generator</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token key atrule">per_page</span><span class="token punctuation">:</span> <span class="token number">12</span>  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date<span class="token key atrule">language</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>CN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="高亮代码">高亮代码</h3><p>根目录<code>_config.yml</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">syntax_highlighter</span><span class="token punctuation">:</span> prismjs  <span class="token comment"># hexo7.0之后配置调整</span><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token key atrule">wrap</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">hljs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prismjs</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码样式下载<a href="https://prismjs.com/download.html">prismjs下载页面</a></p><p>然后将css文件取名为<code>prism.min.css</code>, 替换<code>themes/hexo-theme-matery/source/libs/prism/prism.min.css</code> 文件</p><p><code>代码语言</code> 标签隐藏, 在<code>prism.min.css</code>文件新增配置</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*隐藏代码语言*/</span><span class="token selector">.code_lang</span> <span class="token punctuation">&#123;</span>    <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="导航栏文件夹配置">导航栏文件夹配置</h3><h4 id="新建-categories-页">新建 categories 页</h4><p><code>categories</code>页是用来展示所有分类的页面, 新建命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑页面文件<code>/source/categories/index.md</code></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span><span class="token front-matter yaml language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> categories<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"categories"</span></span><span class="token punctuation">---</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="新建标签-tags-页">新建标签 tags 页</h4><p><code>tags</code> 页是用来展示所有标签的页面, 新建命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑页面文件 <code>/source/tags/index.md</code></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span><span class="token front-matter yaml language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> tags<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 18:23:38</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"tags"</span></span><span class="token punctuation">---</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="新建关于我-about-页">新建关于我 about 页</h4><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"about"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑页面文件 <code>/source/about/index.md</code></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span><span class="token front-matter yaml language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> about<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"about"</span></span><span class="token punctuation">---</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="新建-404-页">新建 404 页</h4><p>新建命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token number">404</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑页面文件 <code>/source/404/index.md</code></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span><span class="token front-matter yaml language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token number">404</span><span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"404"</span><span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">"Oops～，我崩溃了！找不到你想要的页面 :("</span></span><span class="token punctuation">---</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="搜索">搜索</h3><p>安装插件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>根目录下的 <code>_config.yml</code> 文件新增配置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="中文链接转拼音-建议安装">中文链接转拼音(建议安装)</h3><p>如果文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i hexo-permalink-pinyin <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>根目录下的 <code>_config.yml</code> 文件新增配置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">permalink_pinyin</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token comment"># default: '-'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p></blockquote><h3 id="文章字数统计插件（建议安装）">文章字数统计插件（建议安装）</h3><p>如果想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i <span class="token parameter variable">--save</span> hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">postInfo</span><span class="token punctuation">:</span>  <span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">update</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">wordCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 设置文章字数统计为 true.</span>  <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 设置站点文章总字数统计为 true.</span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 阅读时长.</span>  <span class="token key atrule">readCount</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 阅读次数.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改页脚">修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h3 id="添加中文繁简转换">添加中文繁简转换</h3><p>在主题的 <code>_config.yml</code> 文件中，开启 translate 为 enable。</p><blockquote><p>开启中文繁简转换如下修改。默认不开启。 实例演示： <a href="https://blog.17lai.site/">繁简转换</a> 底下 footer 栏</p></blockquote><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">translate</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="修改社交链接">修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>socialLink<span class="token punctuation">.</span>github<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> theme<span class="token punctuation">.</span>socialLink<span class="token punctuation">.</span>github </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tooltipped<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">data-tooltip</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>访问我的GitHub<span class="token punctuation">"</span></span> <span class="token attr-name">data-position</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span> <span class="token attr-name">data-delay</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fab fa-github<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href="https://fontawesome.com/icons">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: <code>fab fa-facebook</code></li><li>Twitter: <code>fab fa-twitter</code></li><li>Google-plus: <code>fab fa-google-plus</code></li><li>Linkedin: <code>fab fa-linkedin</code></li><li>Tumblr: <code>fab fa-tumblr</code></li><li>Medium: <code>fab fa-medium</code></li><li>Slack: <code>fab fa-slack</code></li><li>Sina Weibo: <code>fab fa-weibo</code></li><li>Wechat: <code>fab fa-weixin</code></li><li>QQ: <code>fab fa-qq</code></li><li>Zhihu: <code>fab fa-zhihu</code></li></ul><h3 id="本地图片链接配置">本地图片链接配置</h3><p>此处以<code>Typora</code>搭配使用</p><p><code>Typora</code>图像设置</p><p><img src="../hexo-start/image-20230817224426509.png" alt=""></p><p><code>hexo</code>插件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm i hexo<span class="token operator">-</span>renderer<span class="token operator">-</span>marked<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>_config</code>添加配置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">marked</span><span class="token punctuation">:</span>  <span class="token key atrule">prependRoot</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">postAsset</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>文章标签添加, 使用Typora引用方式</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">typora-root-url: &#123;&#123; title &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="部署">部署</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo d  <span class="token comment"># 一键部署(hexo deploy)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>部署前, <code>_config.yml</code>配置参数</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/xxx/xxx.git  <span class="token comment"># github仓库发布地址</span>  <span class="token key atrule">branch</span><span class="token punctuation">:</span> gh<span class="token punctuation">-</span>pages  <span class="token comment"># 发布分支</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="GitHub-Pages">GitHub Pages</h3><ol><li><p>关联仓库与源码</p></li><li><p>将<code>publish/</code> 加入<code>.ignore</code></p></li><li><p><code>node --version</code> 查看node版本</p></li><li><p>创建文件 <code>.github/workflows/pages.yml</code></p></li><li><p>GitHub - Pages设置</p><p><img src="../hexo-start/image-20230411230502386.png" alt=""></p></li></ol><h3 id="Vercel-加速">Vercel 加速</h3><ol><li><p>绑定GitHub项目</p></li><li><p>Domain设置</p><p><img src="../hexo-start/image-20230411231718823.png" alt=""></p></li><li><p>阿里云添加域名解析</p><p><img src="../hexo-start/image-20230411232320594.png" alt=""></p></li></ol><p>参考自:</p><blockquote><p><a href="https://blog.17lai.site/posts/5311b619/#vercel-%E9%83%A8%E7%BD%B2">基于Hexo的matery主题搭建博客增强部署篇4 | 夜法之书 (17lai.site)</a></p></blockquote><h3 id="图床设置">图床设置</h3><p><strong>七牛云+阿里云+Typora</strong></p><ol><li><p>七牛云对象存储 - 新建空间 - 域名配置</p><p><img src="../hexo-start/image-20230411233037391.png" alt=""></p></li><li><p>阿里云添加域名解析<br><img src="../hexo-start/image-20230411233857926.png" alt=""></p></li><li><p>picgo的下载与配置</p><p><a href="https://picgo.github.io/PicGo-Doc/zh/">PicGo 下载链接</a></p><p><img src="../hexo-start/image-20230411234958488.png" alt=""></p><p><a href="https://developer.qiniu.com/kodo/1671/region-endpoint-fq">存储区域_文档地址</a></p><p><img src="../hexo-start/image-20230412001114983.png" alt=""></p></li><li><p>Typora图片设置</p><p><img src="../hexo-start/1220230412005659.png" alt=""></p><p>此时点击验证图片上传选项测试是否可以配置成功. 但是由于默认情况下PicGo会将图片都放在一个目录下, 因此需要安装前缀插件</p><p>在插件设置中搜索<code>super-prefix</code> 下载插件</p><p><img src="../hexo-start/1220230412005940.png" alt=""></p><p>配置插件后重启, 再次测试上传目录</p><p><img src="../hexo-start/20230412011022.png" alt=""></p></li></ol><h3 id="图床SSL配置">图床SSL配置</h3><p>由于网站是https服务, 图床的链接是http, 因此页面部署后请求图片url会将http升级为https而导致图片无法加载, 因此要在七牛云配置SSL证书</p><ol><li><p>阿里云证书申请</p><img src="../hexo-start/20230412233520.png" /></li><li><p>添加域名解析, 下载证书</p><p><img src="../hexo-start/20230412233728.png" alt=""></p></li><li><p>七牛云上传证书(SSL证书 - 上传自有证书), 部署证书</p><p><img src="../hexo-start/20230412234416.png" alt=""></p></li></ol><h2 id="自定义主题">自定义主题</h2><blockquote><p>本章节均搬运自其他文章、博客并加以整合成自己样式, 在此仅作为参考</p></blockquote><h3 id="修改导航栏颜色、蒙版等">修改导航栏颜色、蒙版等</h3><p>文件<code>themes/hexo-theme-matery/source/css/matery.css</code></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/*导航栏, 底部栏颜色*/</span><span class="token selector">.bg-color</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> #2b2d30 0%<span class="token punctuation">,</span> #2b2d30 100%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.text-color</span> <span class="token punctuation">&#123;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #2b2d30 <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*底部进度条*/</span><span class="token selector">.progress-bar</span> <span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>    <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> 300<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> #bf4a30 0%<span class="token punctuation">,</span> #9d3a0f 100%<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 0.8<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*蒙版特效(可注释关闭)*/</span><span class="token selector">.bg-cover:after</span> <span class="token punctuation">&#123;</span>    <span class="token property">-webkit-animation</span><span class="token punctuation">:</span> rainbow 60s infinite<span class="token punctuation">;</span>    <span class="token property">animation</span><span class="token punctuation">:</span> rainbow 60s infinite<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.bg-cover:before,.bg-cover:after</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 滚动条 */</span><span class="token selector">::-webkit-scrollbar-thumb</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #FF2A68<span class="token punctuation">;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">-webkit-linear-gradient</span><span class="token punctuation">(</span>45deg<span class="token punctuation">,</span><span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>.4<span class="token punctuation">)</span> 25%<span class="token punctuation">,</span>transparent 25%<span class="token punctuation">,</span>transparent 50%<span class="token punctuation">,</span><span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>.4<span class="token punctuation">)</span> 50%<span class="token punctuation">,</span><span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>255<span class="token punctuation">,</span>.4<span class="token punctuation">)</span> 75%<span class="token punctuation">,</span>transparent 75%<span class="token punctuation">,</span>transparent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 3em<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">::-webkit-scrollbar-track</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #ffcacaff<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 3em<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">::-webkit-scrollbar</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改完导航栏后继续更改其他组件绿色</p><p>全局替换 <code>#429b83</code> 为 <code>#cc1212</code></p><p>浅绿 <code>#4cbf30</code> 为 <code>#2b2d30</code></p><p>深绿 <code>#0f9d58</code> 为 <code>#2b2d30</code></p><p>参考自:</p><blockquote><p><a href="https://blog.csdn.net/cungudafa/article/details/106278206">hexo（matery）背景、滚动条优化+增加点击跳评论_首页+色_cungudafa的博客</a></p><p><a href="https://www.cnblogs.com/chendeqiang/p/12861726.html">hexo-matery主题改造笔记 - 多弗朗强哥</a></p></blockquote><h3 id="副标题引用一言及打字机样式">副标题引用一言及打字机样式</h3><p>全局搜索<code>span id=&quot;subtitle&quot;</code> 可定位到打字机代码 <code>themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs</code></p><p>新增逻辑如下:</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token comment">&lt;!-- 一言 --></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>hitokoto<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hitokoto<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">font-size</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 打字机 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/typed.js@2.0.11<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/bluebird@3/js/browser/bluebird.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/whatwg-fetch@2.0.3/fetch.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> hitokotoContent <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">function</span> <span class="token function">typed</span><span class="token punctuation">(</span><span class="token parameter">hitokotoContent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> typed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Typed</span><span class="token punctuation">(</span><span class="token string">"#hitokoto"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">strings</span><span class="token operator">:</span> <span class="token punctuation">[</span>                hitokotoContent            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token literal-property property">startDelay</span><span class="token operator">:</span> <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> theme<span class="token punctuation">.</span>hitokoto<span class="token punctuation">.</span>startDelay </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">,</span>            <span class="token literal-property property">typeSpeed</span><span class="token operator">:</span> <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> theme<span class="token punctuation">.</span>hitokoto<span class="token punctuation">.</span>typeSpeed </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">,</span>            <span class="token literal-property property">loop</span><span class="token operator">:</span> <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> theme<span class="token punctuation">.</span>hitokoto<span class="token punctuation">.</span>loop </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">,</span>            <span class="token literal-property property">backSpeed</span><span class="token operator">:</span> <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> theme<span class="token punctuation">.</span>hitokoto<span class="token punctuation">.</span>backSpeed </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">,</span>            <span class="token literal-property property">showCursor</span><span class="token operator">:</span> <span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%=</span><span class="token language-javascript"> theme<span class="token punctuation">.</span>hitokoto<span class="token punctuation">.</span>showCursor </span><span class="token delimiter punctuation">%></span></span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">hitokoto</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        hitokotoContent <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://v1.hitokoto.cn'</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>                <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div>『</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>data<span class="token punctuation">.</span>hitokoto<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">』&lt;div/></span><span class="token template-punctuation string">`</span></span> <span class="token operator">+</span>                <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div style="text-align: right; font-size: smaller"> ——「</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>data<span class="token punctuation">.</span>from<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">」&lt;/div></span><span class="token template-punctuation string">`</span></span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">await</span> <span class="token function">typed</span><span class="token punctuation">(</span>hitokotoContent<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token function">hitokoto</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主题配置<code>themes/hexo-theme-matery/_config.yml</code> 添加打字机配置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 一言</span><span class="token key atrule">hitokoto</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否循环</span>  <span class="token key atrule">showCursor</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否显示光标</span>  <span class="token key atrule">startDelay</span><span class="token punctuation">:</span> <span class="token number">300</span> <span class="token comment"># 开始延迟</span>  <span class="token key atrule">typeSpeed</span><span class="token punctuation">:</span> <span class="token number">130</span> <span class="token comment"># 打字速度</span>  <span class="token key atrule">backSpeed</span><span class="token punctuation">:</span> <span class="token number">50</span> <span class="token comment"># 删除速度</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>搬运自:</p><blockquote><p><a href="https://dreamruins.gitee.io/tutorials/443376935.html#vcomments">Matery主题自定义(五)为一言和文章标题添加打字机效果</a></p></blockquote><p>2023-10-21 更新: 解决 <code>cdn.jsdelivr.net</code> 无法访问</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 一、 将 cdn.jsdelivr.net ==替换为==> fastly.jsdelivr.net</span><span class="token comment"># 二、 本地替代</span><span class="token comment"># 1. 分别下载以下三个工具包</span><span class="token comment"># https://github.com/mattboldt/typed.js/releases</span><span class="token comment"># https://github.com/petkaantonov/bluebird/releases</span><span class="token comment"># https://github.com/github/fetch/releases</span><span class="token comment"># 2. 压缩</span><span class="token function">npm</span> i uglify-js <span class="token parameter variable">-g</span> <span class="token comment"># 安装压缩包</span>uglifyjs fetch.js <span class="token parameter variable">-o</span> fetch.min.js <span class="token parameter variable">-c</span> <span class="token comment"># 压缩</span><span class="token comment"># 3. 将文件放置 主题文件夹/source/js 文件夹</span><span class="token comment"># 4. 更改script脚本路径</span><span class="token operator">&lt;</span>script <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"/js/typed.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span>script <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"/js/bluebird.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span>script <span class="token assign-left variable">src</span><span class="token operator">=</span><span class="token string">"/js/fetch.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span>/script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自动切换黑夜模式">自动切换黑夜模式</h3><p>如果用户手动点击切换则不再进行自动切换</p><p>切换按钮添加逻辑: <code>themes/hexo-theme-matery/layout/_widget/day-night.ejs</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">switchNightMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'&lt;div class="Cuteen_DarkSky">&lt;div class="Cuteen_DarkPlanet">&lt;/div>&lt;/div>'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendTo</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果用户点击切换则进行标记</span>        localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'manualDark'</span><span class="token punctuation">,</span><span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token comment">//添加一行</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasClass</span><span class="token punctuation">(</span><span class="token string">'DarkMode'</span><span class="token punctuation">)</span>            <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'DarkMode'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'isDark'</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#sum-moon-icon'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">"fa-sun"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">'fa-moon'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">'DarkMode'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'isDark'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#sum-moon-icon'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">"fa-sun"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'fa-moon'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.Cuteen_DarkSky'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeOut</span><span class="token punctuation">(</span><span class="token number">1e3</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">2e3</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>themes/hexo-theme-matery/layout/layout.ejs</code> 代码<code>&lt;%- partial('_widget/day-night') %&gt;</code> 下面(可选)添加</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">//自动切换夜间模式</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'manualDark'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 当前主题是否为夜间模式</span>        <span class="token keyword">let</span> isDark <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"isDark"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 当前时间是否为夜间</span>        <span class="token keyword">let</span> isNight <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">20</span> <span class="token operator">||</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">)</span>        <span class="token comment">// 夜间但不是夜间模式</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isNight <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isDark<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">'DarkMode'</span><span class="token punctuation">)</span>            localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'isDark'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#sum-moon-icon'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">"fa-sun"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'fa-moon'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 不是夜间但是夜间模式</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isNight <span class="token operator">&amp;&amp;</span> isDark<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'body'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'DarkMode'</span><span class="token punctuation">)</span>            localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'isDark'</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#sum-moon-icon'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">"fa-sun"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">'fa-moon'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考自:</p><blockquote><p><a href="https://dreamruins.gitee.io/tutorials/1121281946">Matery主题自定义(一)黑夜模式</a></p></blockquote><h3 id="页面加载动画">页面加载动画</h3><ol><li><p>结构代码</p><p>新建<code>themes/hexo-theme-matery/layout/_widget/loading.ejs</code>文件</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>preloader<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </span><span class="token delimiter punctuation">%></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loading-box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loading-left-bg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loading-right-bg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>spinner-box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>configure-border-1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>configure-core<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>configure-border-2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>configure-core<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loading-word<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>玩命加载中🤣🤣🤣<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 页面加载动画 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>overflow <span class="token operator">=</span> <span class="token string">'auto'</span><span class="token punctuation">;</span>            document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'loading-box'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"loaded"</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">&#125;</span> </span><span class="token delimiter punctuation">%></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>样式代码</p><p>新建<code>themes/hexo-theme-matery/source/css/loading.css</code> 文件</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#loading-box .loading-left-bg,#loading-box .loading-right-bg</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> 1000<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #37474f<span class="token punctuation">;</span>    <span class="token property">transition</span><span class="token punctuation">:</span> all 0.5s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#loading-box .loading-right-bg</span> <span class="token punctuation">&#123;</span>    <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#loading-box>.spinner-box</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> 1001<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#loading-box .spinner-box .configure-border-1</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 115px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 115px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> #ffab91<span class="token punctuation">;</span>    <span class="token property">animation</span><span class="token punctuation">:</span> configure-clockwise 3s ease-in-out 0s infinite alternate<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#loading-box .spinner-box .configure-border-2</span> <span class="token punctuation">&#123;</span>    <span class="token property">left</span><span class="token punctuation">:</span> -115px<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 115px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 115px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>63<span class="token punctuation">,</span> 249<span class="token punctuation">,</span> 220<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>45deg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">animation</span><span class="token punctuation">:</span> configure-xclockwise 3s ease-in-out 0s infinite alternate<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#loading-box .spinner-box .loading-word</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #ffffff<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 0.8rem<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#loading-box .spinner-box .configure-core</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #37474f<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">div.loaded div.loading-left-bg</span> <span class="token punctuation">&#123;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-100%<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">div.loaded div.loading-right-bg</span> <span class="token punctuation">&#123;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>100%<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">div.loaded div.spinner-box</span> <span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> none <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@keyframes</span> configure-clockwise</span> <span class="token punctuation">&#123;</span>    <span class="token selector">0%</span> <span class="token punctuation">&#123;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">25%</span> <span class="token punctuation">&#123;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>90deg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">50%</span> <span class="token punctuation">&#123;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>180deg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">75%</span> <span class="token punctuation">&#123;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>270deg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">100%</span> <span class="token punctuation">&#123;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token atrule"><span class="token rule">@keyframes</span> configure-xclockwise</span> <span class="token punctuation">&#123;</span>    <span class="token selector">0%</span> <span class="token punctuation">&#123;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>45deg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">25%</span> <span class="token punctuation">&#123;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-45deg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">50%</span> <span class="token punctuation">&#123;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-135deg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">75%</span> <span class="token punctuation">&#123;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-225deg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">100%</span> <span class="token punctuation">&#123;</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-315deg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将加载动画添加至页面</p><p>找到 <code>themes&gt;hexo-theme-matery&gt;layout&gt;_partial&gt;head.ejs</code> 文件，这个文件专门用来引入样式文件和配置网页信息</p><p>在 <code>&lt;head&gt;</code> 标签中引入 <strong>loading.css</strong> 文件</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> theme<span class="token punctuation">.</span>jsDelivr<span class="token punctuation">.</span>url </span><span class="token delimiter punctuation">%></span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span><span class="token string">'/css/loading.css'</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>引入样式文件后，引入结构文件 <strong>loading.ejs</strong>，插入在<code>themes&gt;hexo-theme-matery&gt;layout&gt;layout.ejs</code> <code>&lt;body&gt;</code> 标签下第一行就行了</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_widget/loading'</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>主题配置中<code>_config.yml</code> 添加配置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 是否开启页面加载动画</span><span class="token key atrule">preloader</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><p>搬运自:</p><blockquote><p><a href="https://dreamruins.gitee.io/tutorials/1793947201.html">Matery主题自定义(六)页面加载动画)</a></p></blockquote><h2 id="文章-Front-matter-介绍">文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解">Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>hide</td><td><code>false</code></td><td>隐藏文章，如果<code>hide</code>值为<code>true</code>，则文章不会在首页显示</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例">最简示例</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span><span class="token front-matter yaml language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span></span><span class="token punctuation">---</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最全示例">最全示例</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span><span class="token front-matter yaml language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">tags</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>Typora<span class="token punctuation">,</span> Markdown<span class="token punctuation">]</span><span class="token key atrule">categories</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>program<span class="token punctuation">]</span><span class="token key atrule">author</span><span class="token punctuation">:</span> author<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 61503690505f84b144e6ac89124540a3eb8d22e77db76500984cfc50a1d8776e<span class="token key atrule">reprintPolicy</span><span class="token punctuation">:</span> cc_by_nc<span class="token key atrule">hide</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token comment"># 图片格式与typora一致</span><span class="token key atrule">typora-root-url</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> title <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">---</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> program </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
